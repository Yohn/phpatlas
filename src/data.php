<?php 
return [
    "abs" => "Absolute value",
    "acos" => "Arc cosine",
    "acosh" => "Inverse hyperbolic cosine",
    "addcslashes" => "Quote string with slashes in a C style",
    "addslashes" => "Quote string with slashes",
    "APCIterator::current" => "Get current item",
    "APCIterator::getTotalCount" => "Get total count",
    "APCIterator::getTotalHits" => "Get total cache hits",
    "APCIterator::getTotalSize" => "Get total cache size",
    "APCIterator::key" => "Get iterator key",
    "APCIterator::next" => "Move pointer to next item",
    "APCIterator::rewind" => "Rewinds iterator",
    "APCIterator::valid" => "Checks if current position is valid",
    "APCIterator::__construct" => "Constructs an APCIterator iterator object",
    "APCUIterator::current" => "Get current item",
    "APCUIterator::getTotalCount" => "Get total count",
    "APCUIterator::getTotalHits" => "Get total cache hits",
    "APCUIterator::getTotalSize" => "Get total cache size",
    "APCUIterator::key" => "Get iterator key",
    "APCUIterator::next" => "Move pointer to next item",
    "APCUIterator::rewind" => "Rewinds iterator",
    "APCUIterator::valid" => "Checks if current position is valid",
    "APCUIterator::__construct" => "Constructs an APCUIterator iterator object",
    "AppendIterator::append" => "Appends an iterator",
    "AppendIterator::current" => "Gets the current value",
    "AppendIterator::getArrayIterator" => "Gets the ArrayIterator",
    "AppendIterator::getInnerIterator" => "Gets the inner iterator",
    "AppendIterator::getIteratorIndex" => "Gets an index of iterators",
    "AppendIterator::key" => "Gets the current key",
    "AppendIterator::next" => "Moves to the next element",
    "AppendIterator::rewind" => "Rewinds the Iterator",
    "AppendIterator::valid" => "Checks validity of the current element",
    "AppendIterator::__construct" => "Constructs an AppendIterator",
    "array" => "Create an array",
    "ArrayAccess::offsetExists" => "Whether an offset exists",
    "ArrayAccess::offsetGet" => "Offset to retrieve",
    "ArrayAccess::offsetSet" => "Assign a value to the specified offset",
    "ArrayAccess::offsetUnset" => "Unset an offset",
    "ArrayIterator::append" => "Append an element",
    "ArrayIterator::asort" => "Sort array by values",
    "ArrayIterator::count" => "Count elements",
    "ArrayIterator::current" => "Return current array entry",
    "ArrayIterator::getArrayCopy" => "Get array copy",
    "ArrayIterator::getFlags" => "Get flags",
    "ArrayIterator::key" => "Return current array key",
    "ArrayIterator::ksort" => "Sort array by keys",
    "ArrayIterator::natcasesort" => "Sort an array naturally, case insensitive",
    "ArrayIterator::natsort" => "Sort an array naturally",
    "ArrayIterator::next" => "Move to next entry",
    "ArrayIterator::offsetExists" => "Check if offset exists",
    "ArrayIterator::offsetGet" => "Get value for an offset",
    "ArrayIterator::offsetSet" => "Set value for an offset",
    "ArrayIterator::offsetUnset" => "Unset value for an offset",
    "ArrayIterator::rewind" => "Rewind array back to the start",
    "ArrayIterator::seek" => "Seek to position",
    "ArrayIterator::serialize" => "Serialize",
    "ArrayIterator::setFlags" => "Set behaviour flags",
    "ArrayIterator::uasort" => "Sort with a user-defined comparison function and maintain index association",
    "ArrayIterator::uksort" => "Sort by keys using a user-defined comparison function",
    "ArrayIterator::unserialize" => "Unserialize",
    "ArrayIterator::valid" => "Check whether array contains more entries",
    "ArrayIterator::__construct" => "Construct an ArrayIterator",
    "ArrayObject::append" => "Appends the value",
    "ArrayObject::asort" => "Sort the entries by value",
    "ArrayObject::count" => "Get the number of public properties in the ArrayObject",
    "ArrayObject::exchangeArray" => "Exchange the array for another one",
    "ArrayObject::getArrayCopy" => "Creates a copy of the ArrayObject",
    "ArrayObject::getFlags" => "Gets the behavior flags",
    "ArrayObject::getIterator" => "Create a new iterator from an ArrayObject instance",
    "ArrayObject::getIteratorClass" => "Gets the iterator classname for the ArrayObject",
    "ArrayObject::ksort" => "Sort the entries by key",
    "ArrayObject::natcasesort" => "Sort an array using a case insensitive &quot;natural order&quot; algorithm",
    "ArrayObject::natsort" => "Sort entries using a &quot;natural order&quot; algorithm",
    "ArrayObject::offsetExists" => "Returns whether the requested index exists",
    "ArrayObject::offsetGet" => "Returns the value at the specified index",
    "ArrayObject::offsetSet" => "Sets the value at the specified index to newval",
    "ArrayObject::offsetUnset" => "Unsets the value at the specified index",
    "ArrayObject::serialize" => "Serialize an ArrayObject",
    "ArrayObject::setFlags" => "Sets the behavior flags",
    "ArrayObject::setIteratorClass" => "Sets the iterator classname for the ArrayObject",
    "ArrayObject::uasort" => "Sort the entries with a user-defined comparison function and maintain key association",
    "ArrayObject::uksort" => "Sort the entries by keys using a user-defined comparison function",
    "ArrayObject::unserialize" => "Unserialize an ArrayObject",
    "ArrayObject::__construct" => "Construct a new array object",
    "arsort" => "Sort an array in reverse order and maintain index association",
    "asin" => "Arc sine",
    "asinh" => "Inverse hyperbolic sine",
    "asort" => "Sort an array and maintain index association",
    "assert" => "Checks if assertion is FALSE",
    "atan" => "Arc tangent",
    "atanh" => "Inverse hyperbolic tangent",
    "basename" => "Returns trailing name component of path",
    "bcadd" => "Add two arbitrary precision numbers",
    "bccomp" => "Compare two arbitrary precision numbers",
    "bcdiv" => "Divide two arbitrary precision numbers",
    "bcmod" => "Get modulus of an arbitrary precision number",
    "bcmul" => "Multiply two arbitrary precision numbers",
    "bcpow" => "Raise an arbitrary precision number to another",
    "bcpowmod" => "Raise an arbitrary precision number to another, reduced by a specified modulus",
    "bcscale" => "Set default scale parameter for all bc math functions",
    "bcsqrt" => "Get the square root of an arbitrary precision number",
    "bcsub" => "Subtract one arbitrary precision number from another",
    "bindec" => "Binary to decimal",
    "bindtextdomain" => "Sets the path for a domain",
    "boolval" => "Get the boolean value of a variable",
    "bzclose" => "Close a bzip2 file",
    "bzcompress" => "Compress a string into bzip2 encoded data",
    "bzdecompress" => "Decompresses bzip2 encoded data",
    "bzerrno" => "Returns a bzip2 error number",
    "bzerror" => "Returns the bzip2 error number and error string in an array",
    "bzerrstr" => "Returns a bzip2 error string",
    "bzflush" => "Force a write of all buffered data",
    "bzopen" => "Opens a bzip2 compressed file",
    "bzread" => "Binary safe bzip2 file read",
    "bzwrite" => "Binary safe bzip2 file write",
    "CachingIterator::count" => "The number of elements in the iterator",
    "CachingIterator::current" => "Return the current element",
    "CachingIterator::getCache" => "Retrieve the contents of the cache",
    "CachingIterator::getFlags" => "Get flags used",
    "CachingIterator::getInnerIterator" => "Returns the inner iterator",
    "CachingIterator::hasNext" => "Check whether the inner iterator has a valid next element",
    "CachingIterator::key" => "Return the key for the current element",
    "CachingIterator::next" => "Move the iterator forward",
    "CachingIterator::offsetExists" => "The offsetExists purpose",
    "CachingIterator::offsetGet" => "The offsetGet purpose",
    "CachingIterator::offsetSet" => "The offsetSet purpose",
    "CachingIterator::offsetUnset" => "The offsetUnset purpose",
    "CachingIterator::rewind" => "Rewind the iterator",
    "CachingIterator::setFlags" => "The setFlags purpose",
    "CachingIterator::valid" => "Check whether the current element is valid",
    "CachingIterator::__construct" => "Construct a new CachingIterator object for the iterator",
    "CachingIterator::__toString" => "Return the string representation of the current element",
    "Cairo::availableFonts" => "Retrieves the availables font types",
    "Cairo::availableSurfaces" => "Retrieves all available surfaces",
    "Cairo::statusToString" => "Retrieves the current status as string",
    "Cairo::version" => "Retrives cairo's library version",
    "Cairo::versionString" => "Retrieves cairo version as string",
    "CairoContext::appendPath" => "Appends a path to current path",
    "CairoContext::arc" => "Adds a circular arc",
    "CairoContext::arcNegative" => "Adds a negative arc",
    "CairoContext::clip" => "Establishes a new clip region",
    "CairoContext::clipExtents" => "Computes the area inside the current clip",
    "CairoContext::clipPreserve" => "Establishes a new clip region from the current clip",
    "CairoContext::clipRectangleList" => "Retrieves the current clip as a list of rectangles",
    "CairoContext::closePath" => "Closes the current path",
    "CairoContext::copyPage" => "Emits the current page",
    "CairoContext::copyPath" => "Creates a copy of the current path",
    "CairoContext::copyPathFlat" => "Gets a flattened copy of the current path",
    "CairoContext::curveTo" => "Adds a curve",
    "CairoContext::deviceToUser" => "Transform a coordinate",
    "CairoContext::deviceToUserDistance" => "Transform a distance",
    "CairoContext::fill" => "Fills the current path",
    "CairoContext::fillExtents" => "Computes the filled area",
    "CairoContext::fillPreserve" => "Fills and preserve the current path",
    "CairoContext::fontExtents" => "Get the font extents",
    "CairoContext::getAntialias" => "Retrives the current antialias mode",
    "CairoContext::getCurrentPoint" => "The getCurrentPoint purpose",
    "CairoContext::getDash" => "The getDash purpose",
    "CairoContext::getDashCount" => "The getDashCount purpose",
    "CairoContext::getFillRule" => "The getFillRule purpose",
    "CairoContext::getFontFace" => "The getFontFace purpose",
    "CairoContext::getFontMatrix" => "The getFontMatrix purpose",
    "CairoContext::getFontOptions" => "The getFontOptions purpose",
    "CairoContext::getGroupTarget" => "The getGroupTarget purpose",
    "CairoContext::getLineCap" => "The getLineCap purpose",
    "CairoContext::getLineJoin" => "The getLineJoin purpose",
    "CairoContext::getLineWidth" => "The getLineWidth purpose",
    "CairoContext::getMatrix" => "The getMatrix purpose",
    "CairoContext::getMiterLimit" => "The getMiterLimit purpose",
    "CairoContext::getOperator" => "The getOperator purpose",
    "CairoContext::getScaledFont" => "The getScaledFont purpose",
    "CairoContext::getSource" => "The getSource purpose",
    "CairoContext::getTarget" => "The getTarget purpose",
    "CairoContext::getTolerance" => "The getTolerance purpose",
    "CairoContext::glyphPath" => "The glyphPath purpose",
    "CairoContext::hasCurrentPoint" => "The hasCurrentPoint purpose",
    "CairoContext::identityMatrix" => "The identityMatrix purpose",
    "CairoContext::inFill" => "The inFill purpose",
    "CairoContext::inStroke" => "The inStroke purpose",
    "CairoContext::lineTo" => "The lineTo purpose",
    "CairoContext::mask" => "The mask purpose",
    "CairoContext::maskSurface" => "The maskSurface purpose",
    "CairoContext::moveTo" => "The moveTo purpose",
    "CairoContext::newPath" => "The newPath purpose",
    "CairoContext::newSubPath" => "The newSubPath purpose",
    "CairoContext::paint" => "The paint purpose",
    "CairoContext::paintWithAlpha" => "The paintWithAlpha purpose",
    "CairoContext::pathExtents" => "The pathExtents purpose",
    "CairoContext::popGroup" => "The popGroup purpose",
    "CairoContext::popGroupToSource" => "The popGroupToSource purpose",
    "CairoContext::pushGroup" => "The pushGroup purpose",
    "CairoContext::pushGroupWithContent" => "The pushGroupWithContent purpose",
    "CairoContext::rectangle" => "The rectangle purpose",
    "CairoContext::relCurveTo" => "The relCurveTo purpose",
    "CairoContext::relLineTo" => "The relLineTo purpose",
    "CairoContext::relMoveTo" => "The relMoveTo purpose",
    "CairoContext::resetClip" => "The resetClip purpose",
    "CairoContext::restore" => "The restore purpose",
    "CairoContext::rotate" => "The rotate purpose",
    "CairoContext::save" => "The save purpose",
    "CairoContext::scale" => "The scale purpose",
    "CairoContext::selectFontFace" => "The selectFontFace purpose",
    "CairoContext::setAntialias" => "The setAntialias purpose",
    "CairoContext::setDash" => "The setDash purpose",
    "CairoContext::setFillRule" => "The setFillRule purpose",
    "CairoContext::setFontFace" => "The setFontFace purpose",
    "CairoContext::setFontMatrix" => "The setFontMatrix purpose",
    "CairoContext::setFontOptions" => "The setFontOptions purpose",
    "CairoContext::setFontSize" => "The setFontSize purpose",
    "CairoContext::setLineCap" => "The setLineCap purpose",
    "CairoContext::setLineJoin" => "The setLineJoin purpose",
    "CairoContext::setLineWidth" => "The setLineWidth purpose",
    "CairoContext::setMatrix" => "The setMatrix purpose",
    "CairoContext::setMiterLimit" => "The setMiterLimit purpose",
    "CairoContext::setOperator" => "The setOperator purpose",
    "CairoContext::setScaledFont" => "The setScaledFont purpose",
    "CairoContext::setSource" => "The setSource purpose",
    "CairoContext::setSourceRGB" => "The setSourceRGB purpose",
    "CairoContext::setSourceRGBA" => "The setSourceRGBA purpose",
    "CairoContext::setSourceSurface" => "The setSourceSurface purpose",
    "CairoContext::setTolerance" => "The setTolerance purpose",
    "CairoContext::showPage" => "The showPage purpose",
    "CairoContext::showText" => "The showText purpose",
    "CairoContext::status" => "The status purpose",
    "CairoContext::stroke" => "The stroke purpose",
    "CairoContext::strokeExtents" => "The strokeExtents purpose",
    "CairoContext::strokePreserve" => "The strokePreserve purpose",
    "CairoContext::textExtents" => "The textExtents purpose",
    "CairoContext::textPath" => "The textPath purpose",
    "CairoContext::transform" => "The transform purpose",
    "CairoContext::translate" => "The translate purpose",
    "CairoContext::userToDevice" => "The userToDevice purpose",
    "CairoContext::userToDeviceDistance" => "The userToDeviceDistance purpose",
    "CairoContext::__construct" => "Creates a new CairoContext",
    "CairoFontFace::getType" => "Retrieves the font face type",
    "CairoFontFace::status" => "Check for CairoFontFace errors",
    "CairoFontFace::__construct" => "Creates a new CairoFontFace object",
    "CairoFontOptions::equal" => "The equal purpose",
    "CairoFontOptions::getAntialias" => "The getAntialias purpose",
    "CairoFontOptions::getHintMetrics" => "The getHintMetrics purpose",
    "CairoFontOptions::getHintStyle" => "The getHintStyle purpose",
    "CairoFontOptions::getSubpixelOrder" => "The getSubpixelOrder purpose",
    "CairoFontOptions::hash" => "The hash purpose",
    "CairoFontOptions::merge" => "The merge purpose",
    "CairoFontOptions::setAntialias" => "The setAntialias purpose",
    "CairoFontOptions::setHintMetrics" => "The setHintMetrics purpose",
    "CairoFontOptions::setHintStyle" => "The setHintStyle purpose",
    "CairoFontOptions::setSubpixelOrder" => "The setSubpixelOrder purpose",
    "CairoFontOptions::status" => "The status purpose",
    "CairoFontOptions::__construct" => "The __construct purpose",
    "CairoFormat::strideForWidth" => "Provides an appropiate stride to use",
    "CairoGradientPattern::addColorStopRgb" => "The addColorStopRgb purpose",
    "CairoGradientPattern::addColorStopRgba" => "The addColorStopRgba purpose",
    "CairoGradientPattern::getColorStopCount" => "The getColorStopCount purpose",
    "CairoGradientPattern::getColorStopRgba" => "The getColorStopRgba purpose",
    "CairoGradientPattern::getExtend" => "The getExtend purpose",
    "CairoGradientPattern::setExtend" => "The setExtend purpose",
    "CairoImageSurface::createForData" => "The createForData purpose",
    "CairoImageSurface::createFromPng" => "Creates a new CairoImageSurface form a png image file",
    "CairoImageSurface::getData" => "Gets the image data as string",
    "CairoImageSurface::getFormat" => "Get the image format",
    "CairoImageSurface::getHeight" => "Retrieves the height of the CairoImageSurface",
    "CairoImageSurface::getStride" => "The getStride purpose",
    "CairoImageSurface::getWidth" => "Retrieves the width of the CairoImageSurface",
    "CairoImageSurface::__construct" => "Creates a new CairoImageSurface",
    "CairoLinearGradient::getPoints" => "The getPoints purpose",
    "CairoLinearGradient::__construct" => "The __construct purpose",
    "CairoMatrix::initIdentity" => "Creates a new identity matrix",
    "CairoMatrix::initRotate" => "Creates a new rotated matrix",
    "CairoMatrix::initScale" => "Creates a new scaling matrix",
    "CairoMatrix::initTranslate" => "Creates a new translation matrix",
    "CairoMatrix::invert" => "The invert purpose",
    "CairoMatrix::multiply" => "The multiply purpose",
    "CairoMatrix::rotate" => "The rotate purpose",
    "CairoMatrix::scale" => "Applies scaling to a matrix",
    "CairoMatrix::transformDistance" => "The transformDistance purpose",
    "CairoMatrix::transformPoint" => "The transformPoint purpose",
    "CairoMatrix::translate" => "The translate purpose",
    "CairoMatrix::__construct" => "Creates a new CairoMatrix object",
    "CairoPattern::getMatrix" => "The getMatrix purpose",
    "CairoPattern::getType" => "The getType purpose",
    "CairoPattern::setMatrix" => "The setMatrix purpose",
    "CairoPattern::status" => "The status purpose",
    "CairoPattern::__construct" => "The __construct purpose",
    "CairoPdfSurface::setSize" => "The setSize purpose",
    "CairoPdfSurface::__construct" => "The __construct purpose",
    "CairoPsSurface::dscBeginPageSetup" => "The dscBeginPageSetup purpose",
    "CairoPsSurface::dscBeginSetup" => "The dscBeginSetup purpose",
    "CairoPsSurface::dscComment" => "The dscComment purpose",
    "CairoPsSurface::getEps" => "The getEps purpose",
    "CairoPsSurface::getLevels" => "The getLevels purpose",
    "CairoPsSurface::levelToString" => "The levelToString purpose",
    "CairoPsSurface::restrictToLevel" => "The restrictToLevel purpose",
    "CairoPsSurface::setEps" => "The setEps purpose",
    "CairoPsSurface::setSize" => "The setSize purpose",
    "CairoPsSurface::__construct" => "The __construct purpose",
    "CairoRadialGradient::getCircles" => "The getCircles purpose",
    "CairoRadialGradient::__construct" => "The __construct purpose",
    "CairoScaledFont::extents" => "The extents purpose",
    "CairoScaledFont::getCtm" => "The getCtm purpose",
    "CairoScaledFont::getFontFace" => "The getFontFace purpose",
    "CairoScaledFont::getFontMatrix" => "The getFontMatrix purpose",
    "CairoScaledFont::getFontOptions" => "The getFontOptions purpose",
    "CairoScaledFont::getScaleMatrix" => "The getScaleMatrix purpose",
    "CairoScaledFont::getType" => "The getType purpose",
    "CairoScaledFont::glyphExtents" => "The glyphExtents purpose",
    "CairoScaledFont::status" => "The status purpose",
    "CairoScaledFont::textExtents" => "The textExtents purpose",
    "CairoScaledFont::__construct" => "The __construct purpose",
    "CairoSolidPattern::getRgba" => "The getRgba purpose",
    "CairoSolidPattern::__construct" => "The __construct purpose",
    "CairoSurface::copyPage" => "The copyPage purpose",
    "CairoSurface::createSimilar" => "The createSimilar purpose",
    "CairoSurface::finish" => "The finish purpose",
    "CairoSurface::flush" => "The flush purpose",
    "CairoSurface::getContent" => "The getContent purpose",
    "CairoSurface::getDeviceOffset" => "The getDeviceOffset purpose",
    "CairoSurface::getFontOptions" => "The getFontOptions purpose",
    "CairoSurface::getType" => "The getType purpose",
    "CairoSurface::markDirty" => "The markDirty purpose",
    "CairoSurface::markDirtyRectangle" => "The markDirtyRectangle purpose",
    "CairoSurface::setDeviceOffset" => "The setDeviceOffset purpose",
    "CairoSurface::setFallbackResolution" => "The setFallbackResolution purpose",
    "CairoSurface::showPage" => "The showPage purpose",
    "CairoSurface::status" => "The status purpose",
    "CairoSurface::writeToPng" => "The writeToPng purpose",
    "CairoSurface::__construct" => "The __construct purpose",
    "CairoSurfacePattern::getExtend" => "The getExtend purpose",
    "CairoSurfacePattern::getFilter" => "The getFilter purpose",
    "CairoSurfacePattern::getSurface" => "The getSurface purpose",
    "CairoSurfacePattern::setExtend" => "The setExtend purpose",
    "CairoSurfacePattern::setFilter" => "The setFilter purpose",
    "CairoSurfacePattern::__construct" => "The __construct purpose",
    "CairoSvgSurface::getVersions" => "Used to retrieve a list of supported SVG versions",
    "CairoSvgSurface::restrictToVersion" => "The restrictToVersion purpose",
    "CairoSvgSurface::versionToString" => "The versionToString purpose",
    "CairoSvgSurface::__construct" => "The __construct purpose",
    "CallbackFilterIterator::accept" => "Calls the callback with the current value, the current key and the inner iterator as arguments",
    "CallbackFilterIterator::__construct" => "Create a filtered iterator from another iterator",
    "ceil" => "Round fractions up",
    "chdb::get" => "Gets the value associated with a key",
    "chdb::__construct" => "Creates a chdb instance",
    "chdir" => "Change directory",
    "checkdate" => "Validate a Gregorian date",
    "checkdnsrr" => "Check DNS records corresponding to a given Internet host name or IP address",
    "chgrp" => "Changes file group",
    "chmod" => "Changes file mode",
    "chop" => "Alias of rtrim",
    "chown" => "Changes file owner",
    "chr" => "Return a specific character",
    "chroot" => "Change the root directory",
    "clearstatcache" => "Clears file status cache",
    "closedir" => "Close directory handle",
    "closelog" => "Close connection to system logger",
    "Closure::bind" => "Duplicates a closure with a specific bound object and class scope",
    "Closure::bindTo" => "Duplicates the closure with a new bound object and class scope",
    "Closure::call" => "Binds and calls the closure",
    "Closure::fromCallable" => "Converts a callable into a closure",
    "Closure::__construct" => "Constructor that disallows instantiation",
    "Collator::asort" => "Sort array maintaining index association",
    "Collator::compare" => "Compare two Unicode strings",
    "Collator::create" => "Create a collator",
    "Collator::getAttribute" => "Get collation attribute value",
    "Collator::getErrorCode" => "Get collator's last error code",
    "Collator::getErrorMessage" => "Get text for collator's last error code",
    "Collator::getLocale" => "Get the locale name of the collator",
    "Collator::getSortKey" => "Get sorting key for a string",
    "Collator::getStrength" => "Get current collation strength",
    "Collator::setAttribute" => "Set collation attribute",
    "Collator::setStrength" => "Set collation strength",
    "Collator::sort" => "Sort array using specified collator",
    "Collator::sortWithSortKeys" => "Sort array using specified collator and sort keys",
    "Collator::__construct" => "Create a collator",
    "Collectable::isGarbage" => "Determine whether an object has been marked as garbage",
    "Collectable::setGarbage" => "Mark an object as garbage",
    "compact" => "Create array containing variables and their values",
    "Componere" => "Casting",
    "Cond::broadcast" => "Broadcast a Condition",
    "Cond::create" => "Create a Condition",
    "Cond::destroy" => "Destroy a Condition",
    "Cond::signal" => "Signal a Condition",
    "Cond::wait" => "Wait for Condition",
    "constant" => "Returns the value of a constant",
    "Context" => "Context parameter listing",
    "copy" => "Copies file",
    "cos" => "Cosine",
    "cosh" => "Hyperbolic cosine",
    "count" => "Count all elements in an array, or something in an object",
    "Countable::count" => "Count elements of an object",
    "crypt" => "One-way string hashing",
    "CURL" => "CURL context option listing",
    "CURLFile::getFilename" => "Get file name",
    "CURLFile::getMimeType" => "Get MIME type",
    "CURLFile::getPostFilename" => "Get file name for POST",
    "CURLFile::setMimeType" => "Set MIME type",
    "CURLFile::setPostFilename" => "Set file name for POST",
    "CURLFile::__construct" => "Create a CURLFile object",
    "CURLFile::__wakeup" => "Unserialization handler",
    "current" => "Return the current element in an array",
    "data:" => "Data (RFC 2397)",
    "date" => "Format a local time/date",
    "DateInterval::createFromDateString" => "Sets up a DateInterval from the relative parts of the string",
    "DateInterval::format" => "Formats the interval",
    "DateInterval::__construct" => "Creates a new DateInterval object",
    "DatePeriod::getDateInterval" => "Gets the interval",
    "DatePeriod::getEndDate" => "Gets the end date",
    "DatePeriod::getStartDate" => "Gets the start date",
    "DatePeriod::__construct" => "Creates a new DatePeriod object",
    "DateTime::createFromFormat" => "Parses a time string according to a specified format",
    "DateTime::diff" => "Returns the difference between two DateTime objects",
    "DateTime::format" => "Returns date formatted according to given format",
    "DateTime::getLastErrors" => "Returns the warnings and errors",
    "DateTime::getOffset" => "Returns the timezone offset",
    "DateTime::getTimestamp" => "Gets the Unix timestamp",
    "DateTime::getTimezone" => "Return time zone relative to given DateTime",
    "DateTime::modify" => "Alters the timestamp",
    "DateTime::setDate" => "Sets the date",
    "DateTime::setISODate" => "Sets the ISO date",
    "DateTime::setTime" => "Sets the time",
    "DateTime::setTimestamp" => "Sets the date and time based on an Unix timestamp",
    "DateTime::setTimezone" => "Sets the time zone for the DateTime object",
    "DateTime::__construct" => "Returns new DateTime object",
    "DateTime::__wakeup" => "The __wakeup handler",
    "DateTimeImmutable::add" => "Adds an amount of days, months, years, hours, minutes and seconds",
    "DateTimeImmutable::createFromFormat" => "Parses a time string according to a specified format",
    "DateTimeImmutable::createFromMutable" => "Returns new DateTimeImmutable object encapsulating the given DateTime object",
    "DateTimeImmutable::getLastErrors" => "Returns the warnings and errors",
    "DateTimeImmutable::modify" => "Creates a new object with modified timestamp",
    "DateTimeImmutable::setDate" => "Sets the date",
    "DateTimeImmutable::setISODate" => "Sets the ISO date",
    "DateTimeImmutable::setTime" => "Sets the time",
    "DateTimeImmutable::setTimestamp" => "Sets the date and time based on a Unix timestamp",
    "DateTimeImmutable::setTimezone" => "Sets the time zone",
    "DateTimeImmutable::sub" => "Subtracts an amount of days, months, years, hours, minutes and seconds",
    "DateTimeImmutable::__construct" => "Returns new DateTimeImmutable object",
    "DateTimeZone::getLocation" => "Returns location information for a timezone",
    "DateTimeZone::getName" => "Returns the name of the timezone",
    "DateTimeZone::getOffset" => "Returns the timezone offset from GMT",
    "DateTimeZone::getTransitions" => "Returns all transitions for the timezone",
    "DateTimeZone::listAbbreviations" => "Returns associative array containing dst, offset and the timezone name",
    "DateTimeZone::listIdentifiers" => "Returns a numerically indexed array containing all defined timezone identifiers",
    "DateTimeZone::__construct" => "Creates new DateTimeZone object",
    "dcgettext" => "Overrides the domain for a single lookup",
    "dcngettext" => "Plural version of dcgettext",
    "decbin" => "Decimal to binary",
    "dechex" => "Decimal to hexadecimal",
    "decoct" => "Decimal to octal",
    "define" => "Defines a named constant",
    "defined" => "Checks whether a given named constant exists",
    "delete" => "See unlink or unset",
    "dgettext" => "Override the current domain",
    "die" => "Equivalent to exit",
    "dir" => "Return an instance of the Directory class",
    "Directory::close" => "Close directory handle",
    "Directory::read" => "Read entry from directory handle",
    "Directory::rewind" => "Rewind directory handle",
    "DirectoryIterator::current" => "Return the current DirectoryIterator item",
    "DirectoryIterator::getATime" => "Get last access time of the current DirectoryIterator item",
    "DirectoryIterator::getBasename" => "Get base name of current DirectoryIterator item",
    "DirectoryIterator::getCTime" => "Get inode change time of the current DirectoryIterator item",
    "DirectoryIterator::getExtension" => "Gets the file extension",
    "DirectoryIterator::getFilename" => "Return file name of current DirectoryIterator item",
    "DirectoryIterator::getGroup" => "Get group for the current DirectoryIterator item",
    "DirectoryIterator::getInode" => "Get inode for the current DirectoryIterator item",
    "DirectoryIterator::getMTime" => "Get last modification time of current DirectoryIterator item",
    "DirectoryIterator::getOwner" => "Get owner of current DirectoryIterator item",
    "DirectoryIterator::getPath" => "Get path of current Iterator item without filename",
    "DirectoryIterator::getPathname" => "Return path and file name of current DirectoryIterator item",
    "DirectoryIterator::getPerms" => "Get the permissions of current DirectoryIterator item",
    "DirectoryIterator::getSize" => "Get size of current DirectoryIterator item",
    "DirectoryIterator::getType" => "Determine the type of the current DirectoryIterator item",
    "DirectoryIterator::isDir" => "Determine if current DirectoryIterator item is a directory",
    "DirectoryIterator::isDot" => "Determine if current DirectoryIterator item is '.' or '..'",
    "DirectoryIterator::isExecutable" => "Determine if current DirectoryIterator item is executable",
    "DirectoryIterator::isFile" => "Determine if current DirectoryIterator item is a regular file",
    "DirectoryIterator::isLink" => "Determine if current DirectoryIterator item is a symbolic link",
    "DirectoryIterator::isReadable" => "Determine if current DirectoryIterator item can be read",
    "DirectoryIterator::isWritable" => "Determine if current DirectoryIterator item can be written to",
    "DirectoryIterator::key" => "Return the key for the current DirectoryIterator item",
    "DirectoryIterator::next" => "Move forward to next DirectoryIterator item",
    "DirectoryIterator::rewind" => "Rewind the DirectoryIterator back to the start",
    "DirectoryIterator::seek" => "Seek to a DirectoryIterator item",
    "DirectoryIterator::valid" => "Check whether current DirectoryIterator position is a valid file",
    "DirectoryIterator::__construct" => "Constructs a new directory iterator from a path",
    "DirectoryIterator::__toString" => "Get file name as a string",
    "dirname" => "Returns a parent directory's path",
    "diskfreespace" => "Alias of disk_free_space",
    "dl" => "Loads a PHP extension at runtime",
    "dngettext" => "Plural version of dgettext",
    "DOMAttr::isId" => "Checks if attribute is a defined ID",
    "DOMAttr::__construct" => "Creates a new DOMAttr object",
    "DOMCdataSection::__construct" => "Constructs a new DOMCdataSection object",
    "DOMCharacterData::appendData" => "Append the string to the end of the character data of the node",
    "DOMCharacterData::deleteData" => "Remove a range of characters from the node",
    "DOMCharacterData::insertData" => "Insert a string at the specified 16-bit unit offset",
    "DOMCharacterData::replaceData" => "Replace a substring within the DOMCharacterData node",
    "DOMCharacterData::substringData" => "Extracts a range of data from the node",
    "DOMComment::__construct" => "Creates a new DOMComment object",
    "DOMDocument::createAttribute" => "Create new attribute",
    "DOMDocument::createAttributeNS" => "Create new attribute node with an associated namespace",
    "DOMDocument::createCDATASection" => "Create new cdata node",
    "DOMDocument::createComment" => "Create new comment node",
    "DOMDocument::createDocumentFragment" => "Create new document fragment",
    "DOMDocument::createElement" => "Create new element node",
    "DOMDocument::createElementNS" => "Create new element node with an associated namespace",
    "DOMDocument::createEntityReference" => "Create new entity reference node",
    "DOMDocument::createProcessingInstruction" => "Creates new PI node",
    "DOMDocument::createTextNode" => "Create new text node",
    "DOMDocument::getElementById" => "Searches for an element with a certain id",
    "DOMDocument::getElementsByTagName" => "Searches for all elements with given local tag name",
    "DOMDocument::getElementsByTagNameNS" => "Searches for all elements with given tag name in specified namespace",
    "DOMDocument::importNode" => "Import node into current document",
    "DOMDocument::load" => "Load XML from a file",
    "DOMDocument::loadHTML" => "Load HTML from a string",
    "DOMDocument::loadHTMLFile" => "Load HTML from a file",
    "DOMDocument::loadXML" => "Load XML from a string",
    "DOMDocument::normalizeDocument" => "Normalizes the document",
    "DOMDocument::registerNodeClass" => "Register extended class used to create base node type",
    "DOMDocument::relaxNGValidate" => "Performs relaxNG validation on the document",
    "DOMDocument::relaxNGValidateSource" => "Performs relaxNG validation on the document",
    "DOMDocument::save" => "Dumps the internal XML tree back into a file",
    "DOMDocument::saveHTML" => "Dumps the internal document into a string using HTML formatting",
    "DOMDocument::saveHTMLFile" => "Dumps the internal document into a file using HTML formatting",
    "DOMDocument::saveXML" => "Dumps the internal XML tree back into a string",
    "DOMDocument::schemaValidate" => "Validates a document based on a schema",
    "DOMDocument::schemaValidateSource" => "Validates a document based on a schema",
    "DOMDocument::validate" => "Validates the document based on its DTD",
    "DOMDocument::xinclude" => "Substitutes XIncludes in a DOMDocument Object",
    "DOMDocument::__construct" => "Creates a new DOMDocument object",
    "DOMDocumentFragment::appendXML" => "Append raw XML data",
    "DOMElement::getAttribute" => "Returns value of attribute",
    "DOMElement::getAttributeNode" => "Returns attribute node",
    "DOMElement::getAttributeNodeNS" => "Returns attribute node",
    "DOMElement::getAttributeNS" => "Returns value of attribute",
    "DOMElement::getElementsByTagName" => "Gets elements by tagname",
    "DOMElement::getElementsByTagNameNS" => "Get elements by namespaceURI and localName",
    "DOMElement::hasAttribute" => "Checks to see if attribute exists",
    "DOMElement::hasAttributeNS" => "Checks to see if attribute exists",
    "DOMElement::removeAttribute" => "Removes attribute",
    "DOMElement::removeAttributeNode" => "Removes attribute",
    "DOMElement::removeAttributeNS" => "Removes attribute",
    "DOMElement::setAttribute" => "Adds new attribute",
    "DOMElement::setAttributeNode" => "Adds new attribute node to element",
    "DOMElement::setAttributeNodeNS" => "Adds new attribute node to element",
    "DOMElement::setAttributeNS" => "Adds new attribute",
    "DOMElement::setIdAttribute" => "Declares the attribute specified by name to be of type ID",
    "DOMElement::setIdAttributeNode" => "Declares the attribute specified by node to be of type ID",
    "DOMElement::setIdAttributeNS" => "Declares the attribute specified by local name and namespace URI to be of type ID",
    "DOMElement::__construct" => "Creates a new DOMElement object",
    "DOMEntityReference::__construct" => "Creates a new DOMEntityReference object",
    "DOMImplementation::createDocument" => "Creates a DOMDocument object of the specified type with its document element",
    "DOMImplementation::createDocumentType" => "Creates an empty DOMDocumentType object",
    "DOMImplementation::hasFeature" => "Test if the DOM implementation implements a specific feature",
    "DOMImplementation::__construct" => "Creates a new DOMImplementation object",
    "DOMNamedNodeMap::getNamedItem" => "Retrieves a node specified by name",
    "DOMNamedNodeMap::getNamedItemNS" => "Retrieves a node specified by local name and namespace URI",
    "DOMNamedNodeMap::item" => "Retrieves a node specified by index",
    "DOMNode::appendChild" => "Adds new child at the end of the children",
    "DOMNode::cloneNode" => "Clones a node",
    "DOMNode::getLineNo" => "Get line number for a node",
    "DOMNode::getNodePath" => "Get an XPath for a node",
    "DOMNode::hasAttributes" => "Checks if node has attributes",
    "DOMNode::hasChildNodes" => "Checks if node has children",
    "DOMNode::insertBefore" => "Adds a new child before a reference node",
    "DOMNode::isDefaultNamespace" => "Checks if the specified namespaceURI is the default namespace or not",
    "DOMNode::isSameNode" => "Indicates if two nodes are the same node",
    "DOMNode::isSupported" => "Checks if feature is supported for specified version",
    "DOMNode::lookupNamespaceUri" => "Gets the namespace URI of the node based on the prefix",
    "DOMNode::lookupPrefix" => "Gets the namespace prefix of the node based on the namespace URI",
    "DOMNode::normalize" => "Normalizes the node",
    "DOMNode::removeChild" => "Removes child from list of children",
    "DOMNode::replaceChild" => "Replaces a child",
    "DOMNodeList::count" => "Get number of nodes in the list",
    "DOMNodeList::item" => "Retrieves a node specified by index",
    "DOMProcessingInstruction::__construct" => "Creates a new DOMProcessingInstruction object",
    "DOMText::isElementContentWhitespace" => "Returns whether this text node contains whitespace in element content",
    "DOMText::isWhitespaceInElementContent" => "Indicates whether this text node contains whitespace",
    "DOMText::splitText" => "Breaks this node into two nodes at the specified offset",
    "DOMText::__construct" => "Creates a new DOMText object",
    "DOMXPath::evaluate" => "Evaluates the given XPath expression and returns a typed result if possible",
    "DOMXPath::query" => "Evaluates the given XPath expression",
    "DOMXPath::registerNamespace" => "Registers the namespace with the DOMXPath object",
    "DOMXPath::registerPhpFunctions" => "Register PHP functions as XPath functions",
    "DOMXPath::__construct" => "Creates a new DOMXPath object",
    "doubleval" => "Alias of floatval",
    "each" => "Return the current key and value pair from an array and advance the array cursor",
    "echo" => "Output one or more strings",
    "empty" => "Determine whether a variable is empty",
    "EmptyIterator::current" => "The current() method",
    "EmptyIterator::key" => "The key() method",
    "EmptyIterator::next" => "The next() method",
    "EmptyIterator::rewind" => "The rewind() method",
    "EmptyIterator::valid" => "The valid() method",
    "end" => "Set the internal pointer of an array to its last element",
    "ereg" => "Regular expression match",
    "eregi" => "Case insensitive regular expression match",
    "Error::getCode" => "Gets the error code",
    "Error::getFile" => "Gets the file in which the error occurred",
    "Error::getLine" => "Gets the line in which the error occurred",
    "Error::getMessage" => "Gets the error message",
    "Error::getPrevious" => "Returns previous Throwable",
    "Error::getTrace" => "Gets the stack trace",
    "Error::getTraceAsString" => "Gets the stack trace as a string",
    "Error::__clone" => "Clone the error",
    "Error::__construct" => "Construct the error object",
    "Error::__toString" => "String representation of the error",
    "ErrorException::getSeverity" => "Gets the exception severity",
    "ErrorException::__construct" => "Constructs the exception",
    "escapeshellarg" => "Escape a string to be used as a shell argument",
    "escapeshellcmd" => "Escape shell metacharacters",
    "Ev::backend" => "Returns an integer describing the backend used by libev",
    "Ev::depth" => "Returns recursion depth",
    "Ev::embeddableBackends" => "Returns the set of backends that are embeddable in other event loops",
    "Ev::feedSignal" => "Feed a signal event info Ev",
    "Ev::feedSignalEvent" => "Feed signal event into the default loop",
    "Ev::resume" => "Resume previously suspended default event loop",
    "Ev::sleep" => "Block the process for the given number of seconds",
    "Ev::stop" => "Stops the default event loop",
    "Ev::suspend" => "Suspend the default event loop",
    "Ev::time" => "Returns the current time in fractional seconds since the epoch",
    "Ev::verify" => "Performs internal consistency checks(for debugging)",
    "eval" => "Evaluate a string as PHP code",
    "EvCheck::createStopped" => "Create instance of a stopped EvCheck watcher",
    "EvCheck::__construct" => "Constructs the EvCheck watcher object",
    "EvChild::createStopped" => "Create instance of a stopped EvCheck watcher",
    "EvChild::set" => "Configures the watcher",
    "EvChild::__construct" => "Constructs the EvChild watcher object",
    "EvEmbed::createStopped" => "Create stopped EvEmbed watcher object",
    "EvEmbed::set" => "Configures the watcher",
    "EvEmbed::sweep" => "Make a single, non-blocking sweep over the embedded loop",
    "EvEmbed::__construct" => "Constructs the EvEmbed object",
    "Event::add" => "Makes event pending",
    "Event::addSignal" => "Makes signal event pending",
    "Event::addTimer" => "Makes timer event pending",
    "Event::del" => "Makes event non-pending",
    "Event::delSignal" => "Makes signal event non-pending",
    "Event::delTimer" => "Makes timer event non-pending",
    "Event::getSupportedMethods" => "Returns array with of the names of the methods supported in this version of Libevent",
    "Event::pending" => "Detects whether event is pending or scheduled",
    "Event::set" => "Re-configures event",
    "Event::setPriority" => "Set event priority",
    "Event::setTimer" => "Re-configures timer event",
    "Event::signal" => "Constructs signal event object",
    "Event::timer" => "Constructs timer event object",
    "Event::__construct" => "Constructs Event object",
    "EventBase::dispatch" => "Dispatch pending events",
    "EventBase::exit" => "Stop dispatching events",
    "EventBase::free" => "Free resources allocated for this event base",
    "EventBase::getFeatures" => "Returns bitmask of features supported",
    "EventBase::getMethod" => "Returns event method in use",
    "EventBase::getTimeOfDayCached" => "Returns the current event base time",
    "EventBase::gotExit" => "Checks if the event loop was told to exit",
    "EventBase::gotStop" => "Checks if the event loop was told to exit",
    "EventBase::loop" => "Dispatch pending events",
    "EventBase::priorityInit" => "Sets number of priorities per event base",
    "EventBase::reInit" => "Re-initialize event base(after a fork)",
    "EventBase::stop" => "Tells event_base to stop dispatching events",
    "EventBase::__construct" => "Constructs EventBase object",
    "EventBuffer::add" => "Append data to the end of an event buffer",
    "EventBuffer::addBuffer" => "Move all data from a buffer provided to the current instance of EventBuffer",
    "EventBuffer::copyout" => "Copies out specified number of bytes from the front of the buffer",
    "EventBuffer::enableLocking" => "Description",
    "EventBuffer::expand" => "Reserves space in buffer",
    "EventBuffer::freeze" => "Prevent calls that modify an event buffer from succeeding",
    "EventBuffer::lock" => "Acquires a lock on buffer",
    "EventBuffer::prepend" => "Prepend data to the front of the buffer",
    "EventBuffer::prependBuffer" => "Moves all data from source buffer to the front of current buffer",
    "EventBuffer::read" => "Read data from an evbuffer and drain the bytes read",
    "EventBuffer::readFrom" => "Read data from a file onto the end of the buffer",
    "EventBuffer::readLine" => "Extracts a line from the front of the buffer",
    "EventBuffer::search" => "Scans the buffer for an occurrence of a string",
    "EventBuffer::searchEol" => "Scans the buffer for an occurrence of an end of line",
    "EventBuffer::substr" => "Substracts a portion of the buffer data",
    "EventBuffer::unfreeze" => "Re-enable calls that modify an event buffer",
    "EventBuffer::unlock" => "Releases lock acquired by EventBuffer::lock",
    "EventBuffer::write" => "Write contents of the buffer to a file or socket",
    "EventBuffer::__construct" => "Constructs EventBuffer object",
    "EventBufferEvent::close" => "Closes file descriptor associated with the current buffer event",
    "EventBufferEvent::connectHost" => "Connects to a hostname with optionally asyncronous DNS resolving",
    "EventBufferEvent::createPair" => "Creates two buffer events connected to each other",
    "EventBufferEvent::disable" => "Disable events read, write, or both on a buffer event",
    "EventBufferEvent::enable" => "Enable events read, write, or both on a buffer event",
    "EventBufferEvent::free" => "Free a buffer event",
    "EventBufferEvent::getDnsErrorString" => "Returns string describing the last failed DNS lookup attempt",
    "EventBufferEvent::getEnabled" => "Returns bitmask of events currently enabled on the buffer event",
    "EventBufferEvent::read" => "Read buffer's data",
    "EventBufferEvent::readBuffer" => "Drains the entire contents of the input buffer and places them into buf",
    "EventBufferEvent::setCallbacks" => "Assigns read, write and event(status) callbacks",
    "EventBufferEvent::setPriority" => "Assign a priority to a bufferevent",
    "EventBufferEvent::setTimeouts" => "Set the read and write timeout for a buffer event",
    "EventBufferEvent::setWatermark" => "Adjusts read and/or write watermarks",
    "EventBufferEvent::sslError" => "Returns most recent OpenSSL error reported on the buffer event",
    "EventBufferEvent::sslFilter" => "Create a new SSL buffer event to send its data over another buffer event",
    "EventBufferEvent::sslGetCipherInfo" => "Returns a textual description of the cipher",
    "EventBufferEvent::sslGetCipherName" => "Returns the current cipher name of the SSL connection",
    "EventBufferEvent::sslGetCipherVersion" => "Returns version of cipher used by current SSL connection",
    "EventBufferEvent::sslGetProtocol" => "Returns the name of the protocol used for current SSL connection",
    "EventBufferEvent::sslRenegotiate" => "Tells a bufferevent to begin SSL renegotiation",
    "EventBufferEvent::sslSocket" => "Creates a new SSL buffer event to send its data over an SSL on a socket",
    "EventBufferEvent::write" => "Adds data to a buffer event's output buffer",
    "EventBufferEvent::__construct" => "Constructs EventBufferEvent object",
    "EventConfig::avoidMethod" => "Tells libevent to avoid specific event method",
    "EventConfig::requireFeatures" => "Enters a required event method feature that the application demands",
    "EventConfig::setMaxDispatchInterval" => "Prevents priority inversion",
    "EventConfig::__construct" => "Constructs EventConfig object",
    "EventDnsBase::addNameserverIp" => "Adds a nameserver to the DNS base",
    "EventDnsBase::addSearch" => "Adds a domain to the list of search domains",
    "EventDnsBase::clearSearch" => "Removes all current search suffixes",
    "EventDnsBase::countNameservers" => "Gets the number of configured nameservers",
    "EventDnsBase::loadHosts" => "Loads a hosts file (in the same format as /etc/hosts) from hosts file",
    "EventDnsBase::parseResolvConf" => "Scans the resolv.conf-formatted file",
    "EventDnsBase::setOption" => "Set the value of a configuration option",
    "EventDnsBase::setSearchNdots" => "Set the 'ndots' parameter for searches",
    "EventDnsBase::__construct" => "Constructs EventDnsBase object",
    "EventHttp::accept" => "Makes an HTTP server accept connections on the specified socket stream or resource",
    "EventHttp::addServerAlias" => "Adds a server alias to the HTTP server object",
    "EventHttp::bind" => "Binds an HTTP server on the specified address and port",
    "EventHttp::removeServerAlias" => "Removes server alias",
    "EventHttp::setAllowedMethods" => "Sets the what HTTP methods are supported in requests accepted by this server, and passed to user callbacks",
    "EventHttp::setCallback" => "Sets a callback for specified URI",
    "EventHttp::setDefaultCallback" => "Sets default callback to handle requests that are not caught by specific callbacks",
    "EventHttp::setMaxBodySize" => "Sets maximum request body size",
    "EventHttp::setMaxHeadersSize" => "Sets maximum HTTP header size",
    "EventHttp::setTimeout" => "Sets the timeout for an HTTP request",
    "EventHttp::__construct" => "Constructs EventHttp object(the HTTP server)",
    "EventHttpConnection::getBase" => "Returns event base associated with the connection",
    "EventHttpConnection::getPeer" => "Gets the remote address and port associated with the connection",
    "EventHttpConnection::makeRequest" => "Makes an HTTP request over the specified connection",
    "EventHttpConnection::setCloseCallback" => "Set callback for connection close",
    "EventHttpConnection::setLocalAddress" => "Sets the IP address from which HTTP connections are made",
    "EventHttpConnection::setLocalPort" => "Sets the local port from which connections are made",
    "EventHttpConnection::setMaxBodySize" => "Sets maximum body size for the connection",
    "EventHttpConnection::setMaxHeadersSize" => "Sets maximum header size",
    "EventHttpConnection::setRetries" => "Sets the retry limit for the connection",
    "EventHttpConnection::setTimeout" => "Sets the timeout for the connection",
    "EventHttpConnection::__construct" => "Constructs EventHttpConnection object",
    "EventHttpRequest::addHeader" => "Adds an HTTP header to the headers of the request",
    "EventHttpRequest::cancel" => "Cancels a pending HTTP request",
    "EventHttpRequest::clearHeaders" => "Removes all output headers from the header list of the request",
    "EventHttpRequest::closeConnection" => "Closes associated HTTP connection",
    "EventHttpRequest::findHeader" => "Finds the value belonging a header",
    "EventHttpRequest::free" => "Frees the object and removes associated events",
    "EventHttpRequest::getBufferEvent" => "Returns EventBufferEvent object",
    "EventHttpRequest::getCommand" => "Returns the request command(method)",
    "EventHttpRequest::getConnection" => "Returns EventHttpConnection object",
    "EventHttpRequest::getHost" => "Returns the request host",
    "EventHttpRequest::getInputBuffer" => "Returns the input buffer",
    "EventHttpRequest::getInputHeaders" => "Returns associative array of the input headers",
    "EventHttpRequest::getOutputBuffer" => "Returns the output buffer of the request",
    "EventHttpRequest::getOutputHeaders" => "Returns associative array of the output headers",
    "EventHttpRequest::getResponseCode" => "Returns the response code",
    "EventHttpRequest::getUri" => "Returns the request URI",
    "EventHttpRequest::removeHeader" => "Removes an HTTP header from the headers of the request",
    "EventHttpRequest::sendError" => "Send an HTML error message to the client",
    "EventHttpRequest::sendReply" => "Send an HTML reply to the client",
    "EventHttpRequest::sendReplyChunk" => "Send another data chunk as part of an ongoing chunked reply",
    "EventHttpRequest::sendReplyEnd" => "Complete a chunked reply, freeing the request as appropriate",
    "EventHttpRequest::sendReplyStart" => "Initiate a chunked reply",
    "EventHttpRequest::__construct" => "Constructs EventHttpRequest object",
    "EventListener::disable" => "Disables an event connect listener object",
    "EventListener::enable" => "Enables an event connect listener object",
    "EventListener::getBase" => "Returns event base associated with the event listener",
    "EventListener::setCallback" => "The setCallback purpose",
    "EventListener::setErrorCallback" => "Set event listener's error callback",
    "EventListener::__construct" => "Creates new connection listener associated with an event base",
    "EventSslContext::__construct" => "Constructs an OpenSSL context for use with Event classes",
    "EventUtil::getLastSocketErrno" => "Returns the most recent socket error number",
    "EventUtil::getLastSocketError" => "Returns the most recent socket error",
    "EventUtil::getSocketFd" => "Returns numeric file descriptor of a socket, or stream",
    "EventUtil::setSocketOption" => "Sets socket options",
    "EventUtil::sslRandPoll" => "Generates entropy by means of OpenSSL's RAND_poll()",
    "EventUtil::__construct" => "The abstract constructor",
    "EvFork::createStopped" => "Creates a stopped instance of EvFork watcher class",
    "EvFork::__construct" => "Constructs the EvFork watcher object",
    "EvIdle::createStopped" => "Creates instance of a stopped EvIdle watcher object",
    "EvIdle::__construct" => "Constructs the EvIdle watcher object",
    "EvIo::createStopped" => "Create stopped EvIo watcher object",
    "EvIo::set" => "Configures the watcher",
    "EvIo::__construct" => "Constructs EvIo watcher object",
    "EvLoop::backend" => "Returns an integer describing the backend used by libev",
    "EvLoop::child" => "Creates EvChild object associated with the current event loop",
    "EvLoop::defaultLoop" => "Returns or creates the default event loop",
    "EvLoop::invokePending" => "Invoke all pending watchers while resetting their pending state",
    "EvLoop::loopFork" => "Must be called after a fork",
    "EvLoop::now" => "Returns the current &quot;event loop time&quot;",
    "EvLoop::resume" => "Resume previously suspended default event loop",
    "EvLoop::run" => "Begin checking for events and calling callbacks for the loop",
    "EvLoop::stop" => "Stops the event loop",
    "EvLoop::suspend" => "Suspend the loop",
    "EvLoop::verify" => "Performs internal consistency checks(for debugging)",
    "EvLoop::__construct" => "Constructs the event loop object",
    "EvPeriodic::again" => "Simply stops and restarts the periodic watcher again",
    "EvPeriodic::createStopped" => "Create a stopped EvPeriodic watcher",
    "EvPeriodic::set" => "Configures the watcher",
    "EvPeriodic::__construct" => "Constructs EvPeriodic watcher object",
    "EvPrepare::createStopped" => "Creates a stopped instance of EvPrepare watcher",
    "EvPrepare::__construct" => "Constructs EvPrepare watcher object",
    "EvSignal::createStopped" => "Create stopped EvSignal watcher object",
    "EvSignal::set" => "Configures the watcher",
    "EvSignal::__construct" => "Constructs EvSignal watcher object",
    "EvStat::attr" => "Returns the values most recently detected by Ev",
    "EvStat::createStopped" => "Create a stopped EvStat watcher object",
    "EvStat::prev" => "Returns the previous set of values returned by EvStat::attr",
    "EvStat::set" => "Configures the watcher",
    "EvStat::stat" => "Initiates the stat call",
    "EvStat::__construct" => "Constructs EvStat watcher object",
    "EvTimer::again" => "Restarts the timer watcher",
    "EvTimer::createStopped" => "Creates EvTimer stopped watcher object",
    "EvTimer::set" => "Configures the watcher",
    "EvTimer::__construct" => "Constructs an EvTimer watcher object",
    "EvWatcher::clear" => "Clear watcher pending status",
    "EvWatcher::feed" => "Feeds the given revents set into the event loop",
    "EvWatcher::getLoop" => "Returns the loop responsible for the watcher",
    "EvWatcher::keepalive" => "Configures whether to keep the loop from returning",
    "EvWatcher::setCallback" => "Sets new callback for the watcher",
    "EvWatcher::start" => "Starts the watcher",
    "EvWatcher::stop" => "Stops the watcher",
    "EvWatcher::__construct" => "Abstract constructor of a watcher object",
    "Exception::getCode" => "Gets the Exception code",
    "Exception::getFile" => "Gets the file in which the exception was created",
    "Exception::getLine" => "Gets the line in which the exception was created",
    "Exception::getMessage" => "Gets the Exception message",
    "Exception::getPrevious" => "Returns previous Exception",
    "Exception::getTrace" => "Gets the stack trace",
    "Exception::getTraceAsString" => "Gets the stack trace as a string",
    "Exception::__clone" => "Clone the exception",
    "Exception::__construct" => "Construct the exception",
    "Exception::__toString" => "String representation of the exception",
    "exec" => "Execute an external program",
    "exit" => "Output a message and terminate the current script",
    "exp" => "Calculates the exponent of e",
    "expect:" => "Process Interaction Streams",
    "explode" => "Split a string by a string",
    "extract" => "Import variables into the current symbol table from an array",
    "FANNConnection::getFromNeuron" => "Returns the postions of starting neuron",
    "FANNConnection::getToNeuron" => "Returns the postions of terminating neuron",
    "FANNConnection::getWeight" => "Returns the connection weight",
    "FANNConnection::setWeight" => "Sets the connections weight",
    "FANNConnection::__construct" => "The connection constructor",
    "fclose" => "Closes an open file pointer",
    "feof" => "Tests for end-of-file on a file pointer",
    "fflush" => "Flushes the output to a file",
    "fgetc" => "Gets character from file pointer",
    "fgetcsv" => "Gets line from file pointer and parse for CSV fields",
    "fgets" => "Gets line from file pointer",
    "fgetss" => "Gets line from file pointer and strip HTML tags",
    "file" => "Reads entire file into an array",
    "file:" => "Accessing local filesystem",
    "fileatime" => "Gets last access time of file",
    "filectime" => "Gets inode change time of file",
    "filegroup" => "Gets file group",
    "fileinode" => "Gets file inode",
    "filemtime" => "Gets file modification time",
    "fileowner" => "Gets file owner",
    "fileperms" => "Gets file permissions",
    "filepro" => "Read and verify the map file",
    "filesize" => "Gets file size",
    "FilesystemIterator::current" => "The current file",
    "FilesystemIterator::getFlags" => "Get the handling flags",
    "FilesystemIterator::key" => "Retrieve the key for the current file",
    "FilesystemIterator::next" => "Move to the next file",
    "FilesystemIterator::rewind" => "Rewinds back to the beginning",
    "FilesystemIterator::setFlags" => "Sets handling flags",
    "FilesystemIterator::__construct" => "Constructs a new filesystem iterator",
    "filetype" => "Gets file type",
    "FilterIterator::accept" => "Check whether the current element of the iterator is acceptable",
    "FilterIterator::current" => "Get the current element value",
    "FilterIterator::getInnerIterator" => "Get the inner iterator",
    "FilterIterator::key" => "Get the current key",
    "FilterIterator::next" => "Move the iterator forward",
    "FilterIterator::rewind" => "Rewind the iterator",
    "FilterIterator::valid" => "Check whether the current element is valid",
    "FilterIterator::__construct" => "Construct a filterIterator",
    "finfo::buffer" => "Alias of finfo_buffer()",
    "finfo::file" => "Alias of finfo_file()",
    "finfo::__construct" => "Alias of finfo_open",
    "floatval" => "Get float value of a variable",
    "flock" => "Portable advisory file locking",
    "floor" => "Round fractions down",
    "flush" => "Flush system output buffer",
    "fnmatch" => "Match filename against a pattern",
    "fopen" => "Opens file or URL",
    "fpassthru" => "Output all remaining data on a file pointer",
    "fprintf" => "Write a formatted string to a stream",
    "fputcsv" => "Format line as CSV and write to file pointer",
    "fputs" => "Alias of fwrite",
    "fread" => "Binary-safe file read",
    "frenchtojd" => "Converts a date from the French Republican Calendar to a Julian Day Count",
    "fscanf" => "Parses input from a file according to a format",
    "fseek" => "Seeks on a file pointer",
    "fsockopen" => "Open Internet or Unix domain socket connection",
    "fstat" => "Gets information about a file using an open file pointer",
    "ftell" => "Returns the current position of the file read/write pointer",
    "ftok" => "Convert a pathname and a project identifier to a System V IPC key",
    "ftp:" => "Accessing FTP(s) URLs",
    "FTP" => "FTP context option listing",
    "ftruncate" => "Truncates a file to a given length",
    "fwrite" => "Binary-safe file write",
    "GearmanClient::addOptions" => "Add client options",
    "GearmanClient::addServer" => "Add a job server to the client",
    "GearmanClient::addServers" => "Add a list of job servers to the client",
    "GearmanClient::addTask" => "Add a task to be run in parallel",
    "GearmanClient::addTaskBackground" => "Add a background task to be run in parallel",
    "GearmanClient::addTaskHigh" => "Add a high priority task to run in parallel",
    "GearmanClient::addTaskHighBackground" => "Add a high priority background task to be run in parallel",
    "GearmanClient::addTaskLow" => "Add a low priority task to run in parallel",
    "GearmanClient::addTaskLowBackground" => "Add a low priority background task to be run in parallel",
    "GearmanClient::addTaskStatus" => "Add a task to get status",
    "GearmanClient::clearCallbacks" => "Clear all task callback functions",
    "GearmanClient::clone" => "Create a copy of a GearmanClient object",
    "GearmanClient::context" => "Get the application context",
    "GearmanClient::data" => "Get the application data (deprecated)",
    "GearmanClient::do" => "Run a single task and return a result [deprecated]",
    "GearmanClient::doBackground" => "Run a task in the background",
    "GearmanClient::doHigh" => "Run a single high priority task",
    "GearmanClient::doHighBackground" => "Run a high priority task in the background",
    "GearmanClient::doJobHandle" => "Get the job handle for the running task",
    "GearmanClient::doLow" => "Run a single low priority task",
    "GearmanClient::doLowBackground" => "Run a low priority task in the background",
    "GearmanClient::doNormal" => "Run a single task and return a result",
    "GearmanClient::doStatus" => "Get the status for the running task",
    "GearmanClient::echo" => "Send data to all job servers to see if they echo it back [deprecated]",
    "GearmanClient::error" => "Returns an error string for the last error encountered",
    "GearmanClient::getErrno" => "Get an errno value",
    "GearmanClient::jobStatus" => "Get the status of a background job",
    "GearmanClient::ping" => "Send data to all job servers to see if they echo it back",
    "GearmanClient::removeOptions" => "Remove client options",
    "GearmanClient::returnCode" => "Get the last Gearman return code",
    "GearmanClient::runTasks" => "Run a list of tasks in parallel",
    "GearmanClient::setClientCallback" => "Callback function when there is a data packet for a task (deprecated)",
    "GearmanClient::setCompleteCallback" => "Set a function to be called on task completion",
    "GearmanClient::setContext" => "Set application context",
    "GearmanClient::setCreatedCallback" => "Set a callback for when a task is queued",
    "GearmanClient::setData" => "Set application data (deprecated)",
    "GearmanClient::setDataCallback" => "Callback function when there is a data packet for a task",
    "GearmanClient::setExceptionCallback" => "Set a callback for worker exceptions",
    "GearmanClient::setFailCallback" => "Set callback for job failure",
    "GearmanClient::setOptions" => "Set client options",
    "GearmanClient::setStatusCallback" => "Set a callback for collecting task status",
    "GearmanClient::setTimeout" => "Set socket I/O activity timeout",
    "GearmanClient::setWarningCallback" => "Set a callback for worker warnings",
    "GearmanClient::setWorkloadCallback" => "Set a callback for accepting incremental data updates",
    "GearmanClient::timeout" => "Get current socket I/O activity timeout value",
    "GearmanClient::__construct" => "Create a GearmanClient instance",
    "GearmanJob::complete" => "Send the result and complete status (deprecated)",
    "GearmanJob::data" => "Send data for a running job (deprecated)",
    "GearmanJob::exception" => "Send exception for running job (deprecated)",
    "GearmanJob::fail" => "Send fail status (deprecated)",
    "GearmanJob::functionName" => "Get function name",
    "GearmanJob::handle" => "Get the job handle",
    "GearmanJob::returnCode" => "Get last return code",
    "GearmanJob::sendComplete" => "Send the result and complete status",
    "GearmanJob::sendData" => "Send data for a running job",
    "GearmanJob::sendException" => "Send exception for running job (exception)",
    "GearmanJob::sendFail" => "Send fail status",
    "GearmanJob::sendStatus" => "Send status",
    "GearmanJob::sendWarning" => "Send a warning",
    "GearmanJob::setReturn" => "Set a return value",
    "GearmanJob::status" => "Send status (deprecated)",
    "GearmanJob::unique" => "Get the unique identifier",
    "GearmanJob::warning" => "Send a warning (deprecated)",
    "GearmanJob::workload" => "Get workload",
    "GearmanJob::workloadSize" => "Get size of work load",
    "GearmanJob::__construct" => "Create a GearmanJob instance",
    "GearmanTask::create" => "Create a task (deprecated)",
    "GearmanTask::data" => "Get data returned for a task",
    "GearmanTask::dataSize" => "Get the size of returned data",
    "GearmanTask::function" => "Get associated function name (deprecated)",
    "GearmanTask::functionName" => "Get associated function name",
    "GearmanTask::isKnown" => "Determine if task is known",
    "GearmanTask::isRunning" => "Test whether the task is currently running",
    "GearmanTask::jobHandle" => "Get the job handle",
    "GearmanTask::recvData" => "Read work or result data into a buffer for a task",
    "GearmanTask::returnCode" => "Get the last return code",
    "GearmanTask::sendData" => "Send data for a task (deprecated)",
    "GearmanTask::sendWorkload" => "Send data for a task",
    "GearmanTask::taskDenominator" => "Get completion percentage denominator",
    "GearmanTask::taskNumerator" => "Get completion percentage numerator",
    "GearmanTask::unique" => "Get the unique identifier for a task",
    "GearmanTask::uuid" => "Get the unique identifier for a task (deprecated)",
    "GearmanTask::__construct" => "Create a GearmanTask instance",
    "GearmanWorker::addFunction" => "Register and add callback function",
    "GearmanWorker::addOptions" => "Add worker options",
    "GearmanWorker::addServer" => "Add a job server",
    "GearmanWorker::addServers" => "Add job servers",
    "GearmanWorker::clone" => "Create a copy of the worker",
    "GearmanWorker::echo" => "Test job server response",
    "GearmanWorker::error" => "Get the last error encountered",
    "GearmanWorker::getErrno" => "Get errno",
    "GearmanWorker::options" => "Get worker options",
    "GearmanWorker::register" => "Register a function with the job server",
    "GearmanWorker::removeOptions" => "Remove worker options",
    "GearmanWorker::returnCode" => "Get last Gearman return code",
    "GearmanWorker::setId" => "Give the worker an identifier so it can be tracked when asking gearmand for the list of available workers",
    "GearmanWorker::setOptions" => "Set worker options",
    "GearmanWorker::setTimeout" => "Set socket I/O activity timeout",
    "GearmanWorker::timeout" => "Get socket I/O activity timeout",
    "GearmanWorker::unregister" => "Unregister a function name with the job servers",
    "GearmanWorker::unregisterAll" => "Unregister all function names with the job servers",
    "GearmanWorker::wait" => "Wait for activity from one of the job servers",
    "GearmanWorker::work" => "Wait for and perform jobs",
    "GearmanWorker::__construct" => "Create a GearmanWorker instance",
    "Generator::current" => "Get the yielded value",
    "Generator::getReturn" => "Get the return value of a generator",
    "Generator::key" => "Get the yielded key",
    "Generator::next" => "Resume execution of the generator",
    "Generator::rewind" => "Rewind the iterator",
    "Generator::send" => "Send a value to the generator",
    "Generator::throw" => "Throw an exception into the generator",
    "Generator::valid" => "Check if the iterator has been closed",
    "Generator::__wakeup" => "Serialize callback",
    "getallheaders" => "Fetch all HTTP request headers",
    "getcwd" => "Gets the current working directory",
    "getdate" => "Get date/time information",
    "getenv" => "Gets the value of an environment variable",
    "gethostbyaddr" => "Get the Internet host name corresponding to a given IP address",
    "gethostbyname" => "Get the IPv4 address corresponding to a given Internet host name",
    "gethostname" => "Gets the host name",
    "getimagesize" => "Get the size of an image",
    "getimagesizefromstring" => "Get the size of an image from a string",
    "getlastmod" => "Gets time of last page modification",
    "getmxrr" => "Get MX records corresponding to a given Internet host name",
    "getmygid" => "Get PHP script owner's GID",
    "getmyinode" => "Gets the inode of the current script",
    "getmypid" => "Gets PHP's process ID",
    "getmyuid" => "Gets PHP script owner's UID",
    "getopt" => "Gets options from the command line argument list",
    "getprotobyname" => "Get protocol number associated with protocol name",
    "getprotobynumber" => "Get protocol name associated with protocol number",
    "getrandmax" => "Show largest possible random value",
    "getrusage" => "Gets the current resource usages",
    "getservbyname" => "Get port number associated with an Internet service and protocol",
    "getservbyport" => "Get Internet service which corresponds to port and protocol",
    "gettext" => "Lookup a message in the current domain",
    "gettimeofday" => "Get current time",
    "gettype" => "Get the type of a variable",
    "glob" => "Find pathnames matching a pattern",
    "glob:" => "Find pathnames matching pattern",
    "GlobIterator::count" => "Get the number of directories and files",
    "GlobIterator::__construct" => "Construct a directory using glob",
    "Gmagick::addimage" => "Adds new image to Gmagick object image list",
    "Gmagick::addnoiseimage" => "Adds random noise to the image",
    "Gmagick::annotateimage" => "Annotates an image with text",
    "Gmagick::blurimage" => "Adds blur filter to image",
    "Gmagick::borderimage" => "Surrounds the image with a border",
    "Gmagick::charcoalimage" => "Simulates a charcoal drawing",
    "Gmagick::chopimage" => "Removes a region of an image and trims",
    "Gmagick::clear" => "Clears all resources associated to Gmagick object",
    "Gmagick::commentimage" => "Adds a comment to your image",
    "Gmagick::compositeimage" => "Composite one image onto another",
    "Gmagick::cropimage" => "Extracts a region of the image",
    "Gmagick::cropthumbnailimage" => "Creates a crop thumbnail",
    "Gmagick::current" => "The current purpose",
    "Gmagick::cyclecolormapimage" => "Displaces an image's colormap",
    "Gmagick::deconstructimages" => "Returns certain pixel differences between images",
    "Gmagick::despeckleimage" => "The despeckleimage purpose",
    "Gmagick::destroy" => "The destroy purpose",
    "Gmagick::drawimage" => "Renders the GmagickDraw object on the current image",
    "Gmagick::edgeimage" => "Enhance edges within the image",
    "Gmagick::embossimage" => "Returns a grayscale image with a three-dimensional effect",
    "Gmagick::enhanceimage" => "Improves the quality of a noisy image",
    "Gmagick::equalizeimage" => "Equalizes the image histogram",
    "Gmagick::flipimage" => "Creates a vertical mirror image",
    "Gmagick::flopimage" => "The flopimage purpose",
    "Gmagick::frameimage" => "Adds a simulated three-dimensional border",
    "Gmagick::gammaimage" => "Gamma-corrects an image",
    "Gmagick::getcopyright" => "Returns the GraphicsMagick API copyright as a string",
    "Gmagick::getfilename" => "The filename associated with an image sequence",
    "Gmagick::getimagebackgroundcolor" => "Returns the image background color",
    "Gmagick::getimageblueprimary" => "Returns the chromaticy blue primary point",
    "Gmagick::getimagebordercolor" => "Returns the image border color",
    "Gmagick::getimagechanneldepth" => "Gets the depth for a particular image channel",
    "Gmagick::getimagecolors" => "Returns the color of the specified colormap index",
    "Gmagick::getimagecolorspace" => "Gets the image colorspace",
    "Gmagick::getimagecompose" => "Returns the composite operator associated with the image",
    "Gmagick::getimagedelay" => "Gets the image delay",
    "Gmagick::getimagedepth" => "Gets the depth of the image",
    "Gmagick::getimagedispose" => "Gets the image disposal method",
    "Gmagick::getimageextrema" => "Gets the extrema for the image",
    "Gmagick::getimagefilename" => "Returns the filename of a particular image in a sequence",
    "Gmagick::getimageformat" => "Returns the format of a particular image in a sequence",
    "Gmagick::getimagegamma" => "Gets the image gamma",
    "Gmagick::getimagegreenprimary" => "Returns the chromaticy green primary point",
    "Gmagick::getimageheight" => "Returns the image height",
    "Gmagick::getimagehistogram" => "Gets the image histogram",
    "Gmagick::getimageindex" => "Gets the index of the current active image",
    "Gmagick::getimageinterlacescheme" => "Gets the image interlace scheme",
    "Gmagick::getimageiterations" => "Gets the image iterations",
    "Gmagick::getimagematte" => "Check if the image has a matte channel",
    "Gmagick::getimagemattecolor" => "Returns the image matte color",
    "Gmagick::getimageprofile" => "Returns the named image profile",
    "Gmagick::getimageredprimary" => "Returns the chromaticity red primary point",
    "Gmagick::getimagerenderingintent" => "Gets the image rendering intent",
    "Gmagick::getimageresolution" => "Gets the image X and Y resolution",
    "Gmagick::getimagescene" => "Gets the image scene",
    "Gmagick::getimagesignature" => "Generates an SHA-256 message digest",
    "Gmagick::getimagetype" => "Gets the potential image type",
    "Gmagick::getimageunits" => "Gets the image units of resolution",
    "Gmagick::getimagewhitepoint" => "Returns the chromaticity white point",
    "Gmagick::getimagewidth" => "Returns the width of the image",
    "Gmagick::getpackagename" => "Returns the GraphicsMagick package name",
    "Gmagick::getquantumdepth" => "Returns the Gmagick quantum depth as a string",
    "Gmagick::getreleasedate" => "Returns the GraphicsMagick release date as a string",
    "Gmagick::getsamplingfactors" => "Gets the horizontal and vertical sampling factor",
    "Gmagick::getsize" => "Returns the size associated with the Gmagick object",
    "Gmagick::getversion" => "Returns the GraphicsMagick API version",
    "Gmagick::hasnextimage" => "Checks if the object has more images",
    "Gmagick::haspreviousimage" => "Checks if the object has a previous image",
    "Gmagick::implodeimage" => "Creates a new image as a copy",
    "Gmagick::labelimage" => "Adds a label to an image",
    "Gmagick::levelimage" => "Adjusts the levels of an image",
    "Gmagick::magnifyimage" => "Scales an image proportionally 2x",
    "Gmagick::mapimage" => "Replaces the colors of an image with the closest color from a reference image",
    "Gmagick::medianfilterimage" => "Applies a digital filter",
    "Gmagick::minifyimage" => "Scales an image proportionally to half its size",
    "Gmagick::modulateimage" => "Control the brightness, saturation, and hue",
    "Gmagick::motionblurimage" => "Simulates motion blur",
    "Gmagick::newimage" => "Creates a new image",
    "Gmagick::nextimage" => "Moves to the next image",
    "Gmagick::normalizeimage" => "Enhances the contrast of a color image",
    "Gmagick::oilpaintimage" => "Simulates an oil painting",
    "Gmagick::previousimage" => "Move to the previous image in the object",
    "Gmagick::profileimage" => "Adds or removes a profile from an image",
    "Gmagick::quantizeimage" => "Analyzes the colors within a reference image",
    "Gmagick::quantizeimages" => "The quantizeimages purpose",
    "Gmagick::queryfontmetrics" => "Returns an array representing the font metrics",
    "Gmagick::queryfonts" => "Returns the configured fonts",
    "Gmagick::queryformats" => "Returns formats supported by Gmagick",
    "Gmagick::radialblurimage" => "Radial blurs an image",
    "Gmagick::raiseimage" => "Creates a simulated 3d button-like effect",
    "Gmagick::read" => "Reads image from filename",
    "Gmagick::readimage" => "Reads image from filename",
    "Gmagick::readimageblob" => "Reads image from a binary string",
    "Gmagick::readimagefile" => "The readimagefile purpose",
    "Gmagick::reducenoiseimage" => "Smooths the contours of an image",
    "Gmagick::removeimage" => "Removes an image from the image list",
    "Gmagick::removeimageprofile" => "Removes the named image profile and returns it",
    "Gmagick::resampleimage" => "Resample image to desired resolution",
    "Gmagick::resizeimage" => "Scales an image",
    "Gmagick::rollimage" => "Offsets an image",
    "Gmagick::rotateimage" => "Rotates an image",
    "Gmagick::scaleimage" => "Scales the size of an image",
    "Gmagick::separateimagechannel" => "Separates a channel from the image",
    "Gmagick::setCompressionQuality" => "Sets the object's default compression quality",
    "Gmagick::setfilename" => "Sets the filename before you read or write the image",
    "Gmagick::setimagebackgroundcolor" => "Sets the image background color",
    "Gmagick::setimageblueprimary" => "Sets the image chromaticity blue primary point",
    "Gmagick::setimagebordercolor" => "Sets the image border color",
    "Gmagick::setimagechanneldepth" => "Sets the depth of a particular image channel",
    "Gmagick::setimagecolorspace" => "Sets the image colorspace",
    "Gmagick::setimagecompose" => "Sets the image composite operator",
    "Gmagick::setimagedelay" => "Sets the image delay",
    "Gmagick::setimagedepth" => "Sets the image depth",
    "Gmagick::setimagedispose" => "Sets the image disposal method",
    "Gmagick::setimagefilename" => "Sets the filename of a particular image in a sequence",
    "Gmagick::setimageformat" => "Sets the format of a particular image",
    "Gmagick::setimagegamma" => "Sets the image gamma",
    "Gmagick::setimagegreenprimary" => "Sets the image chromaticity green primary point",
    "Gmagick::setimageindex" => "Set the iterator to the position in the image list specified with the index parameter",
    "Gmagick::setimageinterlacescheme" => "Sets the interlace scheme of the image",
    "Gmagick::setimageiterations" => "Sets the image iterations",
    "Gmagick::setimageprofile" => "Adds a named profile to the Gmagick object",
    "Gmagick::setimageredprimary" => "Sets the image chromaticity red primary point",
    "Gmagick::setimagerenderingintent" => "Sets the image rendering intent",
    "Gmagick::setimageresolution" => "Sets the image resolution",
    "Gmagick::setimagescene" => "Sets the image scene",
    "Gmagick::setimagetype" => "Sets the image type",
    "Gmagick::setimageunits" => "Sets the image units of resolution",
    "Gmagick::setimagewhitepoint" => "Sets the image chromaticity white point",
    "Gmagick::setsamplingfactors" => "Sets the image sampling factors",
    "Gmagick::setsize" => "Sets the size of the Gmagick object",
    "Gmagick::shearimage" => "Creating a parallelogram",
    "Gmagick::solarizeimage" => "Applies a solarizing effect to the image",
    "Gmagick::spreadimage" => "Randomly displaces each pixel in a block",
    "Gmagick::stripimage" => "Strips an image of all profiles and comments",
    "Gmagick::swirlimage" => "Swirls the pixels about the center of the image",
    "Gmagick::thumbnailimage" => "Changes the size of an image",
    "Gmagick::trimimage" => "Remove edges from the image",
    "Gmagick::write" => "Alias of Gmagick::writeimage",
    "Gmagick::writeimage" => "Writes an image to the specified filename",
    "Gmagick::__construct" => "The Gmagick constructor",
    "GmagickDraw::annotate" => "Draws text on the image",
    "GmagickDraw::arc" => "Draws an arc",
    "GmagickDraw::bezier" => "Draws a bezier curve",
    "GmagickDraw::ellipse" => "Draws an ellipse on the image",
    "GmagickDraw::getfillcolor" => "Returns the fill color",
    "GmagickDraw::getfillopacity" => "Returns the opacity used when drawing",
    "GmagickDraw::getfont" => "Returns the font",
    "GmagickDraw::getfontsize" => "Returns the font pointsize",
    "GmagickDraw::getfontstyle" => "Returns the font style",
    "GmagickDraw::getfontweight" => "Returns the font weight",
    "GmagickDraw::getstrokecolor" => "Returns the color used for stroking object outlines",
    "GmagickDraw::getstrokeopacity" => "Returns the opacity of stroked object outlines",
    "GmagickDraw::getstrokewidth" => "Returns the width of the stroke used to draw object outlines",
    "GmagickDraw::gettextdecoration" => "Returns the text decoration",
    "GmagickDraw::gettextencoding" => "Returns the code set used for text annotations",
    "GmagickDraw::line" => "The line purpose",
    "GmagickDraw::point" => "Draws a point",
    "GmagickDraw::polygon" => "Draws a polygon",
    "GmagickDraw::polyline" => "Draws a polyline",
    "GmagickDraw::rectangle" => "Draws a rectangle",
    "GmagickDraw::rotate" => "Applies the specified rotation to the current coordinate space",
    "GmagickDraw::roundrectangle" => "Draws a rounded rectangle",
    "GmagickDraw::scale" => "Adjusts the scaling factor",
    "GmagickDraw::setfillcolor" => "Sets the fill color to be used for drawing filled objects",
    "GmagickDraw::setfillopacity" => "The setfillopacity purpose",
    "GmagickDraw::setfont" => "Sets the fully-specified font to use when annotating with text",
    "GmagickDraw::setfontsize" => "Sets the font pointsize to use when annotating with text",
    "GmagickDraw::setfontstyle" => "Sets the font style to use when annotating with text",
    "GmagickDraw::setfontweight" => "Sets the font weight",
    "GmagickDraw::setstrokecolor" => "Sets the color used for stroking object outlines",
    "GmagickDraw::setstrokeopacity" => "Specifies the opacity of stroked object outlines",
    "GmagickDraw::setstrokewidth" => "Sets the width of the stroke used to draw object outlines",
    "GmagickDraw::settextdecoration" => "Specifies a decoration",
    "GmagickDraw::settextencoding" => "Specifies the text code set",
    "GmagickPixel::getcolor" => "Returns the color",
    "GmagickPixel::getcolorcount" => "Returns the color count associated with this color",
    "GmagickPixel::getcolorvalue" => "Gets the normalized value of the provided color channel",
    "GmagickPixel::setcolor" => "Sets the color",
    "GmagickPixel::setcolorvalue" => "Sets the normalized value of one of the channels",
    "GmagickPixel::__construct" => "The GmagickPixel constructor",
    "gmdate" => "Format a GMT/UTC date/time",
    "gmmktime" => "Get Unix timestamp for a GMT date",
    "gmstrftime" => "Format a GMT/UTC time/date according to locale settings",
    "gregoriantojd" => "Converts a Gregorian date to Julian Day Count",
    "gzclose" => "Close an open gz-file pointer",
    "gzcompress" => "Compress a string",
    "gzdecode" => "Decodes a gzip compressed string",
    "gzdeflate" => "Deflate a string",
    "gzencode" => "Create a gzip compressed string",
    "gzeof" => "Test for EOF on a gz-file pointer",
    "gzfile" => "Read entire gz-file into an array",
    "gzgetc" => "Get character from gz-file pointer",
    "gzgets" => "Get line from file pointer",
    "gzgetss" => "Get line from gz-file pointer and strip HTML tags",
    "gzinflate" => "Inflate a deflated string",
    "gzopen" => "Open gz-file",
    "gzpassthru" => "Output all remaining data on a gz-file pointer",
    "gzputs" => "Alias of gzwrite",
    "gzread" => "Binary-safe gz-file read",
    "gzrewind" => "Rewind the position of a gz-file pointer",
    "gzseek" => "Seek on a gz-file pointer",
    "gztell" => "Tell gz-file pointer read/write position",
    "gzuncompress" => "Uncompress a compressed string",
    "gzwrite" => "Binary-safe gz-file write",
    "HaruAnnotation::setBorderStyle" => "Set the border style of the annotation",
    "HaruAnnotation::setHighlightMode" => "Set the highlighting mode of the annotation",
    "HaruAnnotation::setIcon" => "Set the icon style of the annotation",
    "HaruAnnotation::setOpened" => "Set the initial state of the annotation",
    "HaruDestination::setFit" => "Set the appearance of the page to fit the window",
    "HaruDestination::setFitB" => "Set the appearance of the page to fit the bounding box of the page within the window",
    "HaruDestination::setFitBH" => "Set the appearance of the page to fit the width of the bounding box",
    "HaruDestination::setFitBV" => "Set the appearance of the page to fit the height of the boudning box",
    "HaruDestination::setFitH" => "Set the appearance of the page to fit the window width",
    "HaruDestination::setFitR" => "Set the appearance of the page to fit the specified rectangle",
    "HaruDestination::setFitV" => "Set the appearance of the page to fit the window height",
    "HaruDestination::setXYZ" => "Set the appearance of the page",
    "HaruDoc::addPage" => "Add new page to the document",
    "HaruDoc::addPageLabel" => "Set the numbering style for the specified range of pages",
    "HaruDoc::createOutline" => "Create a HaruOutline instance",
    "HaruDoc::getCurrentEncoder" => "Get HaruEncoder currently used in the document",
    "HaruDoc::getCurrentPage" => "Return current page of the document",
    "HaruDoc::getEncoder" => "Get HaruEncoder instance for the specified encoding",
    "HaruDoc::getFont" => "Get HaruFont instance",
    "HaruDoc::getInfoAttr" => "Get current value of the specified document attribute",
    "HaruDoc::getPageLayout" => "Get current page layout",
    "HaruDoc::getPageMode" => "Get current page mode",
    "HaruDoc::getStreamSize" => "Get the size of the temporary stream",
    "HaruDoc::insertPage" => "Insert new page just before the specified page",
    "HaruDoc::loadJPEG" => "Load a JPEG image",
    "HaruDoc::loadPNG" => "Load PNG image and return HaruImage instance",
    "HaruDoc::loadRaw" => "Load a RAW image",
    "HaruDoc::loadTTC" => "Load the font with the specified index from TTC file",
    "HaruDoc::loadTTF" => "Load TTF font file",
    "HaruDoc::output" => "Write the document data to the output buffer",
    "HaruDoc::readFromStream" => "Read data from the temporary stream",
    "HaruDoc::resetError" => "Reset error state of the document handle",
    "HaruDoc::resetStream" => "Rewind the temporary stream",
    "HaruDoc::save" => "Save the document into the specified file",
    "HaruDoc::saveToStream" => "Save the document into a temporary stream",
    "HaruDoc::setCompressionMode" => "Set compression mode for the document",
    "HaruDoc::setCurrentEncoder" => "Set the current encoder for the document",
    "HaruDoc::setEncryptionMode" => "Set encryption mode for the document",
    "HaruDoc::setInfoAttr" => "Set the info attribute of the document",
    "HaruDoc::setInfoDateAttr" => "Set the datetime info attributes of the document",
    "HaruDoc::setOpenAction" => "Define which page is shown when the document is opened",
    "HaruDoc::setPageLayout" => "Set how pages should be displayed",
    "HaruDoc::setPageMode" => "Set how the document should be displayed",
    "HaruDoc::setPagesConfiguration" => "Set the number of pages per set of pages",
    "HaruDoc::setPassword" => "Set owner and user passwords for the document",
    "HaruDoc::setPermission" => "Set permissions for the document",
    "HaruDoc::useCNSEncodings" => "Enable Chinese simplified encodings",
    "HaruDoc::useCNSFonts" => "Enable builtin Chinese simplified fonts",
    "HaruDoc::useCNTEncodings" => "Enable Chinese traditional encodings",
    "HaruDoc::useCNTFonts" => "Enable builtin Chinese traditional fonts",
    "HaruDoc::useJPEncodings" => "Enable Japanese encodings",
    "HaruDoc::useJPFonts" => "Enable builtin Japanese fonts",
    "HaruDoc::useKREncodings" => "Enable Korean encodings",
    "HaruDoc::useKRFonts" => "Enable builtin Korean fonts",
    "HaruDoc::__construct" => "Construct new HaruDoc instance",
    "HaruEncoder::getByteType" => "Get the type of the byte in the text",
    "HaruEncoder::getType" => "Get the type of the encoder",
    "HaruEncoder::getUnicode" => "Convert the specified character to unicode",
    "HaruEncoder::getWritingMode" => "Get the writing mode of the encoder",
    "HaruFont::getAscent" => "Get the vertical ascent of the font",
    "HaruFont::getCapHeight" => "Get the distance from the baseline of uppercase letters",
    "HaruFont::getDescent" => "Get the vertical descent of the font",
    "HaruFont::getEncodingName" => "Get the name of the encoding",
    "HaruFont::getFontName" => "Get the name of the font",
    "HaruFont::getTextWidth" => "Get the total width of the text, number of characters, number of words and number of spaces",
    "HaruFont::getUnicodeWidth" => "Get the width of the character in the font",
    "HaruFont::getXHeight" => "Get the distance from the baseline of lowercase letters",
    "HaruFont::measureText" => "Calculate the number of characters which can be included within the specified width",
    "HaruImage::getBitsPerComponent" => "Get the number of bits used to describe each color component of the image",
    "HaruImage::getColorSpace" => "Get the name of the color space",
    "HaruImage::getHeight" => "Get the height of the image",
    "HaruImage::getSize" => "Get size of the image",
    "HaruImage::getWidth" => "Get the width of the image",
    "HaruImage::setColorMask" => "Set the color mask of the image",
    "HaruImage::setMaskImage" => "Set the image mask",
    "HaruOutline::setDestination" => "Set the destination for the outline",
    "HaruOutline::setOpened" => "Set the initial state of the outline",
    "HaruPage::arc" => "Append an arc to the current path",
    "HaruPage::beginText" => "Begin a text object and set the current text position to (0,0)",
    "HaruPage::circle" => "Append a circle to the current path",
    "HaruPage::closePath" => "Append a straight line from the current point to the start point of the path",
    "HaruPage::concat" => "Concatenate current transformation matrix of the page and the specified matrix",
    "HaruPage::createDestination" => "Create new HaruDestination instance",
    "HaruPage::createLinkAnnotation" => "Create new HaruAnnotation instance",
    "HaruPage::createTextAnnotation" => "Create new HaruAnnotation instance",
    "HaruPage::createURLAnnotation" => "Create and return new HaruAnnotation instance",
    "HaruPage::curveTo" => "Append a Bezier curve to the current path",
    "HaruPage::drawImage" => "Show image at the page",
    "HaruPage::ellipse" => "Append an ellipse to the current path",
    "HaruPage::endPath" => "End current path object without filling and painting operations",
    "HaruPage::endText" => "End current text object",
    "HaruPage::eofill" => "Fill current path using even-odd rule",
    "HaruPage::eoFillStroke" => "Fill current path using even-odd rule, then paint the path",
    "HaruPage::fill" => "Fill current path using nonzero winding number rule",
    "HaruPage::fillStroke" => "Fill current path using nonzero winding number rule, then paint the path",
    "HaruPage::getCharSpace" => "Get the current value of character spacing",
    "HaruPage::getCMYKFill" => "Get the current filling color",
    "HaruPage::getCMYKStroke" => "Get the current stroking color",
    "HaruPage::getCurrentFont" => "Get the currently used font",
    "HaruPage::getCurrentFontSize" => "Get the current font size",
    "HaruPage::getCurrentPos" => "Get the current position for path painting",
    "HaruPage::getCurrentTextPos" => "Get the current position for text printing",
    "HaruPage::getDash" => "Get the current dash pattern",
    "HaruPage::getFillingColorSpace" => "Get the current filling color space",
    "HaruPage::getFlatness" => "Get the flatness of the page",
    "HaruPage::getGMode" => "Get the current graphics mode",
    "HaruPage::getGrayFill" => "Get the current filling color",
    "HaruPage::getGrayStroke" => "Get the current stroking color",
    "HaruPage::getHeight" => "Get the height of the page",
    "HaruPage::getHorizontalScaling" => "Get the current value of horizontal scaling",
    "HaruPage::getLineCap" => "Get the current line cap style",
    "HaruPage::getLineJoin" => "Get the current line join style",
    "HaruPage::getLineWidth" => "Get the current line width",
    "HaruPage::getMiterLimit" => "Get the value of miter limit",
    "HaruPage::getRGBFill" => "Get the current filling color",
    "HaruPage::getRGBStroke" => "Get the current stroking color",
    "HaruPage::getStrokingColorSpace" => "Get the current stroking color space",
    "HaruPage::getTextLeading" => "Get the current value of line spacing",
    "HaruPage::getTextMatrix" => "Get the current text transformation matrix of the page",
    "HaruPage::getTextRenderingMode" => "Get the current text rendering mode",
    "HaruPage::getTextRise" => "Get the current value of text rising",
    "HaruPage::getTextWidth" => "Get the width of the text using current fontsize, character spacing and word spacing",
    "HaruPage::getTransMatrix" => "Get the current transformation matrix of the page",
    "HaruPage::getWidth" => "Get the width of the page",
    "HaruPage::getWordSpace" => "Get the current value of word spacing",
    "HaruPage::lineTo" => "Draw a line from the current point to the specified point",
    "HaruPage::measureText" => "Calculate the byte length of characters which can be included on one line of the specified width",
    "HaruPage::moveTextPos" => "Move text position to the specified offset",
    "HaruPage::moveTo" => "Set starting point for new drawing path",
    "HaruPage::moveToNextLine" => "Move text position to the start of the next line",
    "HaruPage::rectangle" => "Append a rectangle to the current path",
    "HaruPage::setCharSpace" => "Set character spacing for the page",
    "HaruPage::setCMYKFill" => "Set filling color for the page",
    "HaruPage::setCMYKStroke" => "Set stroking color for the page",
    "HaruPage::setDash" => "Set the dash pattern for the page",
    "HaruPage::setFlatness" => "Set flatness for the page",
    "HaruPage::setFontAndSize" => "Set font and fontsize for the page",
    "HaruPage::setGrayFill" => "Set filling color for the page",
    "HaruPage::setGrayStroke" => "Sets stroking color for the page",
    "HaruPage::setHeight" => "Set height of the page",
    "HaruPage::setHorizontalScaling" => "Set horizontal scaling for the page",
    "HaruPage::setLineCap" => "Set the shape to be used at the ends of lines",
    "HaruPage::setLineJoin" => "Set line join style for the page",
    "HaruPage::setLineWidth" => "Set line width for the page",
    "HaruPage::setMiterLimit" => "Set the current value of the miter limit of the page",
    "HaruPage::setRGBFill" => "Set filling color for the page",
    "HaruPage::setRGBStroke" => "Set stroking color for the page",
    "HaruPage::setRotate" => "Set rotation angle of the page",
    "HaruPage::setSize" => "Set size and direction of the page",
    "HaruPage::setSlideShow" => "Set transition style for the page",
    "HaruPage::setTextLeading" => "Set text leading (line spacing) for the page",
    "HaruPage::setTextMatrix" => "Set the current text transformation matrix of the page",
    "HaruPage::setTextRenderingMode" => "Set text rendering mode for the page",
    "HaruPage::setTextRise" => "Set the current value of text rising",
    "HaruPage::setWidth" => "Set width of the page",
    "HaruPage::setWordSpace" => "Set word spacing for the page",
    "HaruPage::showText" => "Print text at the current position of the page",
    "HaruPage::showTextNextLine" => "Move the current position to the start of the next line and print the text",
    "HaruPage::stroke" => "Paint current path",
    "HaruPage::textOut" => "Print the text on the specified position",
    "HaruPage::textRect" => "Print the text inside the specified region",
    "hash" => "Generate a hash value (message digest)",
    "HashContext::__construct" => "Private constructor to disallow direct instantiation",
    "header" => "Send a raw HTTP header",
    "hebrev" => "Convert logical Hebrew text to visual text",
    "hebrevc" => "Convert logical Hebrew text to visual text with newline conversion",
    "hexdec" => "Hexadecimal to decimal",
    "htmlentities" => "Convert all applicable characters to HTML entities",
    "htmlspecialchars" => "Convert special characters to HTML entities",
    "http:" => "Accessing HTTP(s) URLs",
    "HTTP" => "HTTP context option listing",
    "hw_api::checkin" => "Checks in an object",
    "hw_api::checkout" => "Checks out an object",
    "hw_api::children" => "Returns children of an object",
    "hw_api::content" => "Returns content of an object",
    "hw_api::copy" => "Copies physically",
    "hw_api::dbstat" => "Returns statistics about database server",
    "hw_api::dcstat" => "Returns statistics about document cache server",
    "hw_api::dstanchors" => "Returns a list of all destination anchors",
    "hw_api::dstofsrcanchor" => "Returns destination of a source anchor",
    "hw_api::find" => "Search for objects",
    "hw_api::ftstat" => "Returns statistics about fulltext server",
    "hw_api::hwstat" => "Returns statistics about Hyperwave server",
    "hw_api::identify" => "Log into Hyperwave Server",
    "hw_api::info" => "Returns information about server configuration",
    "hw_api::insert" => "Inserts a new object",
    "hw_api::insertanchor" => "Inserts a new object of type anchor",
    "hw_api::insertcollection" => "Inserts a new object of type collection",
    "hw_api::insertdocument" => "Inserts a new object of type document",
    "hw_api::link" => "Creates a link to an object",
    "hw_api::lock" => "Locks an object",
    "hw_api::move" => "Moves object between collections",
    "hw_api::object" => "Retrieve attribute information",
    "hw_api::objectbyanchor" => "Returns the object an anchor belongs to",
    "hw_api::parents" => "Returns parents of an object",
    "hw_api::remove" => "Delete an object",
    "hw_api::replace" => "Replaces an object",
    "hw_api::setcommittedversion" => "Commits version other than last version",
    "hw_api::srcanchors" => "Returns a list of all source anchors",
    "hw_api::srcsofdst" => "Returns source of a destination object",
    "hw_api::unlock" => "Unlocks a locked object",
    "hw_api::user" => "Returns the own user object",
    "hw_api::userlist" => "Returns a list of all logged in users",
    "hypot" => "Calculate the length of the hypotenuse of a right-angle triangle",
    "iconv" => "Convert string to requested character encoding",
    "idate" => "Format a local time/date as integer",
    "imageaffine" => "Return an image containing the affine transformed src image, using an optional clipping area",
    "imageaffinematrixconcat" => "Concatenate two affine transformation matrices",
    "imageaffinematrixget" => "Get an affine transformation matrix",
    "imagealphablending" => "Set the blending mode for an image",
    "imageantialias" => "Should antialias functions be used or not",
    "imagearc" => "Draws an arc",
    "imagebmp" => "Output a BMP image to browser or file",
    "imagechar" => "Draw a character horizontally",
    "imagecharup" => "Draw a character vertically",
    "imagecolorallocate" => "Allocate a color for an image",
    "imagecolorallocatealpha" => "Allocate a color for an image",
    "imagecolorat" => "Get the index of the color of a pixel",
    "imagecolorclosest" => "Get the index of the closest color to the specified color",
    "imagecolorclosestalpha" => "Get the index of the closest color to the specified color + alpha",
    "imagecolorclosesthwb" => "Get the index of the color which has the hue, white and blackness",
    "imagecolordeallocate" => "De-allocate a color for an image",
    "imagecolorexact" => "Get the index of the specified color",
    "imagecolorexactalpha" => "Get the index of the specified color + alpha",
    "imagecolormatch" => "Makes the colors of the palette version of an image more closely match the true color version",
    "imagecolorresolve" => "Get the index of the specified color or its closest possible alternative",
    "imagecolorresolvealpha" => "Get the index of the specified color + alpha or its closest possible alternative",
    "imagecolorset" => "Set the color for the specified palette index",
    "imagecolorsforindex" => "Get the colors for an index",
    "imagecolorstotal" => "Find out the number of colors in an image's palette",
    "imagecolortransparent" => "Define a color as transparent",
    "imageconvolution" => "Apply a 3x3 convolution matrix, using coefficient and offset",
    "imagecopy" => "Copy part of an image",
    "imagecopymerge" => "Copy and merge part of an image",
    "imagecopymergegray" => "Copy and merge part of an image with gray scale",
    "imagecopyresampled" => "Copy and resize part of an image with resampling",
    "imagecopyresized" => "Copy and resize part of an image",
    "imagecreate" => "Create a new palette based image",
    "imagecreatefrombmp" => "Create a new image from file or URL",
    "imagecreatefromgd" => "Create a new image from GD file or URL",
    "imagecreatefromgif" => "Create a new image from file or URL",
    "imagecreatefromjpeg" => "Create a new image from file or URL",
    "imagecreatefrompng" => "Create a new image from file or URL",
    "imagecreatefromstring" => "Create a new image from the image stream in the string",
    "imagecreatefromwbmp" => "Create a new image from file or URL",
    "imagecreatefromwebp" => "Create a new image from file or URL",
    "imagecreatefromxbm" => "Create a new image from file or URL",
    "imagecreatefromxpm" => "Create a new image from file or URL",
    "imagecreatetruecolor" => "Create a new true color image",
    "imagecrop" => "Crop an image to the given rectangle",
    "imagecropauto" => "Crop an image automatically using one of the available modes",
    "imagedashedline" => "Draw a dashed line",
    "imagedestroy" => "Destroy an image",
    "imageellipse" => "Draw an ellipse",
    "imagefill" => "Flood fill",
    "imagefilledarc" => "Draw a partial arc and fill it",
    "imagefilledellipse" => "Draw a filled ellipse",
    "imagefilledpolygon" => "Draw a filled polygon",
    "imagefilledrectangle" => "Draw a filled rectangle",
    "imagefilltoborder" => "Flood fill to specific color",
    "imagefilter" => "Applies a filter to an image",
    "imageflip" => "Flips an image using a given mode",
    "imagefontheight" => "Get font height",
    "imagefontwidth" => "Get font width",
    "imageftbbox" => "Give the bounding box of a text using fonts via freetype2",
    "imagefttext" => "Write text to the image using fonts using FreeType 2",
    "imagegammacorrect" => "Apply a gamma correction to a GD image",
    "imagegd" => "Output GD image to browser or file",
    "imagegetclip" => "Get the clipping rectangle",
    "imagegif" => "Output image to browser or file",
    "imagegrabscreen" => "Captures the whole screen",
    "imagegrabwindow" => "Captures a window",
    "imageinterlace" => "Enable or disable interlace",
    "imageistruecolor" => "Finds whether an image is a truecolor image",
    "imagejpeg" => "Output image to browser or file",
    "imagelayereffect" => "Set the alpha blending flag to use layering effects",
    "imageline" => "Draw a line",
    "imageloadfont" => "Load a new font",
    "imageopenpolygon" => "Draws an open polygon",
    "imagepalettecopy" => "Copy the palette from one image to another",
    "imagepalettetotruecolor" => "Converts a palette based image to true color",
    "imagepng" => "Output a PNG image to either the browser or a file",
    "imagepolygon" => "Draws a polygon",
    "imagepsbbox" => "Give the bounding box of a text rectangle using PostScript Type1 fonts",
    "imagepsencodefont" => "Change the character encoding vector of a font",
    "imagepsextendfont" => "Extend or condense a font",
    "imagepsfreefont" => "Free memory used by a PostScript Type 1 font",
    "imagepsloadfont" => "Load a PostScript Type 1 font from file",
    "imagepsslantfont" => "Slant a font",
    "imagepstext" => "Draws a text over an image using PostScript Type1 fonts",
    "imagerectangle" => "Draw a rectangle",
    "imageresolution" => "Get or set the resolution of the image",
    "imagerotate" => "Rotate an image with a given angle",
    "imagesavealpha" => "Set the flag to save full alpha channel information (as opposed to single-color transparency) when saving PNG images",
    "imagescale" => "Scale an image using the given new width and height",
    "imagesetbrush" => "Set the brush image for line drawing",
    "imagesetclip" => "Set the clipping rectangle",
    "imagesetinterpolation" => "Set the interpolation method",
    "imagesetpixel" => "Set a single pixel",
    "imagesetstyle" => "Set the style for line drawing",
    "imagesetthickness" => "Set the thickness for line drawing",
    "imagesettile" => "Set the tile image for filling",
    "imagestring" => "Draw a string horizontally",
    "imagestringup" => "Draw a string vertically",
    "imagesx" => "Get image width",
    "imagesy" => "Get image height",
    "imagetruecolortopalette" => "Convert a true color image to a palette image",
    "imagettfbbox" => "Give the bounding box of a text using TrueType fonts",
    "imagettftext" => "Write text to the image using TrueType fonts",
    "imagetypes" => "Return the image types supported by this PHP build",
    "imagewbmp" => "Output image to browser or file",
    "imagewebp" => "Output a WebP image to browser or file",
    "imagexbm" => "Output an XBM image to browser or file",
    "Imagick::adaptiveBlurImage" => "Adds adaptive blur filter to image",
    "Imagick::adaptiveResizeImage" => "Adaptively resize image with data dependent triangulation",
    "Imagick::adaptiveSharpenImage" => "Adaptively sharpen the image",
    "Imagick::adaptiveThresholdImage" => "Selects a threshold for each pixel based on a range of intensity",
    "Imagick::addImage" => "Adds new image to Imagick object image list",
    "Imagick::addNoiseImage" => "Adds random noise to the image",
    "Imagick::affineTransformImage" => "Transforms an image",
    "Imagick::animateImages" => "Animates an image or images",
    "Imagick::annotateImage" => "Annotates an image with text",
    "Imagick::appendImages" => "Append a set of images",
    "Imagick::autoLevelImage" => "Description",
    "Imagick::averageImages" => "Average a set of images",
    "Imagick::blackThresholdImage" => "Forces all pixels below the threshold into black",
    "Imagick::blueShiftImage" => "Description",
    "Imagick::blurImage" => "Adds blur filter to image",
    "Imagick::borderImage" => "Surrounds the image with a border",
    "Imagick::brightnessContrastImage" => "Description",
    "Imagick::charcoalImage" => "Simulates a charcoal drawing",
    "Imagick::chopImage" => "Removes a region of an image and trims",
    "Imagick::clampImage" => "Description",
    "Imagick::clear" => "Clears all resources associated to Imagick object",
    "Imagick::clipImage" => "Clips along the first path from the 8BIM profile",
    "Imagick::clipImagePath" => "Description",
    "Imagick::clipPathImage" => "Clips along the named paths from the 8BIM profile",
    "Imagick::clone" => "Makes an exact copy of the Imagick object",
    "Imagick::clutImage" => "Replaces colors in the image",
    "Imagick::coalesceImages" => "Composites a set of images",
    "Imagick::colorFloodfillImage" => "Changes the color value of any pixel that matches target",
    "Imagick::colorizeImage" => "Blends the fill color with the image",
    "Imagick::colorMatrixImage" => "Description",
    "Imagick::combineImages" => "Combines one or more images into a single image",
    "Imagick::commentImage" => "Adds a comment to your image",
    "Imagick::compareImageChannels" => "Returns the difference in one or more images",
    "Imagick::compareImageLayers" => "Returns the maximum bounding region between images",
    "Imagick::compareImages" => "Compares an image to a reconstructed image",
    "Imagick::compositeImage" => "Composite one image onto another",
    "Imagick::contrastImage" => "Change the contrast of the image",
    "Imagick::contrastStretchImage" => "Enhances the contrast of a color image",
    "Imagick::convolveImage" => "Applies a custom convolution kernel to the image",
    "Imagick::count" => "Get the number of images",
    "Imagick::cropImage" => "Extracts a region of the image",
    "Imagick::cropThumbnailImage" => "Creates a crop thumbnail",
    "Imagick::current" => "Returns a reference to the current Imagick object",
    "Imagick::cycleColormapImage" => "Displaces an image's colormap",
    "Imagick::decipherImage" => "Deciphers an image",
    "Imagick::deconstructImages" => "Returns certain pixel differences between images",
    "Imagick::deleteImageArtifact" => "Delete image artifact",
    "Imagick::deleteImageProperty" => "Description",
    "Imagick::deskewImage" => "Removes skew from the image",
    "Imagick::despeckleImage" => "Reduces the speckle noise in an image",
    "Imagick::destroy" => "Destroys the Imagick object",
    "Imagick::displayImage" => "Displays an image",
    "Imagick::displayImages" => "Displays an image or image sequence",
    "Imagick::distortImage" => "Distorts an image using various distortion methods",
    "Imagick::drawImage" => "Renders the ImagickDraw object on the current image",
    "Imagick::edgeImage" => "Enhance edges within the image",
    "Imagick::embossImage" => "Returns a grayscale image with a three-dimensional effect",
    "Imagick::encipherImage" => "Enciphers an image",
    "Imagick::enhanceImage" => "Improves the quality of a noisy image",
    "Imagick::equalizeImage" => "Equalizes the image histogram",
    "Imagick::evaluateImage" => "Applies an expression to an image",
    "Imagick::exportImagePixels" => "Exports raw image pixels",
    "Imagick::extentImage" => "Set image size",
    "Imagick::filter" => "Description",
    "Imagick::flattenImages" => "Merges a sequence of images",
    "Imagick::flipImage" => "Creates a vertical mirror image",
    "Imagick::floodFillPaintImage" => "Changes the color value of any pixel that matches target",
    "Imagick::flopImage" => "Creates a horizontal mirror image",
    "Imagick::forwardFourierTransformImage" => "Description",
    "Imagick::frameImage" => "Adds a simulated three-dimensional border",
    "Imagick::functionImage" => "Applies a function on the image",
    "Imagick::fxImage" => "Evaluate expression for each pixel in the image",
    "Imagick::gammaImage" => "Gamma-corrects an image",
    "Imagick::gaussianBlurImage" => "Blurs an image",
    "Imagick::getColorspace" => "Gets the colorspace",
    "Imagick::getCompression" => "Gets the object compression type",
    "Imagick::getCompressionQuality" => "Gets the object compression quality",
    "Imagick::getCopyright" => "Returns the ImageMagick API copyright as a string",
    "Imagick::getFilename" => "The filename associated with an image sequence",
    "Imagick::getFont" => "Gets font",
    "Imagick::getFormat" => "Returns the format of the Imagick object",
    "Imagick::getGravity" => "Gets the gravity",
    "Imagick::getHomeURL" => "Returns the ImageMagick home URL",
    "Imagick::getImage" => "Returns a new Imagick object",
    "Imagick::getImageAlphaChannel" => "Gets the image alpha channel",
    "Imagick::getImageArtifact" => "Get image artifact",
    "Imagick::getImageAttribute" => "Description",
    "Imagick::getImageBackgroundColor" => "Returns the image background color",
    "Imagick::getImageBlob" => "Returns the image sequence as a blob",
    "Imagick::getImageBluePrimary" => "Returns the chromaticy blue primary point",
    "Imagick::getImageBorderColor" => "Returns the image border color",
    "Imagick::getImageChannelDepth" => "Gets the depth for a particular image channel",
    "Imagick::getImageChannelDistortion" => "Compares image channels of an image to a reconstructed image",
    "Imagick::getImageChannelDistortions" => "Gets channel distortions",
    "Imagick::getImageChannelExtrema" => "Gets the extrema for one or more image channels",
    "Imagick::getImageChannelKurtosis" => "The getImageChannelKurtosis purpose",
    "Imagick::getImageChannelMean" => "Gets the mean and standard deviation",
    "Imagick::getImageChannelRange" => "Gets channel range",
    "Imagick::getImageChannelStatistics" => "Returns statistics for each channel in the image",
    "Imagick::getImageClipMask" => "Gets image clip mask",
    "Imagick::getImageColormapColor" => "Returns the color of the specified colormap index",
    "Imagick::getImageColors" => "Gets the number of unique colors in the image",
    "Imagick::getImageColorspace" => "Gets the image colorspace",
    "Imagick::getImageCompose" => "Returns the composite operator associated with the image",
    "Imagick::getImageCompression" => "Gets the current image's compression type",
    "Imagick::getImageCompressionQuality" => "Gets the current image's compression quality",
    "Imagick::getImageDelay" => "Gets the image delay",
    "Imagick::getImageDepth" => "Gets the image depth",
    "Imagick::getImageDispose" => "Gets the image disposal method",
    "Imagick::getImageDistortion" => "Compares an image to a reconstructed image",
    "Imagick::getImageExtrema" => "Gets the extrema for the image",
    "Imagick::getImageFilename" => "Returns the filename of a particular image in a sequence",
    "Imagick::getImageFormat" => "Returns the format of a particular image in a sequence",
    "Imagick::getImageGamma" => "Gets the image gamma",
    "Imagick::getImageGeometry" => "Gets the width and height as an associative array",
    "Imagick::getImageGravity" => "Gets the image gravity",
    "Imagick::getImageGreenPrimary" => "Returns the chromaticy green primary point",
    "Imagick::getImageHeight" => "Returns the image height",
    "Imagick::getImageHistogram" => "Gets the image histogram",
    "Imagick::getImageIndex" => "Gets the index of the current active image",
    "Imagick::getImageInterlaceScheme" => "Gets the image interlace scheme",
    "Imagick::getImageInterpolateMethod" => "Returns the interpolation method",
    "Imagick::getImageIterations" => "Gets the image iterations",
    "Imagick::getImageLength" => "Returns the image length in bytes",
    "Imagick::getImageMagickLicense" => "Returns a string containing the ImageMagick license",
    "Imagick::getImageMatte" => "Return if the image has a matte channel",
    "Imagick::getImageMatteColor" => "Returns the image matte color",
    "Imagick::getImageMimeType" => "Description",
    "Imagick::getImageOrientation" => "Gets the image orientation",
    "Imagick::getImagePage" => "Returns the page geometry",
    "Imagick::getImagePixelColor" => "Returns the color of the specified pixel",
    "Imagick::getImageProfile" => "Returns the named image profile",
    "Imagick::getImageProfiles" => "Returns the image profiles",
    "Imagick::getImageProperties" => "Returns the image properties",
    "Imagick::getImageProperty" => "Returns the named image property",
    "Imagick::getImageRedPrimary" => "Returns the chromaticity red primary point",
    "Imagick::getImageRegion" => "Extracts a region of the image",
    "Imagick::getImageRenderingIntent" => "Gets the image rendering intent",
    "Imagick::getImageResolution" => "Gets the image X and Y resolution",
    "Imagick::getImagesBlob" => "Returns all image sequences as a blob",
    "Imagick::getImageScene" => "Gets the image scene",
    "Imagick::getImageSignature" => "Generates an SHA-256 message digest",
    "Imagick::getImageSize" => "Returns the image length in bytes",
    "Imagick::getImageTicksPerSecond" => "Gets the image ticks-per-second",
    "Imagick::getImageTotalInkDensity" => "Gets the image total ink density",
    "Imagick::getImageType" => "Gets the potential image type",
    "Imagick::getImageUnits" => "Gets the image units of resolution",
    "Imagick::getImageVirtualPixelMethod" => "Returns the virtual pixel method",
    "Imagick::getImageWhitePoint" => "Returns the chromaticity white point",
    "Imagick::getImageWidth" => "Returns the image width",
    "Imagick::getInterlaceScheme" => "Gets the object interlace scheme",
    "Imagick::getIteratorIndex" => "Gets the index of the current active image",
    "Imagick::getNumberImages" => "Returns the number of images in the object",
    "Imagick::getOption" => "Returns a value associated with the specified key",
    "Imagick::getPackageName" => "Returns the ImageMagick package name",
    "Imagick::getPage" => "Returns the page geometry",
    "Imagick::getPixelIterator" => "Returns a MagickPixelIterator",
    "Imagick::getPixelRegionIterator" => "Get an ImagickPixelIterator for an image section",
    "Imagick::getPointSize" => "Gets point size",
    "Imagick::getQuantum" => "Description",
    "Imagick::getQuantumDepth" => "Gets the quantum depth",
    "Imagick::getQuantumRange" => "Returns the Imagick quantum range",
    "Imagick::getRegistry" => "Description",
    "Imagick::getReleaseDate" => "Returns the ImageMagick release date",
    "Imagick::getResource" => "Returns the specified resource's memory usage",
    "Imagick::getResourceLimit" => "Returns the specified resource limit",
    "Imagick::getSamplingFactors" => "Gets the horizontal and vertical sampling factor",
    "Imagick::getSize" => "Returns the size associated with the Imagick object",
    "Imagick::getSizeOffset" => "Returns the size offset",
    "Imagick::getVersion" => "Returns the ImageMagick API version",
    "Imagick::haldClutImage" => "Replaces colors in the image",
    "Imagick::hasNextImage" => "Checks if the object has more images",
    "Imagick::hasPreviousImage" => "Checks if the object has a previous image",
    "Imagick::identifyFormat" => "Description",
    "Imagick::identifyImage" => "Identifies an image and fetches attributes",
    "Imagick::implodeImage" => "Creates a new image as a copy",
    "Imagick::importImagePixels" => "Imports image pixels",
    "Imagick::inverseFourierTransformImage" => "Description",
    "Imagick::labelImage" => "Adds a label to an image",
    "Imagick::levelImage" => "Adjusts the levels of an image",
    "Imagick::linearStretchImage" => "Stretches with saturation the image intensity",
    "Imagick::liquidRescaleImage" => "Animates an image or images",
    "Imagick::listRegistry" => "Description",
    "Imagick::magnifyImage" => "Scales an image proportionally 2x",
    "Imagick::mapImage" => "Replaces the colors of an image with the closest color from a reference image",
    "Imagick::matteFloodfillImage" => "Changes the transparency value of a color",
    "Imagick::medianFilterImage" => "Applies a digital filter",
    "Imagick::mergeImageLayers" => "Merges image layers",
    "Imagick::minifyImage" => "Scales an image proportionally to half its size",
    "Imagick::modulateImage" => "Control the brightness, saturation, and hue",
    "Imagick::montageImage" => "Creates a composite image",
    "Imagick::morphImages" => "Method morphs a set of images",
    "Imagick::morphology" => "Description",
    "Imagick::mosaicImages" => "Forms a mosaic from images",
    "Imagick::motionBlurImage" => "Simulates motion blur",
    "Imagick::negateImage" => "Negates the colors in the reference image",
    "Imagick::newImage" => "Creates a new image",
    "Imagick::newPseudoImage" => "Creates a new image",
    "Imagick::nextImage" => "Moves to the next image",
    "Imagick::normalizeImage" => "Enhances the contrast of a color image",
    "Imagick::oilPaintImage" => "Simulates an oil painting",
    "Imagick::opaquePaintImage" => "Changes the color value of any pixel that matches target",
    "Imagick::optimizeImageLayers" => "Removes repeated portions of images to optimize",
    "Imagick::orderedPosterizeImage" => "Performs an ordered dither",
    "Imagick::paintFloodfillImage" => "Changes the color value of any pixel that matches target",
    "Imagick::paintOpaqueImage" => "Change any pixel that matches color",
    "Imagick::paintTransparentImage" => "Changes any pixel that matches color with the color defined by fill",
    "Imagick::pingImage" => "Fetch basic attributes about the image",
    "Imagick::pingImageBlob" => "Quickly fetch attributes",
    "Imagick::pingImageFile" => "Get basic image attributes in a lightweight manner",
    "Imagick::polaroidImage" => "Simulates a Polaroid picture",
    "Imagick::posterizeImage" => "Reduces the image to a limited number of color level",
    "Imagick::previewImages" => "Quickly pin-point appropriate parameters for image processing",
    "Imagick::previousImage" => "Move to the previous image in the object",
    "Imagick::profileImage" => "Adds or removes a profile from an image",
    "Imagick::quantizeImage" => "Analyzes the colors within a reference image",
    "Imagick::quantizeImages" => "Analyzes the colors within a sequence of images",
    "Imagick::queryFontMetrics" => "Returns an array representing the font metrics",
    "Imagick::queryFonts" => "Returns the configured fonts",
    "Imagick::queryFormats" => "Returns formats supported by Imagick",
    "Imagick::radialBlurImage" => "Radial blurs an image",
    "Imagick::raiseImage" => "Creates a simulated 3d button-like effect",
    "Imagick::randomThresholdImage" => "Creates a high-contrast, two-color image",
    "Imagick::readImage" => "Reads image from filename",
    "Imagick::readImageBlob" => "Reads image from a binary string",
    "Imagick::readImageFile" => "Reads image from open filehandle",
    "Imagick::readimages" => "Description",
    "Imagick::recolorImage" => "Recolors image",
    "Imagick::reduceNoiseImage" => "Smooths the contours of an image",
    "Imagick::remapImage" => "Remaps image colors",
    "Imagick::removeImage" => "Removes an image from the image list",
    "Imagick::removeImageProfile" => "Removes the named image profile and returns it",
    "Imagick::render" => "Renders all preceding drawing commands",
    "Imagick::resampleImage" => "Resample image to desired resolution",
    "Imagick::resetImagePage" => "Reset image page",
    "Imagick::resizeImage" => "Scales an image",
    "Imagick::rollImage" => "Offsets an image",
    "Imagick::rotateImage" => "Rotates an image",
    "Imagick::rotationalBlurImage" => "Description",
    "Imagick::roundCorners" => "Rounds image corners",
    "Imagick::sampleImage" => "Scales an image with pixel sampling",
    "Imagick::scaleImage" => "Scales the size of an image",
    "Imagick::segmentImage" => "Segments an image",
    "Imagick::selectiveBlurImage" => "Description",
    "Imagick::separateImageChannel" => "Separates a channel from the image",
    "Imagick::sepiaToneImage" => "Sepia tones an image",
    "Imagick::setBackgroundColor" => "Sets the object's default background color",
    "Imagick::setColorspace" => "Set colorspace",
    "Imagick::setCompression" => "Sets the object's default compression type",
    "Imagick::setCompressionQuality" => "Sets the object's default compression quality",
    "Imagick::setFilename" => "Sets the filename before you read or write the image",
    "Imagick::setFirstIterator" => "Sets the Imagick iterator to the first image",
    "Imagick::setFont" => "Sets font",
    "Imagick::setFormat" => "Sets the format of the Imagick object",
    "Imagick::setGravity" => "Sets the gravity",
    "Imagick::setImage" => "Replaces image in the object",
    "Imagick::setImageAlphaChannel" => "Sets image alpha channel",
    "Imagick::setImageArtifact" => "Set image artifact",
    "Imagick::setImageAttribute" => "Description",
    "Imagick::setImageBackgroundColor" => "Sets the image background color",
    "Imagick::setImageBias" => "Sets the image bias for any method that convolves an image",
    "Imagick::setImageBiasQuantum" => "Description",
    "Imagick::setImageBluePrimary" => "Sets the image chromaticity blue primary point",
    "Imagick::setImageBorderColor" => "Sets the image border color",
    "Imagick::setImageChannelDepth" => "Sets the depth of a particular image channel",
    "Imagick::setImageClipMask" => "Sets image clip mask",
    "Imagick::setImageColormapColor" => "Sets the color of the specified colormap index",
    "Imagick::setImageColorspace" => "Sets the image colorspace",
    "Imagick::setImageCompose" => "Sets the image composite operator",
    "Imagick::setImageCompression" => "Sets the image compression",
    "Imagick::setImageCompressionQuality" => "Sets the image compression quality",
    "Imagick::setImageDelay" => "Sets the image delay",
    "Imagick::setImageDepth" => "Sets the image depth",
    "Imagick::setImageDispose" => "Sets the image disposal method",
    "Imagick::setImageExtent" => "Sets the image size",
    "Imagick::setImageFilename" => "Sets the filename of a particular image",
    "Imagick::setImageFormat" => "Sets the format of a particular image",
    "Imagick::setImageGamma" => "Sets the image gamma",
    "Imagick::setImageGravity" => "Sets the image gravity",
    "Imagick::setImageGreenPrimary" => "Sets the image chromaticity green primary point",
    "Imagick::setImageIndex" => "Set the iterator position",
    "Imagick::setImageInterlaceScheme" => "Sets the image compression",
    "Imagick::setImageInterpolateMethod" => "Sets the image interpolate pixel method",
    "Imagick::setImageIterations" => "Sets the image iterations",
    "Imagick::setImageMatte" => "Sets the image matte channel",
    "Imagick::setImageMatteColor" => "Sets the image matte color",
    "Imagick::setImageOpacity" => "Sets the image opacity level",
    "Imagick::setImageOrientation" => "Sets the image orientation",
    "Imagick::setImagePage" => "Sets the page geometry of the image",
    "Imagick::setImageProfile" => "Adds a named profile to the Imagick object",
    "Imagick::setImageProperty" => "Sets an image property",
    "Imagick::setImageRedPrimary" => "Sets the image chromaticity red primary point",
    "Imagick::setImageRenderingIntent" => "Sets the image rendering intent",
    "Imagick::setImageResolution" => "Sets the image resolution",
    "Imagick::setImageScene" => "Sets the image scene",
    "Imagick::setImageTicksPerSecond" => "Sets the image ticks-per-second",
    "Imagick::setImageType" => "Sets the image type",
    "Imagick::setImageUnits" => "Sets the image units of resolution",
    "Imagick::setImageVirtualPixelMethod" => "Sets the image virtual pixel method",
    "Imagick::setImageWhitePoint" => "Sets the image chromaticity white point",
    "Imagick::setInterlaceScheme" => "Sets the image compression",
    "Imagick::setIteratorIndex" => "Set the iterator position",
    "Imagick::setLastIterator" => "Sets the Imagick iterator to the last image",
    "Imagick::setOption" => "Set an option",
    "Imagick::setPage" => "Sets the page geometry of the Imagick object",
    "Imagick::setPointSize" => "Sets point size",
    "Imagick::setProgressMonitor" => "Description",
    "Imagick::setRegistry" => "Description",
    "Imagick::setResolution" => "Sets the image resolution",
    "Imagick::setResourceLimit" => "Sets the limit for a particular resource in megabytes",
    "Imagick::setSamplingFactors" => "Sets the image sampling factors",
    "Imagick::setSize" => "Sets the size of the Imagick object",
    "Imagick::setSizeOffset" => "Sets the size and offset of the Imagick object",
    "Imagick::setType" => "Sets the image type attribute",
    "Imagick::shadeImage" => "Creates a 3D effect",
    "Imagick::shadowImage" => "Simulates an image shadow",
    "Imagick::sharpenImage" => "Sharpens an image",
    "Imagick::shaveImage" => "Shaves pixels from the image edges",
    "Imagick::shearImage" => "Creating a parallelogram",
    "Imagick::sigmoidalContrastImage" => "Adjusts the contrast of an image",
    "Imagick::sketchImage" => "Simulates a pencil sketch",
    "Imagick::smushImages" => "Description",
    "Imagick::solarizeImage" => "Applies a solarizing effect to the image",
    "Imagick::sparseColorImage" => "Interpolates colors",
    "Imagick::spliceImage" => "Splices a solid color into the image",
    "Imagick::spreadImage" => "Randomly displaces each pixel in a block",
    "Imagick::statisticImage" => "Description",
    "Imagick::steganoImage" => "Hides a digital watermark within the image",
    "Imagick::stereoImage" => "Composites two images",
    "Imagick::stripImage" => "Strips an image of all profiles and comments",
    "Imagick::subImageMatch" => "Description",
    "Imagick::swirlImage" => "Swirls the pixels about the center of the image",
    "Imagick::textureImage" => "Repeatedly tiles the texture image",
    "Imagick::thresholdImage" => "Changes the value of individual pixels based on a threshold",
    "Imagick::thumbnailImage" => "Changes the size of an image",
    "Imagick::tintImage" => "Applies a color vector to each pixel in the image",
    "Imagick::transformImage" => "Convenience method for setting crop size and the image geometry",
    "Imagick::transformImageColorspace" => "Transforms an image to a new colorspace",
    "Imagick::transparentPaintImage" => "Paints pixels transparent",
    "Imagick::transposeImage" => "Creates a vertical mirror image",
    "Imagick::transverseImage" => "Creates a horizontal mirror image",
    "Imagick::trimImage" => "Remove edges from the image",
    "Imagick::uniqueImageColors" => "Discards all but one of any pixel color",
    "Imagick::unsharpMaskImage" => "Sharpens an image",
    "Imagick::valid" => "Checks if the current item is valid",
    "Imagick::vignetteImage" => "Adds vignette filter to the image",
    "Imagick::waveImage" => "Applies wave filter to the image",
    "Imagick::whiteThresholdImage" => "Force all pixels above the threshold into white",
    "Imagick::writeImage" => "Writes an image to the specified filename",
    "Imagick::writeImageFile" => "Writes an image to a filehandle",
    "Imagick::writeImages" => "Writes an image or image sequence",
    "Imagick::writeImagesFile" => "Writes frames to a filehandle",
    "Imagick::__construct" => "The Imagick constructor",
    "Imagick::__toString" => "Returns the image as a string",
    "ImagickDraw::affine" => "Adjusts the current affine transformation matrix",
    "ImagickDraw::annotation" => "Draws text on the image",
    "ImagickDraw::arc" => "Draws an arc",
    "ImagickDraw::bezier" => "Draws a bezier curve",
    "ImagickDraw::circle" => "Draws a circle",
    "ImagickDraw::clear" => "Clears the ImagickDraw",
    "ImagickDraw::clone" => "Makes an exact copy of the specified ImagickDraw object",
    "ImagickDraw::color" => "Draws color on image",
    "ImagickDraw::comment" => "Adds a comment",
    "ImagickDraw::composite" => "Composites an image onto the current image",
    "ImagickDraw::destroy" => "Frees all associated resources",
    "ImagickDraw::ellipse" => "Draws an ellipse on the image",
    "ImagickDraw::getClipPath" => "Obtains the current clipping path ID",
    "ImagickDraw::getClipRule" => "Returns the current polygon fill rule",
    "ImagickDraw::getClipUnits" => "Returns the interpretation of clip path units",
    "ImagickDraw::getFillColor" => "Returns the fill color",
    "ImagickDraw::getFillOpacity" => "Returns the opacity used when drawing",
    "ImagickDraw::getFillRule" => "Returns the fill rule",
    "ImagickDraw::getFont" => "Returns the font",
    "ImagickDraw::getFontFamily" => "Returns the font family",
    "ImagickDraw::getFontSize" => "Returns the font pointsize",
    "ImagickDraw::getFontStretch" => "Description",
    "ImagickDraw::getFontStyle" => "Returns the font style",
    "ImagickDraw::getFontWeight" => "Returns the font weight",
    "ImagickDraw::getGravity" => "Returns the text placement gravity",
    "ImagickDraw::getStrokeAntialias" => "Returns the current stroke antialias setting",
    "ImagickDraw::getStrokeColor" => "Returns the color used for stroking object outlines",
    "ImagickDraw::getStrokeDashArray" => "Returns an array representing the pattern of dashes and gaps used to stroke paths",
    "ImagickDraw::getStrokeDashOffset" => "Returns the offset into the dash pattern to start the dash",
    "ImagickDraw::getStrokeLineCap" => "Returns the shape to be used at the end of open subpaths when they are stroked",
    "ImagickDraw::getStrokeLineJoin" => "Returns the shape to be used at the corners of paths when they are stroked",
    "ImagickDraw::getStrokeMiterLimit" => "Returns the stroke miter limit",
    "ImagickDraw::getStrokeOpacity" => "Returns the opacity of stroked object outlines",
    "ImagickDraw::getStrokeWidth" => "Returns the width of the stroke used to draw object outlines",
    "ImagickDraw::getTextAlignment" => "Returns the text alignment",
    "ImagickDraw::getTextAntialias" => "Returns the current text antialias setting",
    "ImagickDraw::getTextDecoration" => "Returns the text decoration",
    "ImagickDraw::getTextEncoding" => "Returns the code set used for text annotations",
    "ImagickDraw::getTextInterlineSpacing" => "Description",
    "ImagickDraw::getTextInterwordSpacing" => "Description",
    "ImagickDraw::getTextKerning" => "Description",
    "ImagickDraw::getTextUnderColor" => "Returns the text under color",
    "ImagickDraw::getVectorGraphics" => "Returns a string containing vector graphics",
    "ImagickDraw::line" => "Draws a line",
    "ImagickDraw::matte" => "Paints on the image's opacity channel",
    "ImagickDraw::pathClose" => "Adds a path element to the current path",
    "ImagickDraw::pathCurveToAbsolute" => "Draws a cubic Bezier curve",
    "ImagickDraw::pathCurveToQuadraticBezierAbsolute" => "Draws a quadratic Bezier curve",
    "ImagickDraw::pathCurveToQuadraticBezierRelative" => "Draws a quadratic Bezier curve",
    "ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute" => "Draws a quadratic Bezier curve",
    "ImagickDraw::pathCurveToQuadraticBezierSmoothRelative" => "Draws a quadratic Bezier curve",
    "ImagickDraw::pathCurveToRelative" => "Draws a cubic Bezier curve",
    "ImagickDraw::pathCurveToSmoothAbsolute" => "Draws a cubic Bezier curve",
    "ImagickDraw::pathCurveToSmoothRelative" => "Draws a cubic Bezier curve",
    "ImagickDraw::pathEllipticArcAbsolute" => "Draws an elliptical arc",
    "ImagickDraw::pathEllipticArcRelative" => "Draws an elliptical arc",
    "ImagickDraw::pathFinish" => "Terminates the current path",
    "ImagickDraw::pathLineToAbsolute" => "Draws a line path",
    "ImagickDraw::pathLineToHorizontalAbsolute" => "Draws a horizontal line path",
    "ImagickDraw::pathLineToHorizontalRelative" => "Draws a horizontal line",
    "ImagickDraw::pathLineToRelative" => "Draws a line path",
    "ImagickDraw::pathLineToVerticalAbsolute" => "Draws a vertical line",
    "ImagickDraw::pathLineToVerticalRelative" => "Draws a vertical line path",
    "ImagickDraw::pathMoveToAbsolute" => "Starts a new sub-path",
    "ImagickDraw::pathMoveToRelative" => "Starts a new sub-path",
    "ImagickDraw::pathStart" => "Declares the start of a path drawing list",
    "ImagickDraw::point" => "Draws a point",
    "ImagickDraw::polygon" => "Draws a polygon",
    "ImagickDraw::polyline" => "Draws a polyline",
    "ImagickDraw::pop" => "Destroys the current ImagickDraw in the stack, and returns to the previously pushed ImagickDraw",
    "ImagickDraw::popClipPath" => "Terminates a clip path definition",
    "ImagickDraw::popDefs" => "Terminates a definition list",
    "ImagickDraw::popPattern" => "Terminates a pattern definition",
    "ImagickDraw::push" => "Clones the current ImagickDraw and pushes it to the stack",
    "ImagickDraw::pushClipPath" => "Starts a clip path definition",
    "ImagickDraw::pushDefs" => "Indicates that following commands create named elements for early processing",
    "ImagickDraw::pushPattern" => "Indicates that subsequent commands up to a ImagickDraw::opPattern() command comprise the definition of a named pattern",
    "ImagickDraw::rectangle" => "Draws a rectangle",
    "ImagickDraw::render" => "Renders all preceding drawing commands onto the image",
    "ImagickDraw::resetVectorGraphics" => "Description",
    "ImagickDraw::rotate" => "Applies the specified rotation to the current coordinate space",
    "ImagickDraw::roundRectangle" => "Draws a rounded rectangle",
    "ImagickDraw::scale" => "Adjusts the scaling factor",
    "ImagickDraw::setClipPath" => "Associates a named clipping path with the image",
    "ImagickDraw::setClipRule" => "Set the polygon fill rule to be used by the clipping path",
    "ImagickDraw::setClipUnits" => "Sets the interpretation of clip path units",
    "ImagickDraw::setFillAlpha" => "Sets the opacity to use when drawing using the fill color or fill texture",
    "ImagickDraw::setFillColor" => "Sets the fill color to be used for drawing filled objects",
    "ImagickDraw::setFillOpacity" => "Sets the opacity to use when drawing using the fill color or fill texture",
    "ImagickDraw::setFillPatternURL" => "Sets the URL to use as a fill pattern for filling objects",
    "ImagickDraw::setFillRule" => "Sets the fill rule to use while drawing polygons",
    "ImagickDraw::setFont" => "Sets the fully-specified font to use when annotating with text",
    "ImagickDraw::setFontFamily" => "Sets the font family to use when annotating with text",
    "ImagickDraw::setFontSize" => "Sets the font pointsize to use when annotating with text",
    "ImagickDraw::setFontStretch" => "Sets the font stretch to use when annotating with text",
    "ImagickDraw::setFontStyle" => "Sets the font style to use when annotating with text",
    "ImagickDraw::setFontWeight" => "Sets the font weight",
    "ImagickDraw::setGravity" => "Sets the text placement gravity",
    "ImagickDraw::setResolution" => "Description",
    "ImagickDraw::setStrokeAlpha" => "Specifies the opacity of stroked object outlines",
    "ImagickDraw::setStrokeAntialias" => "Controls whether stroked outlines are antialiased",
    "ImagickDraw::setStrokeColor" => "Sets the color used for stroking object outlines",
    "ImagickDraw::setStrokeDashArray" => "Specifies the pattern of dashes and gaps used to stroke paths",
    "ImagickDraw::setStrokeDashOffset" => "Specifies the offset into the dash pattern to start the dash",
    "ImagickDraw::setStrokeLineCap" => "Specifies the shape to be used at the end of open subpaths when they are stroked",
    "ImagickDraw::setStrokeLineJoin" => "Specifies the shape to be used at the corners of paths when they are stroked",
    "ImagickDraw::setStrokeMiterLimit" => "Specifies the miter limit",
    "ImagickDraw::setStrokeOpacity" => "Specifies the opacity of stroked object outlines",
    "ImagickDraw::setStrokePatternURL" => "Sets the pattern used for stroking object outlines",
    "ImagickDraw::setStrokeWidth" => "Sets the width of the stroke used to draw object outlines",
    "ImagickDraw::setTextAlignment" => "Specifies a text alignment",
    "ImagickDraw::setTextAntialias" => "Controls whether text is antialiased",
    "ImagickDraw::setTextDecoration" => "Specifies a decoration",
    "ImagickDraw::setTextEncoding" => "Specifies the text code set",
    "ImagickDraw::setTextInterlineSpacing" => "Description",
    "ImagickDraw::setTextInterwordSpacing" => "Description",
    "ImagickDraw::setTextKerning" => "Description",
    "ImagickDraw::setTextUnderColor" => "Specifies the color of a background rectangle",
    "ImagickDraw::setVectorGraphics" => "Sets the vector graphics",
    "ImagickDraw::setViewbox" => "Sets the overall canvas size",
    "ImagickDraw::skewX" => "Skews the current coordinate system in the horizontal direction",
    "ImagickDraw::skewY" => "Skews the current coordinate system in the vertical direction",
    "ImagickDraw::translate" => "Applies a translation to the current coordinate system",
    "ImagickDraw::__construct" => "The ImagickDraw constructor",
    "ImagickKernel::addKernel" => "Description",
    "ImagickKernel::addUnityKernel" => "Description",
    "ImagickKernel::fromBuiltIn" => "Description",
    "ImagickKernel::fromMatrix" => "Description",
    "ImagickKernel::getMatrix" => "Description",
    "ImagickKernel::scale" => "Description",
    "ImagickKernel::separate" => "Description",
    "ImagickPixel::clear" => "Clears resources associated with this object",
    "ImagickPixel::destroy" => "Deallocates resources associated with this object",
    "ImagickPixel::getColor" => "Returns the color",
    "ImagickPixel::getColorAsString" => "Returns the color as a string",
    "ImagickPixel::getColorCount" => "Returns the color count associated with this color",
    "ImagickPixel::getColorQuantum" => "Description",
    "ImagickPixel::getColorValue" => "Gets the normalized value of the provided color channel",
    "ImagickPixel::getColorValueQuantum" => "Description",
    "ImagickPixel::getHSL" => "Returns the normalized HSL color of the ImagickPixel object",
    "ImagickPixel::getIndex" => "Description",
    "ImagickPixel::isPixelSimilar" => "Check the distance between this color and another",
    "ImagickPixel::isPixelSimilarQuantum" => "Description",
    "ImagickPixel::isSimilar" => "Check the distance between this color and another",
    "ImagickPixel::setColor" => "Sets the color",
    "ImagickPixel::setColorCount" => "Description",
    "ImagickPixel::setColorValue" => "Sets the normalized value of one of the channels",
    "ImagickPixel::setColorValueQuantum" => "Description",
    "ImagickPixel::setHSL" => "Sets the normalized HSL color",
    "ImagickPixel::setIndex" => "Description",
    "ImagickPixel::__construct" => "The ImagickPixel constructor",
    "ImagickPixelIterator::clear" => "Clear resources associated with a PixelIterator",
    "ImagickPixelIterator::destroy" => "Deallocates resources associated with a PixelIterator",
    "ImagickPixelIterator::getCurrentIteratorRow" => "Returns the current row of ImagickPixel objects",
    "ImagickPixelIterator::getIteratorRow" => "Returns the current pixel iterator row",
    "ImagickPixelIterator::getNextIteratorRow" => "Returns the next row of the pixel iterator",
    "ImagickPixelIterator::getPreviousIteratorRow" => "Returns the previous row",
    "ImagickPixelIterator::newPixelIterator" => "Returns a new pixel iterator",
    "ImagickPixelIterator::newPixelRegionIterator" => "Returns a new pixel iterator",
    "ImagickPixelIterator::resetIterator" => "Resets the pixel iterator",
    "ImagickPixelIterator::setIteratorFirstRow" => "Sets the pixel iterator to the first pixel row",
    "ImagickPixelIterator::setIteratorLastRow" => "Sets the pixel iterator to the last pixel row",
    "ImagickPixelIterator::setIteratorRow" => "Set the pixel iterator row",
    "ImagickPixelIterator::syncIterator" => "Syncs the pixel iterator",
    "ImagickPixelIterator::__construct" => "The ImagickPixelIterator constructor",
    "implode" => "Join array elements with a string",
    "InfiniteIterator::next" => "Moves the inner Iterator forward or rewinds it",
    "InfiniteIterator::__construct" => "Constructs an InfiniteIterator",
    "intdiv" => "Integer division",
    "IntlBreakIterator::createCharacterInstance" => "Create break iterator for boundaries of combining character sequences",
    "IntlBreakIterator::createCodePointInstance" => "Create break iterator for boundaries of code points",
    "IntlBreakIterator::createLineInstance" => "Create break iterator for logically possible line breaks",
    "IntlBreakIterator::createSentenceInstance" => "Create break iterator for sentence breaks",
    "IntlBreakIterator::createTitleInstance" => "Create break iterator for title-casing breaks",
    "IntlBreakIterator::createWordInstance" => "Create break iterator for word breaks",
    "IntlBreakIterator::current" => "Get index of current position",
    "IntlBreakIterator::first" => "Set position to the first character in the text",
    "IntlBreakIterator::following" => "Advance the iterator to the first boundary following specified offset",
    "IntlBreakIterator::getErrorCode" => "Get last error code on the object",
    "IntlBreakIterator::getErrorMessage" => "Get last error message on the object",
    "IntlBreakIterator::getLocale" => "Get the locale associated with the object",
    "IntlBreakIterator::getPartsIterator" => "Create iterator for navigating fragments between boundaries",
    "IntlBreakIterator::getText" => "Get the text being scanned",
    "IntlBreakIterator::isBoundary" => "Tell whether an offset is a boundaryʼs offset",
    "IntlBreakIterator::last" => "Set the iterator position to index beyond the last character",
    "IntlBreakIterator::next" => "Advance the iterator the next boundary",
    "IntlBreakIterator::preceding" => "Set the iterator position to the first boundary before an offset",
    "IntlBreakIterator::previous" => "Set the iterator position to the boundary immediately before the current",
    "IntlBreakIterator::setText" => "Set the text being scanned",
    "IntlBreakIterator::__construct" => "Private constructor for disallowing instantiation",
    "IntlCalendar::add" => "Add a (signed) amount of time to a field",
    "IntlCalendar::after" => "Whether this objectʼs time is after that of the passed object",
    "IntlCalendar::before" => "Whether this objectʼs time is before that of the passed object",
    "IntlCalendar::clear" => "Clear a field or all fields",
    "IntlCalendar::createInstance" => "Create a new IntlCalendar",
    "IntlCalendar::equals" => "Compare time of two IntlCalendar objects for equality",
    "IntlCalendar::fieldDifference" => "Calculate difference between given time and this objectʼs time",
    "IntlCalendar::fromDateTime" => "Create an IntlCalendar from a DateTime object or string",
    "IntlCalendar::get" => "Get the value for a field",
    "IntlCalendar::getActualMaximum" => "The maximum value for a field, considering the objectʼs current time",
    "IntlCalendar::getActualMinimum" => "The minimum value for a field, considering the objectʼs current time",
    "IntlCalendar::getAvailableLocales" => "Get array of locales for which there is data",
    "IntlCalendar::getDayOfWeekType" => "Tell whether a day is a weekday, weekend or a day that has a transition between the two",
    "IntlCalendar::getErrorCode" => "Get last error code on the object",
    "IntlCalendar::getErrorMessage" => "Get last error message on the object",
    "IntlCalendar::getFirstDayOfWeek" => "Get the first day of the week for the calendarʼs locale",
    "IntlCalendar::getGreatestMinimum" => "Get the largest local minimum value for a field",
    "IntlCalendar::getKeywordValuesForLocale" => "Get set of locale keyword values",
    "IntlCalendar::getLeastMaximum" => "Get the smallest local maximum for a field",
    "IntlCalendar::getLocale" => "Get the locale associated with the object",
    "IntlCalendar::getMaximum" => "Get the global maximum value for a field",
    "IntlCalendar::getMinimalDaysInFirstWeek" => "Get minimal number of days the first week in a year or month can have",
    "IntlCalendar::getMinimum" => "Get the global minimum value for a field",
    "IntlCalendar::getNow" => "Get number representing the current time",
    "IntlCalendar::getRepeatedWallTimeOption" => "Get behavior for handling repeating wall time",
    "IntlCalendar::getSkippedWallTimeOption" => "Get behavior for handling skipped wall time",
    "IntlCalendar::getTime" => "Get time currently represented by the object",
    "IntlCalendar::getTimeZone" => "Get the objectʼs timezone",
    "IntlCalendar::getType" => "Get the calendar type",
    "IntlCalendar::getWeekendTransition" => "Get time of the day at which weekend begins or ends",
    "IntlCalendar::inDaylightTime" => "Whether the objectʼs time is in Daylight Savings Time",
    "IntlCalendar::isEquivalentTo" => "Whether another calendar is equal but for a different time",
    "IntlCalendar::isLenient" => "Whether date/time interpretation is in lenient mode",
    "IntlCalendar::isSet" => "Whether a field is set",
    "IntlCalendar::isWeekend" => "Whether a certain date/time is in the weekend",
    "IntlCalendar::roll" => "Add value to field without carrying into more significant fields",
    "IntlCalendar::set" => "Set a time field or several common fields at once",
    "IntlCalendar::setFirstDayOfWeek" => "Set the day on which the week is deemed to start",
    "IntlCalendar::setLenient" => "Set whether date/time interpretation is to be lenient",
    "IntlCalendar::setMinimalDaysInFirstWeek" => "Set minimal number of days the first week in a year or month can have",
    "IntlCalendar::setRepeatedWallTimeOption" => "Set behavior for handling repeating wall times at negative timezone offset transitions",
    "IntlCalendar::setSkippedWallTimeOption" => "Set behavior for handling skipped wall times at positive timezone offset transitions",
    "IntlCalendar::setTime" => "Set the calendar time in milliseconds since the epoch",
    "IntlCalendar::setTimeZone" => "Set the timezone used by this calendar",
    "IntlCalendar::toDateTime" => "Convert an IntlCalendar into a DateTime object",
    "IntlCalendar::__construct" => "Private constructor for disallowing instantiation",
    "IntlChar::charAge" => "Get the &quot;age&quot; of the code point",
    "IntlChar::charDigitValue" => "Get the decimal digit value of a decimal digit character",
    "IntlChar::charDirection" => "Get bidirectional category value for a code point",
    "IntlChar::charFromName" => "Find Unicode character by name and return its code point value",
    "IntlChar::charMirror" => "Get the &quot;mirror-image&quot; character for a code point",
    "IntlChar::charName" => "Retrieve the name of a Unicode character",
    "IntlChar::charType" => "Get the general category value for a code point",
    "IntlChar::chr" => "Return Unicode character by code point value",
    "IntlChar::digit" => "Get the decimal digit value of a code point for a given radix",
    "IntlChar::enumCharNames" => "Enumerate all assigned Unicode characters within a range",
    "IntlChar::enumCharTypes" => "Enumerate all code points with their Unicode general categories",
    "IntlChar::foldCase" => "Perform case folding on a code point",
    "IntlChar::forDigit" => "Get character representation for a given digit and radix",
    "IntlChar::getBidiPairedBracket" => "Get the paired bracket character for a code point",
    "IntlChar::getBlockCode" => "Get the Unicode allocation block containing a code point",
    "IntlChar::getCombiningClass" => "Get the combining class of a code point",
    "IntlChar::getIntPropertyMaxValue" => "Get the max value for a Unicode property",
    "IntlChar::getIntPropertyMinValue" => "Get the min value for a Unicode property",
    "IntlChar::getIntPropertyValue" => "Get the value for a Unicode property for a code point",
    "IntlChar::getNumericValue" => "Get the numeric value for a Unicode code point",
    "IntlChar::getPropertyEnum" => "Get the property constant value for a given property name",
    "IntlChar::getPropertyName" => "Get the Unicode name for a property",
    "IntlChar::getPropertyValueEnum" => "Get the property value for a given value name",
    "IntlChar::getPropertyValueName" => "Get the Unicode name for a property value",
    "IntlChar::getUnicodeVersion" => "Get the Unicode version",
    "IntlChar::hasBinaryProperty" => "Check a binary Unicode property for a code point",
    "IntlChar::isalnum" => "Check if code point is an alphanumeric character",
    "IntlChar::isalpha" => "Check if code point is a letter character",
    "IntlChar::isbase" => "Check if code point is a base character",
    "IntlChar::isblank" => "Check if code point is a &quot;blank&quot; or &quot;horizontal space&quot; character",
    "IntlChar::iscntrl" => "Check if code point is a control character",
    "IntlChar::isdefined" => "Check whether the code point is defined",
    "IntlChar::isdigit" => "Check if code point is a digit character",
    "IntlChar::isgraph" => "Check if code point is a graphic character",
    "IntlChar::isIDIgnorable" => "Check if code point is an ignorable character",
    "IntlChar::isIDPart" => "Check if code point is permissible in an identifier",
    "IntlChar::isIDStart" => "Check if code point is permissible as the first character in an identifier",
    "IntlChar::isISOControl" => "Check if code point is an ISO control code",
    "IntlChar::isJavaIDPart" => "Check if code point is permissible in a Java identifier",
    "IntlChar::isJavaIDStart" => "Check if code point is permissible as the first character in a Java identifier",
    "IntlChar::isJavaSpaceChar" => "Check if code point is a space character according to Java",
    "IntlChar::islower" => "Check if code point is a lowercase letter",
    "IntlChar::isMirrored" => "Check if code point has the Bidi_Mirrored property",
    "IntlChar::isprint" => "Check if code point is a printable character",
    "IntlChar::ispunct" => "Check if code point is punctuation character",
    "IntlChar::isspace" => "Check if code point is a space character",
    "IntlChar::istitle" => "Check if code point is a titlecase letter",
    "IntlChar::isUAlphabetic" => "Check if code point has the Alphabetic Unicode property",
    "IntlChar::isULowercase" => "Check if code point has the Lowercase Unicode property",
    "IntlChar::isupper" => "Check if code point has the general category &quot;Lu&quot; (uppercase letter)",
    "IntlChar::isUUppercase" => "Check if code point has the Uppercase Unicode property",
    "IntlChar::isUWhiteSpace" => "Check if code point has the White_Space Unicode property",
    "IntlChar::isWhitespace" => "Check if code point is a whitespace character according to ICU",
    "IntlChar::isxdigit" => "Check if code point is a hexadecimal digit",
    "IntlChar::ord" => "Return Unicode code point value of character",
    "IntlChar::tolower" => "Make Unicode character lowercase",
    "IntlChar::totitle" => "Make Unicode character titlecase",
    "IntlChar::toupper" => "Make Unicode character uppercase",
    "IntlCodePointBreakIterator::getLastCodePoint" => "Get last code point passed over after advancing or receding the iterator",
    "IntlDateFormatter::create" => "Create a date formatter",
    "IntlDateFormatter::format" => "Format the date/time value as a string",
    "IntlDateFormatter::formatObject" => "Formats an object",
    "IntlDateFormatter::getCalendar" => "Get the calendar type used for the IntlDateFormatter",
    "IntlDateFormatter::getCalendarObject" => "Get copy of formatterʼs calendar object",
    "IntlDateFormatter::getDateType" => "Get the datetype used for the IntlDateFormatter",
    "IntlDateFormatter::getErrorCode" => "Get the error code from last operation",
    "IntlDateFormatter::getErrorMessage" => "Get the error text from the last operation",
    "IntlDateFormatter::getLocale" => "Get the locale used by formatter",
    "IntlDateFormatter::getPattern" => "Get the pattern used for the IntlDateFormatter",
    "IntlDateFormatter::getTimeType" => "Get the timetype used for the IntlDateFormatter",
    "IntlDateFormatter::getTimeZone" => "Get formatterʼs timezone",
    "IntlDateFormatter::getTimeZoneId" => "Get the timezone-id used for the IntlDateFormatter",
    "IntlDateFormatter::isLenient" => "Get the lenient used for the IntlDateFormatter",
    "IntlDateFormatter::localtime" => "Parse string to a field-based time value",
    "IntlDateFormatter::parse" => "Parse string to a timestamp value",
    "IntlDateFormatter::setCalendar" => "Sets the calendar type used by the formatter",
    "IntlDateFormatter::setLenient" => "Set the leniency of the parser",
    "IntlDateFormatter::setPattern" => "Set the pattern used for the IntlDateFormatter",
    "IntlDateFormatter::setTimeZone" => "Sets formatterʼs timezone",
    "IntlDateFormatter::setTimeZoneId" => "Sets the time zone to use",
    "IntlGregorianCalendar::getGregorianChange" => "Get the Gregorian Calendar change date",
    "IntlGregorianCalendar::isLeapYear" => "Determine if the given year is a leap year",
    "IntlGregorianCalendar::setGregorianChange" => "Set the Gregorian Calendar the change date",
    "IntlGregorianCalendar::__construct" => "Create the Gregorian Calendar class",
    "IntlIterator::current" => "Get the current element",
    "IntlIterator::key" => "Get the current key",
    "IntlIterator::next" => "Move forward to the next element",
    "IntlIterator::rewind" => "Rewind the iterator to the first element",
    "IntlIterator::valid" => "Check if current position is valid",
    "IntlPartsIterator::getBreakIterator" => "Get IntlBreakIterator backing this parts iterator",
    "IntlRuleBasedBreakIterator::getBinaryRules" => "Get the binary form of compiled rules",
    "IntlRuleBasedBreakIterator::getRules" => "Get the rule set used to create this object",
    "IntlRuleBasedBreakIterator::getRuleStatus" => "Get the largest status value from the break rules that determined the current break position",
    "IntlRuleBasedBreakIterator::getRuleStatusVec" => "Get the status values from the break rules that determined the current break position",
    "IntlRuleBasedBreakIterator::__construct" => "Create iterator from ruleset",
    "IntlTimeZone::countEquivalentIDs" => "Get the number of IDs in the equivalency group that includes the given ID",
    "IntlTimeZone::createDefault" => "Create a new copy of the default timezone for this host",
    "IntlTimeZone::createTimeZone" => "Create a timezone object for the given ID",
    "IntlTimeZone::createTimeZoneIDEnumeration" => "Get an enumeration over system time zone IDs with the given filter conditions",
    "IntlTimeZone::fromDateTimeZone" => "Create a timezone object from DateTimeZone",
    "IntlTimeZone::getCanonicalID" => "Get the canonical system timezone ID or the normalized custom time zone ID for the given time zone ID",
    "IntlTimeZone::getDisplayName" => "Get a name of this time zone suitable for presentation to the user",
    "IntlTimeZone::getDSTSavings" => "Get the amount of time to be added to local standard time to get local wall clock time",
    "IntlTimeZone::getEquivalentID" => "Get an ID in the equivalency group that includes the given ID",
    "IntlTimeZone::getErrorCode" => "Get last error code on the object",
    "IntlTimeZone::getErrorMessage" => "Get last error message on the object",
    "IntlTimeZone::getGMT" => "Create GMT (UTC) timezone",
    "IntlTimeZone::getID" => "Get timezone ID",
    "IntlTimeZone::getIDForWindowsID" => "Translate a Windows timezone into a system timezone",
    "IntlTimeZone::getOffset" => "Get the time zone raw and GMT offset for the given moment in time",
    "IntlTimeZone::getRawOffset" => "Get the raw GMT offset (before taking daylight savings time into account",
    "IntlTimeZone::getRegion" => "Get the region code associated with the given system time zone ID",
    "IntlTimeZone::getTZDataVersion" => "Get the timezone data version currently used by ICU",
    "IntlTimeZone::getUnknown" => "Get the &quot;unknown&quot; time zone",
    "IntlTimeZone::getWindowsID" => "Translate a system timezone into a Windows timezone",
    "IntlTimeZone::hasSameRules" => "Check if this zone has the same rules and offset as another zone",
    "IntlTimeZone::toDateTimeZone" => "Convert to DateTimeZone object",
    "IntlTimeZone::useDaylightTime" => "Check if this time zone uses daylight savings time",
    "intval" => "Get the integer value of a variable",
    "iptcembed" => "Embeds binary IPTC data into a JPEG image",
    "iptcparse" => "Parse a binary IPTC block into single tags",
    "isset" => "Determine if a variable is set and is not NULL",
    "Iterator::current" => "Return the current element",
    "Iterator::key" => "Return the key of the current element",
    "Iterator::next" => "Move forward to next element",
    "Iterator::rewind" => "Rewind the Iterator to the first element",
    "Iterator::valid" => "Checks if current position is valid",
    "IteratorAggregate::getIterator" => "Retrieve an external iterator",
    "IteratorIterator::current" => "Get the current value",
    "IteratorIterator::getInnerIterator" => "Get the inner iterator",
    "IteratorIterator::key" => "Get the key of the current element",
    "IteratorIterator::next" => "Forward to the next element",
    "IteratorIterator::rewind" => "Rewind to the first element",
    "IteratorIterator::valid" => "Checks if the iterator is valid",
    "IteratorIterator::__construct" => "Create an iterator from anything that is traversable",
    "jddayofweek" => "Returns the day of the week",
    "jdmonthname" => "Returns a month name",
    "jdtofrench" => "Converts a Julian Day Count to the French Republican Calendar",
    "jdtogregorian" => "Converts Julian Day Count to Gregorian date",
    "jdtojewish" => "Converts a Julian day count to a Jewish calendar date",
    "jdtojulian" => "Converts a Julian Day Count to a Julian Calendar Date",
    "jdtounix" => "Convert Julian Day to Unix timestamp",
    "jewishtojd" => "Converts a date in the Jewish Calendar to Julian Day Count",
    "join" => "Alias of implode",
    "JsonSerializable::jsonSerialize" => "Specify data which should be serialized to JSON",
    "Judy::byCount" => "Locate the Nth index present in the Judy array",
    "Judy::count" => "Count the number of elements in the Judy array",
    "Judy::first" => "Search for the first index in the Judy array",
    "Judy::firstEmpty" => "Search for the first absent index in the Judy array",
    "Judy::free" => "Free the entire Judy array",
    "Judy::getType" => "Return the type of the current Judy array",
    "Judy::last" => "Search for the last index in the Judy array",
    "Judy::lastEmpty" => "Search for the last absent index in the Judy array",
    "Judy::memoryUsage" => "Return the memory used by the Judy array",
    "Judy::next" => "Search for the next index in the Judy array",
    "Judy::nextEmpty" => "Search for the next absent index in the Judy array",
    "Judy::offsetExists" => "Whether a offset exists",
    "Judy::offsetGet" => "Offset to retrieve",
    "Judy::offsetSet" => "Offset to set",
    "Judy::offsetUnset" => "Offset to unset",
    "Judy::prev" => "Search for the previous index in the Judy array",
    "Judy::prevEmpty" => "Search for the previous absent index in the Judy array",
    "Judy::size" => "Return the size of the current Judy array",
    "Judy::__construct" => "Construct a new Judy object",
    "Judy::__destruct" => "Destruct a Judy object",
    "juliantojd" => "Converts a Julian Calendar date to Julian Day Count",
    "key" => "Fetch a key from an array",
    "krsort" => "Sort an array by key in reverse order",
    "ksort" => "Sort an array by key",
    "KTaglib_MPEG_AudioProperties::getBitrate" => "Returns the bitrate of the MPEG file",
    "KTaglib_MPEG_AudioProperties::getChannels" => "Returns the amount of channels of a MPEG file",
    "KTaglib_MPEG_AudioProperties::getLayer" => "Returns the layer of a MPEG file",
    "KTaglib_MPEG_AudioProperties::getLength" => "Returns the length of a MPEG file",
    "KTaglib_MPEG_AudioProperties::getSampleBitrate" => "Returns the sample bitrate of a MPEG file",
    "KTaglib_MPEG_AudioProperties::getVersion" => "Returns the version of a MPEG file",
    "KTaglib_MPEG_AudioProperties::isCopyrighted" => "Returns the copyright status of an MPEG file",
    "KTaglib_MPEG_AudioProperties::isOriginal" => "Returns if the file is marked as the original file",
    "KTaglib_MPEG_AudioProperties::isProtectionEnabled" => "Returns if protection mechanisms of an MPEG file are enabled",
    "KTaglib_MPEG_File::getAudioProperties" => "Returns an object that provides access to the audio properties",
    "KTaglib_MPEG_File::__construct" => "Opens a new file",
    "KTaglib_Tag::getAlbum" => "Returns the album string from a ID3 tag",
    "KTaglib_Tag::getArtist" => "Returns the artist string from a ID3 tag",
    "KTaglib_Tag::getComment" => "Returns the comment from a ID3 tag",
    "KTaglib_Tag::getGenre" => "Returns the genre from a ID3 tag",
    "KTaglib_Tag::getTitle" => "Returns the title string from a ID3 tag",
    "KTaglib_Tag::getTrack" => "Returns the track number from a ID3 tag",
    "KTaglib_Tag::getYear" => "Returns the year from a ID3 tag",
    "KTaglib_Tag::isEmpty" => "Returns true if the tag is empty",
    "Lapack::eigenValues" => "This function returns the eigenvalues for a given square matrix",
    "Lapack::identity" => "Return an identity matrix",
    "Lapack::leastSquaresByFactorisation" => "Calculate the linear least squares solution of a matrix using QR factorisation",
    "Lapack::leastSquaresBySVD" => "Solve the linear least squares problem, using SVD",
    "Lapack::pseudoInverse" => "Calculate the inverse of a matrix",
    "Lapack::singularValues" => "Calculated the singular values of a matrix",
    "Lapack::solveLinearEquation" => "Solve a system of linear equations",
    "lcfirst" => "Make a string's first character lowercase",
    "lchgrp" => "Changes group ownership of symlink",
    "lchown" => "Changes user ownership of symlink",
    "levenshtein" => "Calculate Levenshtein distance between two strings",
    "LimitIterator::current" => "Get current element",
    "LimitIterator::getInnerIterator" => "Get inner iterator",
    "LimitIterator::getPosition" => "Return the current position",
    "LimitIterator::key" => "Get current key",
    "LimitIterator::next" => "Move the iterator forward",
    "LimitIterator::rewind" => "Rewind the iterator to the specified starting offset",
    "LimitIterator::seek" => "Seek to the given position",
    "LimitIterator::valid" => "Check whether the current element is valid",
    "LimitIterator::__construct" => "Construct a LimitIterator",
    "link" => "Create a hard link",
    "linkinfo" => "Gets information about a link",
    "list" => "Assign variables as if they were an array",
    "Locale::acceptFromHttp" => "Tries to find out best available locale based on HTTP &quot;Accept-Language&quot; header",
    "Locale::canonicalize" => "Canonicalize the locale string",
    "Locale::composeLocale" => "Returns a correctly ordered and delimited locale ID",
    "Locale::filterMatches" => "Checks if a language tag filter matches with locale",
    "Locale::getAllVariants" => "Gets the variants for the input locale",
    "Locale::getDefault" => "Gets the default locale value from the INTL global 'default_locale'",
    "Locale::getDisplayLanguage" => "Returns an appropriately localized display name for language of the inputlocale",
    "Locale::getDisplayName" => "Returns an appropriately localized display name for the input locale",
    "Locale::getDisplayRegion" => "Returns an appropriately localized display name for region of the input locale",
    "Locale::getDisplayScript" => "Returns an appropriately localized display name for script of the input locale",
    "Locale::getDisplayVariant" => "Returns an appropriately localized display name for variants of the input locale",
    "Locale::getKeywords" => "Gets the keywords for the input locale",
    "Locale::getPrimaryLanguage" => "Gets the primary language for the input locale",
    "Locale::getRegion" => "Gets the region for the input locale",
    "Locale::getScript" => "Gets the script for the input locale",
    "Locale::lookup" => "Searches the language tag list for the best match to the language",
    "Locale::parseLocale" => "Returns a key-value array of locale ID subtag elements",
    "Locale::setDefault" => "Sets the default runtime locale",
    "localeconv" => "Get numeric formatting information",
    "localtime" => "Get the local time",
    "log" => "Natural logarithm",
    "lstat" => "Gives information about a file or symbolic link",
    "ltrim" => "Strip whitespace (or other characters) from the beginning of a string",
    "Lua::assign" => "Assign a PHP variable to Lua",
    "Lua::call" => "Call Lua functions",
    "Lua::eval" => "Evaluate a string as Lua code",
    "Lua::getVersion" => "The getversion purpose",
    "Lua::include" => "Parse a Lua script file",
    "Lua::registerCallback" => "Register a PHP function to Lua",
    "Lua::__construct" => "Lua constructor",
    "LuaClosure::__invoke" => "Invoke luaclosure",
    "mail" => "Send mail",
    "main" => "Dummy for main",
    "max" => "Find highest value",
    "Memcache::add" => "Add an item to the server",
    "Memcache::addServer" => "Add a memcached server to connection pool",
    "Memcache::close" => "Close memcached server connection",
    "Memcache::connect" => "Open memcached server connection",
    "Memcache::decrement" => "Decrement item's value",
    "Memcache::delete" => "Delete item from the server",
    "Memcache::flush" => "Flush all existing items at the server",
    "Memcache::get" => "Retrieve item from the server",
    "Memcache::getExtendedStats" => "Get statistics from all servers in pool",
    "Memcache::getServerStatus" => "Returns server status",
    "Memcache::getStats" => "Get statistics of the server",
    "Memcache::getVersion" => "Return version of the server",
    "Memcache::increment" => "Increment item's value",
    "Memcache::pconnect" => "Open memcached server persistent connection",
    "Memcache::replace" => "Replace value of the existing item",
    "Memcache::set" => "Store data at the server",
    "Memcache::setCompressThreshold" => "Enable automatic compression of large values",
    "Memcache::setServerParams" => "Changes server parameters and status at runtime",
    "Memcached::add" => "Add an item under a new key",
    "Memcached::addByKey" => "Add an item under a new key on a specific server",
    "Memcached::addServer" => "Add a server to the server pool",
    "Memcached::addServers" => "Add multiple servers to the server pool",
    "Memcached::append" => "Append data to an existing item",
    "Memcached::appendByKey" => "Append data to an existing item on a specific server",
    "Memcached::cas" => "Compare and swap an item",
    "Memcached::casByKey" => "Compare and swap an item on a specific server",
    "Memcached::decrement" => "Decrement numeric item's value",
    "Memcached::decrementByKey" => "Decrement numeric item's value, stored on a specific server",
    "Memcached::delete" => "Delete an item",
    "Memcached::deleteByKey" => "Delete an item from a specific server",
    "Memcached::deleteMulti" => "Delete multiple items",
    "Memcached::deleteMultiByKey" => "Delete multiple items from a specific server",
    "Memcached::fetch" => "Fetch the next result",
    "Memcached::fetchAll" => "Fetch all the remaining results",
    "Memcached::flush" => "Invalidate all items in the cache",
    "Memcached::get" => "Retrieve an item",
    "Memcached::getAllKeys" => "Gets the keys stored on all the servers",
    "Memcached::getByKey" => "Retrieve an item from a specific server",
    "Memcached::getDelayed" => "Request multiple items",
    "Memcached::getDelayedByKey" => "Request multiple items from a specific server",
    "Memcached::getMulti" => "Retrieve multiple items",
    "Memcached::getMultiByKey" => "Retrieve multiple items from a specific server",
    "Memcached::getOption" => "Retrieve a Memcached option value",
    "Memcached::getResultCode" => "Return the result code of the last operation",
    "Memcached::getResultMessage" => "Return the message describing the result of the last operation",
    "Memcached::getServerByKey" => "Map a key to a server",
    "Memcached::getServerList" => "Get the list of the servers in the pool",
    "Memcached::getStats" => "Get server pool statistics",
    "Memcached::getVersion" => "Get server pool version info",
    "Memcached::increment" => "Increment numeric item's value",
    "Memcached::incrementByKey" => "Increment numeric item's value, stored on a specific server",
    "Memcached::isPersistent" => "Check if a persitent connection to memcache is being used",
    "Memcached::isPristine" => "Check if the instance was recently created",
    "Memcached::prepend" => "Prepend data to an existing item",
    "Memcached::prependByKey" => "Prepend data to an existing item on a specific server",
    "Memcached::quit" => "Close any open connections",
    "Memcached::replace" => "Replace the item under an existing key",
    "Memcached::replaceByKey" => "Replace the item under an existing key on a specific server",
    "Memcached::resetServerList" => "Clears all servers from the server list",
    "Memcached::set" => "Store an item",
    "Memcached::setByKey" => "Store an item on a specific server",
    "Memcached::setMulti" => "Store multiple items",
    "Memcached::setMultiByKey" => "Store multiple items on a specific server",
    "Memcached::setOption" => "Set a Memcached option",
    "Memcached::setOptions" => "Set Memcached options",
    "Memcached::setSaslAuthData" => "Set the credentials to use for authentication",
    "Memcached::touch" => "Set a new expiration on an item",
    "Memcached::touchByKey" => "Set a new expiration on an item on a specific server",
    "Memcached::__construct" => "Create a Memcached instance",
    "MessageFormatter::create" => "Constructs a new Message Formatter",
    "MessageFormatter::format" => "Format the message",
    "MessageFormatter::formatMessage" => "Quick format message",
    "MessageFormatter::getErrorCode" => "Get the error code from last operation",
    "MessageFormatter::getErrorMessage" => "Get the error text from the last operation",
    "MessageFormatter::getLocale" => "Get the locale for which the formatter was created",
    "MessageFormatter::getPattern" => "Get the pattern used by the formatter",
    "MessageFormatter::parse" => "Parse input string according to pattern",
    "MessageFormatter::parseMessage" => "Quick parse input string",
    "MessageFormatter::setPattern" => "Set the pattern used by the formatter",
    "metaphone" => "Calculate the metaphone key of a string",
    "mhash" => "Computes hash",
    "microtime" => "Return current Unix timestamp with microseconds",
    "min" => "Find lowest value",
    "mkdir" => "Makes directory",
    "mktime" => "Get Unix timestamp for a date",
    "Mongo::connectUtil" => "Connects with a database server",
    "Mongo::getPoolSize" => "Get pool size for connection pools",
    "Mongo::getSlave" => "Returns the address being used by this for slaveOkay reads",
    "Mongo::getSlaveOkay" => "Get slaveOkay setting for this connection",
    "Mongo::poolDebug" => "Returns information about all connection pools",
    "Mongo::setPoolSize" => "Set the size for future connection pools",
    "Mongo::setSlaveOkay" => "Change slaveOkay setting for this connection",
    "Mongo::switchSlave" => "Choose a new secondary for slaveOkay reads",
    "Mongo::__construct" => "The __construct purpose",
    "MongoBinData::__construct" => "Creates a new binary data object",
    "MongoBinData::__toString" => "The string representation of this binary data object",
    "MongoClient::close" => "Closes this connection",
    "MongoClient::connect" => "Connects to a database server",
    "MongoClient::dropDB" => "Drops a database [deprecated]",
    "MongoClient::getConnections" => "Return info about all open connections",
    "MongoClient::getHosts" => "Updates status for all associated hosts",
    "MongoClient::getReadPreference" => "Get the read preference for this connection",
    "MongoClient::getWriteConcern" => "Get the write concern for this connection",
    "MongoClient::killCursor" => "Kills a specific cursor on the server",
    "MongoClient::listDBs" => "Lists all of the databases available",
    "MongoClient::selectCollection" => "Gets a database collection",
    "MongoClient::selectDB" => "Gets a database",
    "MongoClient::setReadPreference" => "Set the read preference for this connection",
    "MongoClient::setWriteConcern" => "Set the write concern for this connection",
    "MongoClient::__construct" => "Creates a new database connection object",
    "MongoClient::__get" => "Gets a database",
    "MongoClient::__toString" => "String representation of this connection",
    "MongoCode::__construct" => "Creates a new code object",
    "MongoCode::__toString" => "Returns this code as a string",
    "MongoCollection::aggregate" => "Perform an aggregation using the aggregation framework",
    "MongoCollection::aggregateCursor" => "Execute an aggregation pipeline command and retrieve results through a cursor",
    "MongoCollection::batchInsert" => "Inserts multiple documents into this collection",
    "MongoCollection::count" => "Counts the number of documents in this collection",
    "MongoCollection::createDBRef" => "Creates a database reference",
    "MongoCollection::createIndex" => "Creates an index on the specified field(s) if it does not already exist",
    "MongoCollection::deleteIndex" => "Deletes an index from this collection",
    "MongoCollection::deleteIndexes" => "Delete all indices for this collection",
    "MongoCollection::distinct" => "Retrieve a list of distinct values for the given key across a collection",
    "MongoCollection::drop" => "Drops this collection",
    "MongoCollection::ensureIndex" => "Creates an index on the specified field(s) if it does not already exist",
    "MongoCollection::findAndModify" => "Update a document and return it",
    "MongoCollection::findOne" => "Queries this collection, returning a single element",
    "MongoCollection::getDBRef" => "Fetches the document pointed to by a database reference",
    "MongoCollection::getIndexInfo" => "Returns information about indexes on this collection",
    "MongoCollection::getName" => "Returns this collection's name",
    "MongoCollection::getReadPreference" => "Get the read preference for this collection",
    "MongoCollection::getSlaveOkay" => "Get slaveOkay setting for this collection",
    "MongoCollection::getWriteConcern" => "Get the write concern for this collection",
    "MongoCollection::group" => "Performs an operation similar to SQL's GROUP BY command",
    "MongoCollection::insert" => "Inserts a document into the collection",
    "MongoCollection::parallelCollectionScan" => "Returns an array of cursors to iterator over a full collection in parallel",
    "MongoCollection::remove" => "Remove records from this collection",
    "MongoCollection::save" => "Saves a document to this collection",
    "MongoCollection::setReadPreference" => "Set the read preference for this collection",
    "MongoCollection::setSlaveOkay" => "Change slaveOkay setting for this collection",
    "MongoCollection::setWriteConcern" => "Set the write concern for this database",
    "MongoCollection::toIndexString" => "Converts keys specifying an index to its identifying string",
    "MongoCollection::update" => "Update records based on a given criteria",
    "MongoCollection::validate" => "Validates this collection",
    "MongoCollection::__construct" => "Creates a new collection",
    "MongoCollection::__get" => "Gets a collection",
    "MongoCommandCursor::batchSize" => "Limits the number of elements returned in one batch",
    "MongoCommandCursor::createFromDocument" => "Create a new command cursor from an existing command response document",
    "MongoCommandCursor::current" => "Returns the current element",
    "MongoCommandCursor::dead" => "Checks if there are results that have not yet been sent from the database",
    "MongoCommandCursor::getReadPreference" => "Get the read preference for this command",
    "MongoCommandCursor::info" => "Gets information about the cursor's creation and iteration",
    "MongoCommandCursor::key" => "Returns the current result's index within the result set",
    "MongoCommandCursor::next" => "Advances the cursor to the next result",
    "MongoCommandCursor::rewind" => "Executes the command and resets the cursor to the start of the result set",
    "MongoCommandCursor::setReadPreference" => "Set the read preference for this command",
    "MongoCommandCursor::timeout" => "Sets a client-side timeout for this command",
    "MongoCommandCursor::valid" => "Checks if the cursor is reading a valid result",
    "MongoCommandCursor::__construct" => "Create a new command cursor",
    "MongoCursor::addOption" => "Adds a top-level key/value pair to a query",
    "MongoCursor::awaitData" => "Sets whether this cursor will wait for a while for a tailable cursor to return more data",
    "MongoCursor::batchSize" => "Limits the number of elements returned in one batch",
    "MongoCursor::count" => "Counts the number of results for this query",
    "MongoCursor::current" => "Returns the current element",
    "MongoCursor::dead" => "Checks if there are results that have not yet been sent from the database",
    "MongoCursor::doQuery" => "Execute the query",
    "MongoCursor::explain" => "Return an explanation of the query, often useful for optimization and debugging",
    "MongoCursor::fields" => "Sets the fields for a query",
    "MongoCursor::getNext" => "Advances the cursor to the next result, and returns that result",
    "MongoCursor::getReadPreference" => "Get the read preference for this query",
    "MongoCursor::hasNext" => "Checks if there are any more elements in this cursor",
    "MongoCursor::hint" => "Gives the database a hint about the query",
    "MongoCursor::immortal" => "Sets whether this cursor will timeout",
    "MongoCursor::info" => "Gets information about the cursor's creation and iteration",
    "MongoCursor::key" => "Returns the current result's _id, or its index within the result set",
    "MongoCursor::limit" => "Limits the number of results returned",
    "MongoCursor::maxTimeMS" => "Sets a server-side timeout for this query",
    "MongoCursor::next" => "Advances the cursor to the next result, and returns that result",
    "MongoCursor::partial" => "If this query should fetch partial results from mongos if a shard is down",
    "MongoCursor::reset" => "Clears the cursor",
    "MongoCursor::rewind" => "Returns the cursor to the beginning of the result set",
    "MongoCursor::setFlag" => "Sets arbitrary flags in case there is no method available the specific flag",
    "MongoCursor::setReadPreference" => "Set the read preference for this query",
    "MongoCursor::skip" => "Skips a number of results",
    "MongoCursor::slaveOkay" => "Sets whether this query can be done on a secondary [deprecated]",
    "MongoCursor::snapshot" => "Use snapshot mode for the query",
    "MongoCursor::sort" => "Sorts the results by given fields",
    "MongoCursor::tailable" => "Sets whether this cursor will be left open after fetching the last results",
    "MongoCursor::timeout" => "Sets a client-side timeout for this query",
    "MongoCursor::valid" => "Checks if the cursor is reading a valid result",
    "MongoCursor::__construct" => "Create a new cursor",
    "MongoCursorException::getHost" => "The hostname of the server that encountered the error",
    "MongoCursorInterface::batchSize" => "Limits the number of elements returned in one batch",
    "MongoCursorInterface::dead" => "Checks if there are results that have not yet been sent from the database",
    "MongoCursorInterface::getReadPreference" => "Get the read preference for this query",
    "MongoCursorInterface::info" => "Gets information about the cursor's creation and iteration",
    "MongoCursorInterface::setReadPreference" => "Set the read preference for this query",
    "MongoCursorInterface::timeout" => "Sets a client-side timeout for this query",
    "MongoDate::toDateTime" => "Returns a DateTime object representing this date",
    "MongoDate::__construct" => "Creates a new date",
    "MongoDate::__toString" => "Returns a string representation of this date",
    "MongoDB::authenticate" => "Log in to this database",
    "MongoDB::command" => "Execute a database command",
    "MongoDB::createCollection" => "Creates a collection",
    "MongoDB::createDBRef" => "Creates a database reference",
    "MongoDB::drop" => "Drops this database",
    "MongoDB::dropCollection" => "Drops a collection [deprecated]",
    "MongoDB::execute" => "Runs JavaScript code on the database server [deprecated]",
    "MongoDB::forceError" => "Creates a database error",
    "MongoDB::getCollectionInfo" => "Returns information about collections in this database",
    "MongoDB::getCollectionNames" => "Gets an array of names for all collections in this database",
    "MongoDB::getDBRef" => "Fetches the document pointed to by a database reference",
    "MongoDB::getGridFS" => "Fetches toolkit for dealing with files stored in this database",
    "MongoDB::getProfilingLevel" => "Gets this database's profiling level",
    "MongoDB::getReadPreference" => "Get the read preference for this database",
    "MongoDB::getSlaveOkay" => "Get slaveOkay setting for this database",
    "MongoDB::getWriteConcern" => "Get the write concern for this database",
    "MongoDB::lastError" => "Check if there was an error on the most recent db operation performed",
    "MongoDB::listCollections" => "Gets an array of MongoCollection objects for all collections in this database",
    "MongoDB::prevError" => "Checks for the last error thrown during a database operation",
    "MongoDB::repair" => "Repairs and compacts this database",
    "MongoDB::resetError" => "Clears any flagged errors on the database",
    "MongoDB::selectCollection" => "Gets a collection",
    "MongoDB::setProfilingLevel" => "Sets this database's profiling level",
    "MongoDB::setReadPreference" => "Set the read preference for this database",
    "MongoDB::setSlaveOkay" => "Change slaveOkay setting for this database",
    "MongoDB::setWriteConcern" => "Set the write concern for this database",
    "MongoDB::__construct" => "Creates a new database",
    "MongoDB::__get" => "Gets a collection",
    "MongoDB" => "MongoDB context option listing",
    "MongoDBRef::create" => "Creates a new database reference",
    "MongoDBRef::get" => "Fetches the object pointed to by a reference",
    "MongoDBRef::isRef" => "Checks if an array is a database reference",
    "MongoDB" => "Registers a new monitoring event subscriber",
    "MongoDB" => "Unregisters an existing monitoring event subscriber",
    "MongoDeleteBatch::__construct" => "Description",
    "MongoGridFS::delete" => "Remove a file and its chunks from the database",
    "MongoGridFS::drop" => "Drops the files and chunks collections",
    "MongoGridFS::find" => "Queries for files",
    "MongoGridFS::findOne" => "Returns a single file matching the criteria",
    "MongoGridFS::get" => "Retrieve a file from the database",
    "MongoGridFS::put" => "Stores a file in the database",
    "MongoGridFS::remove" => "Remove files and their chunks from the database",
    "MongoGridFS::storeBytes" => "Stores a string of bytes in the database",
    "MongoGridFS::storeFile" => "Stores a file in the database",
    "MongoGridFS::storeUpload" => "Stores an uploaded file in the database",
    "MongoGridFS::__construct" => "Creates new file collections",
    "MongoGridFSCursor::current" => "Returns the current file",
    "MongoGridFSCursor::getNext" => "Return the next file to which this cursor points, and advance the cursor",
    "MongoGridFSCursor::key" => "Returns the current result's filename",
    "MongoGridFSCursor::__construct" => "Create a new cursor",
    "MongoGridFSFile::getBytes" => "Returns this file's contents as a string of bytes",
    "MongoGridFSFile::getFilename" => "Returns this file's filename",
    "MongoGridFSFile::getResource" => "Returns a resource that can be used to read the stored file",
    "MongoGridFSFile::getSize" => "Returns this file's size",
    "MongoGridFSFile::write" => "Writes this file to the filesystem",
    "MongoGridfsFile::__construct" => "Create a new GridFS file",
    "MongoId::getHostname" => "Gets the hostname being used for this machine's ids",
    "MongoId::getInc" => "Gets the incremented value to create this id",
    "MongoId::getPID" => "Gets the process ID",
    "MongoId::getTimestamp" => "Gets the number of seconds since the epoch that this id was created",
    "MongoId::isValid" => "Check if a value is a valid ObjectId",
    "MongoId::__construct" => "Creates a new id",
    "MongoId::__toString" => "Returns a hexidecimal representation of this id",
    "MongoInsertBatch::__construct" => "Description",
    "MongoLog::getCallback" => "Gets the previously set callback function",
    "MongoLog::getLevel" => "Gets the level(s) currently being logged",
    "MongoLog::getModule" => "Gets the module(s) currently being logged",
    "MongoLog::setCallback" => "Sets a callback function to be invoked for events",
    "MongoLog::setLevel" => "Sets the level(s) to be logged",
    "MongoLog::setModule" => "Sets the module(s) to be logged",
    "MongoPool::getSize" => "Get pool size for connection pools",
    "MongoPool::info" => "Returns information about all connection pools",
    "MongoPool::setSize" => "Set the size for future connection pools",
    "MongoRegex::__construct" => "Creates a new regular expression",
    "MongoRegex::__toString" => "A string representation of this regular expression",
    "MongoResultException::getDocument" => "Retrieve the full result document",
    "MongoTimestamp::__construct" => "Creates a new timestamp",
    "MongoTimestamp::__toString" => "Returns a string representation of this timestamp",
    "MongoUpdateBatch::__construct" => "Description",
    "MongoWriteBatch::add" => "Adds a write operation to a batch",
    "MongoWriteBatch::execute" => "Executes a batch of write operations",
    "MongoWriteBatch::__construct" => "Creates a new batch of write operations",
    "MongoWriteConcernException::getDocument" => "Get the error document",
    "msql" => "Alias of msql_db_query",
    "MultipleIterator::attachIterator" => "Attaches iterator information",
    "MultipleIterator::containsIterator" => "Checks if an iterator is attached",
    "MultipleIterator::countIterators" => "Gets the number of attached iterator instances",
    "MultipleIterator::current" => "Gets the registered iterator instances",
    "MultipleIterator::detachIterator" => "Detaches an iterator",
    "MultipleIterator::getFlags" => "Gets the flag information",
    "MultipleIterator::key" => "Gets the registered iterator instances",
    "MultipleIterator::next" => "Moves all attached iterator instances forward",
    "MultipleIterator::rewind" => "Rewinds all attached iterator instances",
    "MultipleIterator::setFlags" => "Sets flags",
    "MultipleIterator::valid" => "Checks the validity of sub iterators",
    "MultipleIterator::__construct" => "Constructs a new MultipleIterator",
    "Mutex::create" => "Create a Mutex",
    "Mutex::destroy" => "Destroy Mutex",
    "Mutex::lock" => "Acquire Mutex",
    "Mutex::trylock" => "Attempt to Acquire Mutex",
    "Mutex::unlock" => "Release Mutex",
    "mysqli::" => "Returns the error code for the most recent function call",
    "mysqli::" => "Returns a string description of the last error",
    "mysqli::" => "Retrieves information about the most recently executed query",
    "mysqli::" => "Returns the SQLSTATE error from previous MySQL operation",
    "mysqli::autocommit" => "Turns on or off auto-committing database modifications",
    "mysqli::close" => "Closes a previously opened database connection",
    "mysqli::commit" => "Commits the current transaction",
    "mysqli::debug" => "Performs debugging operations",
    "mysqli::init" => "Initializes MySQLi and returns a resource for use with mysqli_real_connect()",
    "mysqli::kill" => "Asks the server to kill a MySQL thread",
    "mysqli::options" => "Set options",
    "mysqli::ping" => "Pings a server connection, or tries to reconnect if the connection has gone down",
    "mysqli::poll" => "Poll connections",
    "mysqli::prepare" => "Prepare an SQL statement for execution",
    "mysqli::query" => "Performs a query on the database",
    "mysqli::refresh" => "Refreshes",
    "mysqli::rollback" => "Rolls back current transaction",
    "mysqli::savepoint" => "Set a named transaction savepoint",
    "mysqli::stat" => "Gets the current system status",
    "mysqli::__construct" => "Open a new connection to the MySQL server",
    "MysqlndUhConnection::changeUser" => "Changes the user of the specified mysqlnd database connection",
    "MysqlndUhConnection::charsetName" => "Returns the default character set for the database connection",
    "MysqlndUhConnection::close" => "Closes a previously opened database connection",
    "MysqlndUhConnection::connect" => "Open a new connection to the MySQL server",
    "MysqlndUhConnection::endPSession" => "End a persistent connection",
    "MysqlndUhConnection::getAffectedRows" => "Gets the number of affected rows in a previous MySQL operation",
    "MysqlndUhConnection::getErrorNumber" => "Returns the error code for the most recent function call",
    "MysqlndUhConnection::getErrorString" => "Returns a string description of the last error",
    "MysqlndUhConnection::getFieldCount" => "Returns the number of columns for the most recent query",
    "MysqlndUhConnection::getHostInformation" => "Returns a string representing the type of connection used",
    "MysqlndUhConnection::getLastInsertId" => "Returns the auto generated id used in the last query",
    "MysqlndUhConnection::getLastMessage" => "Retrieves information about the most recently executed query",
    "MysqlndUhConnection::getProtocolInformation" => "Returns the version of the MySQL protocol used",
    "MysqlndUhConnection::getServerInformation" => "Returns the version of the MySQL server",
    "MysqlndUhConnection::getServerStatistics" => "Gets the current system status",
    "MysqlndUhConnection::getServerVersion" => "Returns the version of the MySQL server as an integer",
    "MysqlndUhConnection::getSqlstate" => "Returns the SQLSTATE error from previous MySQL operation",
    "MysqlndUhConnection::getStatistics" => "Returns statistics about the client connection",
    "MysqlndUhConnection::getThreadId" => "Returns the thread ID for the current connection",
    "MysqlndUhConnection::getWarningCount" => "Returns the number of warnings from the last query for the given link",
    "MysqlndUhConnection::init" => "Initialize mysqlnd connection",
    "MysqlndUhConnection::killConnection" => "Asks the server to kill a MySQL thread",
    "MysqlndUhConnection::listFields" => "List MySQL table fields",
    "MysqlndUhConnection::listMethod" => "Wrapper for assorted list commands",
    "MysqlndUhConnection::moreResults" => "Check if there are any more query results from a multi query",
    "MysqlndUhConnection::nextResult" => "Prepare next result from multi_query",
    "MysqlndUhConnection::ping" => "Pings a server connection, or tries to reconnect if the connection has gone down",
    "MysqlndUhConnection::query" => "Performs a query on the database",
    "MysqlndUhConnection::queryReadResultsetHeader" => "Read a result set header",
    "MysqlndUhConnection::reapQuery" => "Get result from async query",
    "MysqlndUhConnection::refreshServer" => "Flush or reset tables and caches",
    "MysqlndUhConnection::restartPSession" => "Restart a persistent mysqlnd connection",
    "MysqlndUhConnection::selectDb" => "Selects the default database for database queries",
    "MysqlndUhConnection::sendClose" => "Sends a close command to MySQL",
    "MysqlndUhConnection::sendQuery" => "Sends a query to MySQL",
    "MysqlndUhConnection::serverDumpDebugInformation" => "Dump debugging information into the log for the MySQL server",
    "MysqlndUhConnection::setAutocommit" => "Turns on or off auto-committing database modifications",
    "MysqlndUhConnection::setCharset" => "Sets the default client character set",
    "MysqlndUhConnection::setClientOption" => "Sets a client option",
    "MysqlndUhConnection::setServerOption" => "Sets a server option",
    "MysqlndUhConnection::shutdownServer" => "The shutdownServer purpose",
    "MysqlndUhConnection::simpleCommand" => "Sends a basic COM_* command",
    "MysqlndUhConnection::simpleCommandHandleResponse" => "Process a response for a basic COM_* command send to the client",
    "MysqlndUhConnection::sslSet" => "Used for establishing secure connections using SSL",
    "MysqlndUhConnection::stmtInit" => "Initializes a statement and returns a resource for use with mysqli_statement::prepare",
    "MysqlndUhConnection::storeResult" => "Transfers a result set from the last query",
    "MysqlndUhConnection::txCommit" => "Commits the current transaction",
    "MysqlndUhConnection::txRollback" => "Rolls back current transaction",
    "MysqlndUhConnection::useResult" => "Initiate a result set retrieval",
    "MysqlndUhConnection::__construct" => "The __construct purpose",
    "MysqlndUhPreparedStatement::execute" => "Executes a prepared Query",
    "MysqlndUhPreparedStatement::prepare" => "Prepare an SQL statement for execution",
    "MysqlndUhPreparedStatement::__construct" => "The __construct purpose",
    "natcasesort" => "Sort an array using a case insensitive &quot;natural order&quot; algorithm",
    "natsort" => "Sort an array using a &quot;natural order&quot; algorithm",
    "next" => "Advance the internal pointer of an array",
    "ngettext" => "Plural version of gettext",
    "NoRewindIterator::current" => "Get the current value",
    "NoRewindIterator::getInnerIterator" => "Get the inner iterator",
    "NoRewindIterator::key" => "Get the current key",
    "NoRewindIterator::next" => "Forward to the next element",
    "NoRewindIterator::rewind" => "Prevents the rewind operation on the inner iterator",
    "NoRewindIterator::valid" => "Validates the iterator",
    "NoRewindIterator::__construct" => "Construct a NoRewindIterator",
    "Normalizer::getRawDecomposition" => "Gets the Decomposition_Mapping property for the given UTF-8 encoded code point",
    "Normalizer::normalize" => "Normalizes the input provided and returns the normalized string",
    "NumberFormatter::create" => "Create a number formatter",
    "NumberFormatter::format" => "Format a number",
    "NumberFormatter::formatCurrency" => "Format a currency value",
    "NumberFormatter::getAttribute" => "Get an attribute",
    "NumberFormatter::getErrorCode" => "Get formatter's last error code",
    "NumberFormatter::getErrorMessage" => "Get formatter's last error message",
    "NumberFormatter::getLocale" => "Get formatter locale",
    "NumberFormatter::getPattern" => "Get formatter pattern",
    "NumberFormatter::getSymbol" => "Get a symbol value",
    "NumberFormatter::getTextAttribute" => "Get a text attribute",
    "NumberFormatter::parse" => "Parse a number",
    "NumberFormatter::parseCurrency" => "Parse a currency number",
    "NumberFormatter::setAttribute" => "Set an attribute",
    "NumberFormatter::setPattern" => "Set formatter pattern",
    "NumberFormatter::setSymbol" => "Set a symbol value",
    "NumberFormatter::setTextAttribute" => "Set a text attribute",
    "OAuth::disableDebug" => "Turn off verbose debugging",
    "OAuth::disableRedirects" => "Turn off redirects",
    "OAuth::disableSSLChecks" => "Turn off SSL checks",
    "OAuth::enableDebug" => "Turn on verbose debugging",
    "OAuth::enableRedirects" => "Turn on redirects",
    "OAuth::enableSSLChecks" => "Turn on SSL checks",
    "OAuth::fetch" => "Fetch an OAuth protected resource",
    "OAuth::generateSignature" => "Generate a signature",
    "OAuth::getAccessToken" => "Fetch an access token",
    "OAuth::getCAPath" => "Gets CA information",
    "OAuth::getLastResponse" => "Get the last response",
    "OAuth::getLastResponseHeaders" => "Get headers for last response",
    "OAuth::getLastResponseInfo" => "Get HTTP information about the last response",
    "OAuth::getRequestHeader" => "Generate OAuth header string signature",
    "OAuth::getRequestToken" => "Fetch a request token",
    "OAuth::setAuthType" => "Set authorization type",
    "OAuth::setCAPath" => "Set CA path and info",
    "OAuth::setNonce" => "Set the nonce for subsequent requests",
    "OAuth::setRequestEngine" => "The setRequestEngine purpose",
    "OAuth::setRSACertificate" => "Set the RSA certificate",
    "OAuth::setSSLChecks" => "Tweak specific SSL checks for requests",
    "OAuth::setTimestamp" => "Set the timestamp",
    "OAuth::setToken" => "Sets the token and secret",
    "OAuth::setVersion" => "Set the OAuth version",
    "OAuth::__construct" => "Create a new OAuth object",
    "OAuth::__destruct" => "The destructor",
    "OAuthProvider::addRequiredParameter" => "Add required parameters",
    "OAuthProvider::callconsumerHandler" => "Calls the consumerNonceHandler callback",
    "OAuthProvider::callTimestampNonceHandler" => "Calls the timestampNonceHandler callback",
    "OAuthProvider::calltokenHandler" => "Calls the tokenNonceHandler callback",
    "OAuthProvider::checkOAuthRequest" => "Check an oauth request",
    "OAuthProvider::consumerHandler" => "Set the consumerHandler handler callback",
    "OAuthProvider::generateToken" => "Generate a random token",
    "OAuthProvider::isRequestTokenEndpoint" => "Sets isRequestTokenEndpoint",
    "OAuthProvider::removeRequiredParameter" => "Remove a required parameter",
    "OAuthProvider::reportProblem" => "Report a problem",
    "OAuthProvider::setParam" => "Set a parameter",
    "OAuthProvider::setRequestTokenPath" => "Set request token path",
    "OAuthProvider::timestampNonceHandler" => "Set the timestampNonceHandler handler callback",
    "OAuthProvider::tokenHandler" => "Set the tokenHandler handler callback",
    "OAuthProvider::__construct" => "Constructs a new OAuthProvider object",
    "ocibindbyname" => "Alias of oci_bind_by_name",
    "ocicancel" => "Alias of oci_cancel",
    "ocicloselob" => "Alias of OCI-Lob::close",
    "ocicollappend" => "Alias of OCI-Collection::append",
    "ocicollassign" => "Alias of OCI-Collection::assign",
    "ocicollassignelem" => "Alias of OCI-Collection::assignElem",
    "ocicollgetelem" => "Alias of OCI-Collection::getElem",
    "ocicollmax" => "Alias of OCI-Collection::max",
    "ocicollsize" => "Alias of OCI-Collection::size",
    "ocicolltrim" => "Alias of OCI-Collection::trim",
    "ocicolumnisnull" => "Alias of oci_field_is_null",
    "ocicolumnname" => "Alias of oci_field_name",
    "ocicolumnprecision" => "Alias of oci_field_precision",
    "ocicolumnscale" => "Alias of oci_field_scale",
    "ocicolumnsize" => "Alias of oci_field_size",
    "ocicolumntype" => "Alias of oci_field_type",
    "ocicolumntyperaw" => "Alias of oci_field_type_raw",
    "ocicommit" => "Alias of oci_commit",
    "ocidefinebyname" => "Alias of oci_define_by_name",
    "ocierror" => "Alias of oci_error",
    "ociexecute" => "Alias of oci_execute",
    "ocifetch" => "Alias of oci_fetch",
    "ocifetchstatement" => "Alias of oci_fetch_all",
    "ocifreecollection" => "Alias of OCI-Collection::free",
    "ocifreecursor" => "Alias of oci_free_statement",
    "ocifreedesc" => "Alias of OCI-Lob::free",
    "ocifreestatement" => "Alias of oci_free_statement",
    "ociinternaldebug" => "Alias of oci_internal_debug",
    "ociloadlob" => "Alias of OCI-Lob::load",
    "ocilogoff" => "Alias of oci_close",
    "ocilogon" => "Alias of oci_connect",
    "ocinewcollection" => "Alias of oci_new_collection",
    "ocinewcursor" => "Alias of oci_new_cursor",
    "ocinewdescriptor" => "Alias of oci_new_descriptor",
    "ocinlogon" => "Alias of oci_new_connect",
    "ocinumcols" => "Alias of oci_num_fields",
    "ociparse" => "Alias of oci_parse",
    "ociplogon" => "Alias of oci_pconnect",
    "ociresult" => "Alias of oci_result",
    "ocirollback" => "Alias of oci_rollback",
    "ocirowcount" => "Alias of oci_num_rows",
    "ocisavelob" => "Alias of OCI-Lob::save",
    "ocisavelobfile" => "Alias of OCI-Lob::import",
    "ociserverversion" => "Alias of oci_server_version",
    "ocisetprefetch" => "Alias of oci_set_prefetch",
    "ocistatementtype" => "Alias of oci_statement_type",
    "ociwritelobtofile" => "Alias of OCI-Lob::export",
    "ociwritetemporarylob" => "Alias of OCI-Lob::writeTemporary",
    "octdec" => "Octal to decimal",
    "ogg:" => "Audio streams",
    "opendir" => "Open directory handle",
    "openlog" => "Open connection to system logger",
    "ord" => "Return ASCII value of character",
    "OuterIterator::getInnerIterator" => "Returns the inner iterator for the current entry",
    "pack" => "Pack data into binary string",
    "ParentIterator::accept" => "Determines acceptability",
    "ParentIterator::getChildren" => "Return the inner iterator's children contained in a ParentIterator",
    "ParentIterator::hasChildren" => "Check whether the inner iterator's current element has children",
    "ParentIterator::next" => "Move the iterator forward",
    "ParentIterator::rewind" => "Rewind the iterator",
    "ParentIterator::__construct" => "Constructs a ParentIterator",
    "passthru" => "Execute an external program and display raw output",
    "pathinfo" => "Returns information about a file path",
    "pclose" => "Closes process file pointer",
    "PDO::beginTransaction" => "Initiates a transaction",
    "PDO::commit" => "Commits a transaction",
    "PDO::errorCode" => "Fetch the SQLSTATE associated with the last operation on the database handle",
    "PDO::errorInfo" => "Fetch extended error information associated with the last operation on the database handle",
    "PDO::exec" => "Execute an SQL statement and return the number of affected rows",
    "PDO::getAttribute" => "Retrieve a database connection attribute",
    "PDO::getAvailableDrivers" => "Return an array of available PDO drivers",
    "PDO::inTransaction" => "Checks if inside a transaction",
    "PDO::lastInsertId" => "Returns the ID of the last inserted row or sequence value",
    "PDO::pgsqlCopyFromArray" => "Copy data from PHP array into table",
    "PDO::pgsqlCopyFromFile" => "Copy data from file into table",
    "PDO::pgsqlCopyToArray" => "Copy data from database table into PHP array",
    "PDO::pgsqlCopyToFile" => "Copy data from table into file",
    "PDO::pgsqlGetNotify" => "Get asynchronous notification",
    "PDO::pgsqlGetPid" => "Get the server PID",
    "PDO::pgsqlLOBCreate" => "Creates a new large object",
    "PDO::pgsqlLOBOpen" => "Opens an existing large object stream",
    "PDO::pgsqlLOBUnlink" => "Deletes the large object",
    "PDO::prepare" => "Prepares a statement for execution and returns a statement object",
    "PDO::query" => "Executes an SQL statement, returning a result set as a PDOStatement object",
    "PDO::quote" => "Quotes a string for use in a query",
    "PDO::rollBack" => "Rolls back a transaction",
    "PDO::setAttribute" => "Set an attribute",
    "PDO::sqliteCreateAggregate" => "Registers an aggregating User Defined Function for use in SQL statements",
    "PDO::sqliteCreateCollation" => "Registers a User Defined Function for use as a collating function in SQL statements",
    "PDO::sqliteCreateFunction" => "Registers a User Defined Function for use in SQL statements",
    "PDO::__construct" => "Creates a PDO instance representing a connection to a database",
    "PDOStatement::bindColumn" => "Bind a column to a PHP variable",
    "PDOStatement::bindParam" => "Binds a parameter to the specified variable name",
    "PDOStatement::bindValue" => "Binds a value to a parameter",
    "PDOStatement::closeCursor" => "Closes the cursor, enabling the statement to be executed again",
    "PDOStatement::columnCount" => "Returns the number of columns in the result set",
    "PDOStatement::debugDumpParams" => "Dump an SQL prepared command",
    "PDOStatement::errorCode" => "Fetch the SQLSTATE associated with the last operation on the statement handle",
    "PDOStatement::errorInfo" => "Fetch extended error information associated with the last operation on the statement handle",
    "PDOStatement::execute" => "Executes a prepared statement",
    "PDOStatement::fetch" => "Fetches the next row from a result set",
    "PDOStatement::fetchAll" => "Returns an array containing all of the result set rows",
    "PDOStatement::fetchColumn" => "Returns a single column from the next row of a result set",
    "PDOStatement::fetchObject" => "Fetches the next row and returns it as an object",
    "PDOStatement::getAttribute" => "Retrieve a statement attribute",
    "PDOStatement::getColumnMeta" => "Returns metadata for a column in a result set",
    "PDOStatement::nextRowset" => "Advances to the next rowset in a multi-rowset statement handle",
    "PDOStatement::rowCount" => "Returns the number of rows affected by the last SQL statement",
    "PDOStatement::setAttribute" => "Set a statement attribute",
    "PDOStatement::setFetchMode" => "Set the default fetch mode for this statement",
    "pfsockopen" => "Open persistent Internet or Unix domain socket connection",
    "phar:" => "PHP Archive",
    "Phar::addEmptyDir" => "Add an empty directory to the phar archive",
    "Phar::addFile" => "Add a file from the filesystem to the phar archive",
    "Phar::addFromString" => "Add a file from a string to the phar archive",
    "Phar::apiVersion" => "Returns the api version",
    "Phar::buildFromDirectory" => "Construct a phar archive from the files within a directory",
    "Phar::buildFromIterator" => "Construct a phar archive from an iterator",
    "Phar::canCompress" => "Returns whether phar extension supports compression using either zlib or bzip2",
    "Phar::canWrite" => "Returns whether phar extension supports writing and creating phars",
    "Phar::compress" => "Compresses the entire Phar archive using Gzip or Bzip2 compression",
    "Phar::compressAllFilesGZ" => "Compresses all files in the current Phar archive using Gzip compression",
    "Phar::compressFiles" => "Compresses all files in the current Phar archive",
    "Phar::convertToData" => "Convert a phar archive to a non-executable tar or zip file",
    "Phar::convertToExecutable" => "Convert a phar archive to another executable phar archive file format",
    "Phar::copy" => "Copy a file internal to the phar archive to another new file within the phar",
    "Phar::count" => "Returns the number of entries (files) in the Phar archive",
    "Phar::createDefaultStub" => "Create a phar-file format specific stub",
    "Phar::decompress" => "Decompresses the entire Phar archive",
    "Phar::decompressFiles" => "Decompresses all files in the current Phar archive",
    "Phar::delete" => "Delete a file within a phar archive",
    "Phar::delMetadata" => "Deletes the global metadata of the phar",
    "Phar::extractTo" => "Extract the contents of a phar archive to a directory",
    "Phar::getAlias" => "Get the alias for Phar",
    "Phar::getMetadata" => "Returns phar archive meta-data",
    "Phar::getModified" => "Return whether phar was modified",
    "Phar::getPath" => "Get the real path to the Phar archive on disk",
    "Phar::getSignature" => "Return MD5/SHA1/SHA256/SHA512/OpenSSL signature of a Phar archive",
    "Phar::getStub" => "Return the PHP loader or bootstrap stub of a Phar archive",
    "Phar::getSupportedCompression" => "Return array of supported compression algorithms",
    "Phar::getSupportedSignatures" => "Return array of supported signature types",
    "Phar::getVersion" => "Return version info of Phar archive",
    "Phar::hasMetadata" => "Returns whether phar has global meta-data",
    "Phar::interceptFileFuncs" => "Instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions",
    "Phar::isBuffering" => "Used to determine whether Phar write operations are being buffered, or are flushing directly to disk",
    "Phar::isCompressed" => "Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)",
    "Phar::isFileFormat" => "Returns true if the phar archive is based on the tar/phar/zip file format depending on the parameter",
    "Phar::isValidPharFilename" => "Returns whether the given filename is a valid phar filename",
    "Phar::isWritable" => "Returns true if the phar archive can be modified",
    "Phar::loadPhar" => "Loads any phar archive with an alias",
    "Phar::mapPhar" => "Reads the currently executed file (a phar) and registers its manifest",
    "Phar::mount" => "Mount an external path or file to a virtual location within the phar archive",
    "Phar::mungServer" => "Defines a list of up to 4 \$_SERVER variables that should be modified for execution",
    "Phar::offsetExists" => "Determines whether a file exists in the phar",
    "Phar::offsetGet" => "Gets a PharFileInfo object for a specific file",
    "Phar::offsetSet" => "Set the contents of an internal file to those of an external file",
    "Phar::offsetUnset" => "Remove a file from a phar",
    "Phar::running" => "Returns the full path on disk or full phar URL to the currently executing Phar archive",
    "Phar::setAlias" => "Set the alias for the Phar archive",
    "Phar::setDefaultStub" => "Used to set the PHP loader or bootstrap stub of a Phar archive to the default loader",
    "Phar::setMetadata" => "Sets phar archive meta-data",
    "Phar::setSignatureAlgorithm" => "Set the signature algorithm for a phar and apply it",
    "Phar::setStub" => "Used to set the PHP loader or bootstrap stub of a Phar archive",
    "Phar::startBuffering" => "Start buffering Phar write operations, do not modify the Phar object on disk",
    "Phar::stopBuffering" => "Stop buffering write requests to the Phar archive, and save changes to disk",
    "Phar::uncompressAllFiles" => "Uncompresses all files in the current Phar archive",
    "Phar::unlinkArchive" => "Completely remove a phar archive from disk and from memory",
    "Phar::webPhar" => "mapPhar for web-based phars. front controller for web applications",
    "Phar::__construct" => "Construct a Phar archive object",
    "Phar" => "Phar context option listing",
    "PharData::addEmptyDir" => "Add an empty directory to the tar/zip archive",
    "PharData::addFile" => "Add a file from the filesystem to the tar/zip archive",
    "PharData::addFromString" => "Add a file from the filesystem to the tar/zip archive",
    "PharData::buildFromDirectory" => "Construct a tar/zip archive from the files within a directory",
    "PharData::buildFromIterator" => "Construct a tar or zip archive from an iterator",
    "PharData::compress" => "Compresses the entire tar/zip archive using Gzip or Bzip2 compression",
    "PharData::compressFiles" => "Compresses all files in the current tar/zip archive",
    "PharData::convertToData" => "Convert a phar archive to a non-executable tar or zip file",
    "PharData::convertToExecutable" => "Convert a non-executable tar/zip archive to an executable phar archive",
    "PharData::copy" => "Copy a file internal to the phar archive to another new file within the phar",
    "PharData::decompress" => "Decompresses the entire Phar archive",
    "PharData::decompressFiles" => "Decompresses all files in the current zip archive",
    "PharData::delete" => "Delete a file within a tar/zip archive",
    "PharData::delMetadata" => "Deletes the global metadata of a zip archive",
    "PharData::extractTo" => "Extract the contents of a tar/zip archive to a directory",
    "PharData::isWritable" => "Returns true if the tar/zip archive can be modified",
    "PharData::offsetSet" => "Set the contents of a file within the tar/zip to those of an external file or string",
    "PharData::offsetUnset" => "Remove a file from a tar/zip archive",
    "PharData::setAlias" => "Dummy function (Phar::setAlias is not valid for PharData)",
    "PharData::setDefaultStub" => "Dummy function (Phar::setDefaultStub is not valid for PharData)",
    "PharData::setStub" => "Dummy function (Phar::setStub is not valid for PharData)",
    "PharData::__construct" => "Construct a non-executable tar or zip archive object",
    "PharFileInfo::chmod" => "Sets file-specific permission bits",
    "PharFileInfo::compress" => "Compresses the current Phar entry with either zlib or bzip2 compression",
    "PharFileInfo::decompress" => "Decompresses the current Phar entry within the phar",
    "PharFileInfo::delMetadata" => "Deletes the metadata of the entry",
    "PharFileInfo::getCompressedSize" => "Returns the actual size of the file (with compression) inside the Phar archive",
    "PharFileInfo::getContent" => "Get the complete file contents of the entry",
    "PharFileInfo::getMetadata" => "Returns file-specific meta-data saved with a file",
    "PharFileInfo::getPharFlags" => "Returns the Phar file entry flags",
    "PharFileInfo::hasMetadata" => "Returns the metadata of the entry",
    "PharFileInfo::isCompressed" => "Returns whether the entry is compressed",
    "PharFileInfo::isCompressedGZ" => "Returns whether the entry is compressed using gz",
    "PharFileInfo::isCRCChecked" => "Returns whether file entry has had its CRC verified",
    "PharFileInfo::setCompressedGZ" => "Compresses the current Phar entry within the phar using gz compression",
    "PharFileInfo::setMetadata" => "Sets file-specific meta-data saved with a file",
    "PharFileInfo::setUncompressed" => "Uncompresses the current Phar entry within the phar, if it is compressed",
    "PharFileInfo::__construct" => "Construct a Phar entry object",
    "phdfs::connect" => "Description",
    "phdfs::copy" => "Description",
    "phdfs::delete" => "Description",
    "phdfs::disconnect" => "Description",
    "phdfs::exists" => "Description",
    "phdfs::read" => "Description",
    "phdfs::rename" => "Description",
    "phdfs::tell" => "Description",
    "phdfs::write" => "Description",
    "phdfs::__construct" => "Description",
    "phdfs::__destruct" => "Description",
    "php:" => "Accessing various I/O streams",
    "phpcredits" => "Prints out the credits for PHP",
    "phpinfo" => "Outputs information about PHP's configuration",
    "phpversion" => "Gets the current PHP version",
    "pi" => "Get value of pi",
    "Pool::collect" => "Collect references to completed tasks",
    "Pool::resize" => "Resize the Pool",
    "Pool::shutdown" => "Shutdown all workers",
    "Pool::submit" => "Submits an object for execution",
    "Pool::submitTo" => "Submits a task to a specific worker for execution",
    "Pool::__construct" => "Creates a new Pool of Workers",
    "popen" => "Opens process file pointer",
    "pos" => "Alias of current",
    "pow" => "Exponential expression",
    "prev" => "Rewind the internal array pointer",
    "print" => "Output a string",
    "printf" => "Output a formatted string",
    "putenv" => "Sets the value of an environment variable",
    "QuickHashIntHash::add" => "This method adds a new entry to the hash",
    "QuickHashIntHash::delete" => "This method deletes am entry from the hash",
    "QuickHashIntHash::exists" => "This method checks whether a key is part of the hash",
    "QuickHashIntHash::get" => "This method retrieves a value from the hash by its key",
    "QuickHashIntHash::getSize" => "Returns the number of elements in the hash",
    "QuickHashIntHash::loadFromFile" => "This factory method creates a hash from a file",
    "QuickHashIntHash::loadFromString" => "This factory method creates a hash from a string",
    "QuickHashIntHash::saveToFile" => "This method stores an in-memory hash to disk",
    "QuickHashIntHash::saveToString" => "This method returns a serialized version of the hash",
    "QuickHashIntHash::update" => "This method updates an entry in the hash with a new value",
    "QuickHashIntHash::__construct" => "Creates a new QuickHashIntHash object",
    "QuickHashIntSet::add" => "This method adds a new entry to the set",
    "QuickHashIntSet::delete" => "This method deletes an entry from the set",
    "QuickHashIntSet::exists" => "This method checks whether a key is part of the set",
    "QuickHashIntSet::getSize" => "Returns the number of elements in the set",
    "QuickHashIntSet::loadFromFile" => "This factory method creates a set from a file",
    "QuickHashIntSet::loadFromString" => "This factory method creates a set from a string",
    "QuickHashIntSet::saveToFile" => "This method stores an in-memory set to disk",
    "QuickHashIntSet::saveToString" => "This method returns a serialized version of the set",
    "QuickHashIntSet::__construct" => "Creates a new QuickHashIntSet object",
    "QuickHashIntStringHash::add" => "This method adds a new entry to the hash",
    "QuickHashIntStringHash::delete" => "This method deletes am entry from the hash",
    "QuickHashIntStringHash::exists" => "This method checks whether a key is part of the hash",
    "QuickHashIntStringHash::get" => "This method retrieves a value from the hash by its key",
    "QuickHashIntStringHash::getSize" => "Returns the number of elements in the hash",
    "QuickHashIntStringHash::loadFromFile" => "This factory method creates a hash from a file",
    "QuickHashIntStringHash::loadFromString" => "This factory method creates a hash from a string",
    "QuickHashIntStringHash::saveToFile" => "This method stores an in-memory hash to disk",
    "QuickHashIntStringHash::saveToString" => "This method returns a serialized version of the hash",
    "QuickHashIntStringHash::update" => "This method updates an entry in the hash with a new value",
    "QuickHashIntStringHash::__construct" => "Creates a new QuickHashIntStringHash object",
    "QuickHashStringIntHash::add" => "This method adds a new entry to the hash",
    "QuickHashStringIntHash::delete" => "This method deletes am entry from the hash",
    "QuickHashStringIntHash::exists" => "This method checks whether a key is part of the hash",
    "QuickHashStringIntHash::get" => "This method retrieves a value from the hash by its key",
    "QuickHashStringIntHash::getSize" => "Returns the number of elements in the hash",
    "QuickHashStringIntHash::loadFromFile" => "This factory method creates a hash from a file",
    "QuickHashStringIntHash::loadFromString" => "This factory method creates a hash from a string",
    "QuickHashStringIntHash::saveToFile" => "This method stores an in-memory hash to disk",
    "QuickHashStringIntHash::saveToString" => "This method returns a serialized version of the hash",
    "QuickHashStringIntHash::update" => "This method updates an entry in the hash with a new value",
    "QuickHashStringIntHash::__construct" => "Creates a new QuickHashStringIntHash object",
    "quotemeta" => "Quote meta characters",
    "rand" => "Generate a random integer",
    "range" => "Create an array containing a range of elements",
    "rar:" => "RAR",
    "RarArchive::close" => "Close RAR archive and free all resources",
    "RarArchive::getComment" => "Get comment text from the RAR archive",
    "RarArchive::getEntries" => "Get full list of entries from the RAR archive",
    "RarArchive::getEntry" => "Get entry object from the RAR archive",
    "RarArchive::isBroken" => "Test whether an archive is broken (incomplete)",
    "RarArchive::isSolid" => "Check whether the RAR archive is solid",
    "RarArchive::open" => "Open RAR archive",
    "RarArchive::setAllowBroken" => "Whether opening broken archives is allowed",
    "RarArchive::__toString" => "Get text representation",
    "RarEntry::extract" => "Extract entry from the archive",
    "RarEntry::getAttr" => "Get attributes of the entry",
    "RarEntry::getCrc" => "Get CRC of the entry",
    "RarEntry::getFileTime" => "Get entry last modification time",
    "RarEntry::getHostOs" => "Get entry host OS",
    "RarEntry::getMethod" => "Get pack method of the entry",
    "RarEntry::getName" => "Get name of the entry",
    "RarEntry::getPackedSize" => "Get packed size of the entry",
    "RarEntry::getStream" => "Get file handler for entry",
    "RarEntry::getUnpackedSize" => "Get unpacked size of the entry",
    "RarEntry::getVersion" => "Get minimum version of RAR program required to unpack the entry",
    "RarEntry::isDirectory" => "Test whether an entry represents a directory",
    "RarEntry::isEncrypted" => "Test whether an entry is encrypted",
    "RarEntry::__toString" => "Get text representation of entry",
    "RarException::isUsingExceptions" => "Check whether error handling with exceptions is in use",
    "RarException::setUsingExceptions" => "Activate and deactivate error handling with exceptions",
    "rawurldecode" => "Decode URL-encoded strings",
    "rawurlencode" => "URL-encode according to RFC 3986",
    "readdir" => "Read entry from directory handle",
    "readfile" => "Outputs a file",
    "readgzfile" => "Output a gz-file",
    "readline" => "Reads a line",
    "readlink" => "Returns the target of a symbolic link",
    "realpath" => "Returns canonicalized absolute pathname",
    "recode" => "Alias of recode_string",
    "RecursiveArrayIterator::getChildren" => "Returns an iterator for the current entry if it is an array or an object",
    "RecursiveArrayIterator::hasChildren" => "Returns whether current entry is an array or an object",
    "RecursiveCachingIterator::getChildren" => "Return the inner iterator's children as a RecursiveCachingIterator",
    "RecursiveCachingIterator::hasChildren" => "Check whether the current element of the inner iterator has children",
    "RecursiveCachingIterator::__construct" => "Construct",
    "RecursiveCallbackFilterIterator::getChildren" => "Return the inner iterator's children contained in a RecursiveCallbackFilterIterator",
    "RecursiveCallbackFilterIterator::hasChildren" => "Check whether the inner iterator's current element has children",
    "RecursiveCallbackFilterIterator::__construct" => "Create a RecursiveCallbackFilterIterator from a RecursiveIterator",
    "RecursiveDirectoryIterator::getChildren" => "Returns an iterator for the current entry if it is a directory",
    "RecursiveDirectoryIterator::getSubPath" => "Get sub path",
    "RecursiveDirectoryIterator::getSubPathname" => "Get sub path and name",
    "RecursiveDirectoryIterator::hasChildren" => "Returns whether current entry is a directory and not '.' or '..'",
    "RecursiveDirectoryIterator::key" => "Return path and filename of current dir entry",
    "RecursiveDirectoryIterator::next" => "Move to next entry",
    "RecursiveDirectoryIterator::rewind" => "Rewind dir back to the start",
    "RecursiveDirectoryIterator::__construct" => "Constructs a RecursiveDirectoryIterator",
    "RecursiveFilterIterator::getChildren" => "Return the inner iterator's children contained in a RecursiveFilterIterator",
    "RecursiveFilterIterator::hasChildren" => "Check whether the inner iterator's current element has children",
    "RecursiveFilterIterator::__construct" => "Create a RecursiveFilterIterator from a RecursiveIterator",
    "RecursiveIterator::getChildren" => "Returns an iterator for the current entry",
    "RecursiveIterator::hasChildren" => "Returns if an iterator can be created for the current entry",
    "RecursiveIteratorIterator::beginChildren" => "Begin children",
    "RecursiveIteratorIterator::beginIteration" => "Begin Iteration",
    "RecursiveIteratorIterator::callGetChildren" => "Get children",
    "RecursiveIteratorIterator::callHasChildren" => "Has children",
    "RecursiveIteratorIterator::current" => "Access the current element value",
    "RecursiveIteratorIterator::endChildren" => "End children",
    "RecursiveIteratorIterator::endIteration" => "End Iteration",
    "RecursiveIteratorIterator::getDepth" => "Get the current depth of the recursive iteration",
    "RecursiveIteratorIterator::getInnerIterator" => "Get inner iterator",
    "RecursiveIteratorIterator::getMaxDepth" => "Get max depth",
    "RecursiveIteratorIterator::getSubIterator" => "The current active sub iterator",
    "RecursiveIteratorIterator::key" => "Access the current key",
    "RecursiveIteratorIterator::next" => "Move forward to the next element",
    "RecursiveIteratorIterator::nextElement" => "Next element",
    "RecursiveIteratorIterator::rewind" => "Rewind the iterator to the first element of the top level inner iterator",
    "RecursiveIteratorIterator::setMaxDepth" => "Set max depth",
    "RecursiveIteratorIterator::valid" => "Check whether the current position is valid",
    "RecursiveIteratorIterator::__construct" => "Construct a RecursiveIteratorIterator",
    "RecursiveRegexIterator::getChildren" => "Returns an iterator for the current entry",
    "RecursiveRegexIterator::hasChildren" => "Returns whether an iterator can be obtained for the current entry",
    "RecursiveRegexIterator::__construct" => "Creates a new RecursiveRegexIterator",
    "RecursiveTreeIterator::beginChildren" => "Begin children",
    "RecursiveTreeIterator::beginIteration" => "Begin iteration",
    "RecursiveTreeIterator::callGetChildren" => "Get children",
    "RecursiveTreeIterator::callHasChildren" => "Has children",
    "RecursiveTreeIterator::current" => "Get current element",
    "RecursiveTreeIterator::endChildren" => "End children",
    "RecursiveTreeIterator::endIteration" => "End iteration",
    "RecursiveTreeIterator::getEntry" => "Get current entry",
    "RecursiveTreeIterator::getPostfix" => "Get the postfix",
    "RecursiveTreeIterator::getPrefix" => "Get the prefix",
    "RecursiveTreeIterator::key" => "Get the key of the current element",
    "RecursiveTreeIterator::next" => "Move to next element",
    "RecursiveTreeIterator::nextElement" => "Next element",
    "RecursiveTreeIterator::rewind" => "Rewind iterator",
    "RecursiveTreeIterator::setPostfix" => "Set postfix",
    "RecursiveTreeIterator::setPrefixPart" => "Set a part of the prefix",
    "RecursiveTreeIterator::valid" => "Check validity",
    "RecursiveTreeIterator::__construct" => "Construct a RecursiveTreeIterator",
    "Reflection::export" => "Exports",
    "Reflection::getModifierNames" => "Gets modifier names",
    "ReflectionClass::export" => "Exports a class",
    "ReflectionClass::getConstant" => "Gets defined constant",
    "ReflectionClass::getConstants" => "Gets constants",
    "ReflectionClass::getConstructor" => "Gets the constructor of the class",
    "ReflectionClass::getDefaultProperties" => "Gets default properties",
    "ReflectionClass::getDocComment" => "Gets doc comments",
    "ReflectionClass::getEndLine" => "Gets end line",
    "ReflectionClass::getExtension" => "Gets a ReflectionExtension object for the extension which defined the class",
    "ReflectionClass::getExtensionName" => "Gets the name of the extension which defined the class",
    "ReflectionClass::getFileName" => "Gets the filename of the file in which the class has been defined",
    "ReflectionClass::getInterfaceNames" => "Gets the interface names",
    "ReflectionClass::getInterfaces" => "Gets the interfaces",
    "ReflectionClass::getMethod" => "Gets a ReflectionMethod for a class method",
    "ReflectionClass::getMethods" => "Gets an array of methods",
    "ReflectionClass::getModifiers" => "Gets the class modifiers",
    "ReflectionClass::getName" => "Gets class name",
    "ReflectionClass::getNamespaceName" => "Gets namespace name",
    "ReflectionClass::getParentClass" => "Gets parent class",
    "ReflectionClass::getProperties" => "Gets properties",
    "ReflectionClass::getProperty" => "Gets a ReflectionProperty for a class's property",
    "ReflectionClass::getReflectionConstant" => "Gets a ReflectionClassConstant for a class's constant",
    "ReflectionClass::getReflectionConstants" => "Gets class constants",
    "ReflectionClass::getShortName" => "Gets short name",
    "ReflectionClass::getStartLine" => "Gets starting line number",
    "ReflectionClass::getStaticProperties" => "Gets static properties",
    "ReflectionClass::getStaticPropertyValue" => "Gets static property value",
    "ReflectionClass::getTraitAliases" => "Returns an array of trait aliases",
    "ReflectionClass::getTraitNames" => "Returns an array of names of traits used by this class",
    "ReflectionClass::getTraits" => "Returns an array of traits used by this class",
    "ReflectionClass::hasConstant" => "Checks if constant is defined",
    "ReflectionClass::hasMethod" => "Checks if method is defined",
    "ReflectionClass::hasProperty" => "Checks if property is defined",
    "ReflectionClass::implementsInterface" => "Implements interface",
    "ReflectionClass::inNamespace" => "Checks if in namespace",
    "ReflectionClass::isAbstract" => "Checks if class is abstract",
    "ReflectionClass::isAnonymous" => "Checks if class is anonymous",
    "ReflectionClass::isCloneable" => "Returns whether this class is cloneable",
    "ReflectionClass::isFinal" => "Checks if class is final",
    "ReflectionClass::isInstance" => "Checks class for instance",
    "ReflectionClass::isInstantiable" => "Checks if the class is instantiable",
    "ReflectionClass::isInterface" => "Checks if the class is an interface",
    "ReflectionClass::isInternal" => "Checks if class is defined internally by an extension, or the core",
    "ReflectionClass::isIterable" => "Check whether this class is iterable",
    "ReflectionClass::isIterateable" => "Checks if iterateable",
    "ReflectionClass::isSubclassOf" => "Checks if a subclass",
    "ReflectionClass::isTrait" => "Returns whether this is a trait",
    "ReflectionClass::isUserDefined" => "Checks if user defined",
    "ReflectionClass::newInstance" => "Creates a new class instance from given arguments",
    "ReflectionClass::newInstanceArgs" => "Creates a new class instance from given arguments",
    "ReflectionClass::newInstanceWithoutConstructor" => "Creates a new class instance without invoking the constructor",
    "ReflectionClass::setStaticPropertyValue" => "Sets static property value",
    "ReflectionClass::__construct" => "Constructs a ReflectionClass",
    "ReflectionClass::__toString" => "Returns the string representation of the ReflectionClass object",
    "ReflectionClassConstant::export" => "Export",
    "ReflectionClassConstant::getDeclaringClass" => "Gets declaring class",
    "ReflectionClassConstant::getDocComment" => "Gets doc comments",
    "ReflectionClassConstant::getModifiers" => "Gets the class constant modifiers",
    "ReflectionClassConstant::getName" => "Get name of the constant",
    "ReflectionClassConstant::getValue" => "Gets value",
    "ReflectionClassConstant::isPrivate" => "Checks if class constant is private",
    "ReflectionClassConstant::isProtected" => "Checks if class constant is protected",
    "ReflectionClassConstant::isPublic" => "Checks if class constant is public",
    "ReflectionClassConstant::__construct" => "Constructs a ReflectionClassConstant",
    "ReflectionClassConstant::__toString" => "Returns the string representation of the ReflectionClassConstant object",
    "ReflectionExtension::export" => "Export",
    "ReflectionExtension::getClasses" => "Gets classes",
    "ReflectionExtension::getClassNames" => "Gets class names",
    "ReflectionExtension::getConstants" => "Gets constants",
    "ReflectionExtension::getDependencies" => "Gets dependencies",
    "ReflectionExtension::getFunctions" => "Gets extension functions",
    "ReflectionExtension::getINIEntries" => "Gets extension ini entries",
    "ReflectionExtension::getName" => "Gets extension name",
    "ReflectionExtension::getVersion" => "Gets extension version",
    "ReflectionExtension::info" => "Print extension info",
    "ReflectionExtension::isPersistent" => "Returns whether this extension is persistent",
    "ReflectionExtension::isTemporary" => "Returns whether this extension is temporary",
    "ReflectionExtension::__clone" => "Clones",
    "ReflectionExtension::__construct" => "Constructs a ReflectionExtension",
    "ReflectionExtension::__toString" => "To string",
    "ReflectionFunction::export" => "Exports function",
    "ReflectionFunction::getClosure" => "Returns a dynamically created closure for the function",
    "ReflectionFunction::invoke" => "Invokes function",
    "ReflectionFunction::invokeArgs" => "Invokes function args",
    "ReflectionFunction::isDisabled" => "Checks if function is disabled",
    "ReflectionFunction::__construct" => "Constructs a ReflectionFunction object",
    "ReflectionFunction::__toString" => "To string",
    "ReflectionFunctionAbstract::getClosureScopeClass" => "Returns the scope associated to the closure",
    "ReflectionFunctionAbstract::getClosureThis" => "Returns this pointer bound to closure",
    "ReflectionFunctionAbstract::getDocComment" => "Gets doc comment",
    "ReflectionFunctionAbstract::getEndLine" => "Gets end line number",
    "ReflectionFunctionAbstract::getExtension" => "Gets extension info",
    "ReflectionFunctionAbstract::getExtensionName" => "Gets extension name",
    "ReflectionFunctionAbstract::getFileName" => "Gets file name",
    "ReflectionFunctionAbstract::getName" => "Gets function name",
    "ReflectionFunctionAbstract::getNamespaceName" => "Gets namespace name",
    "ReflectionFunctionAbstract::getNumberOfParameters" => "Gets number of parameters",
    "ReflectionFunctionAbstract::getNumberOfRequiredParameters" => "Gets number of required parameters",
    "ReflectionFunctionAbstract::getParameters" => "Gets parameters",
    "ReflectionFunctionAbstract::getReturnType" => "Gets the specified return type of a function",
    "ReflectionFunctionAbstract::getShortName" => "Gets function short name",
    "ReflectionFunctionAbstract::getStartLine" => "Gets starting line number",
    "ReflectionFunctionAbstract::getStaticVariables" => "Gets static variables",
    "ReflectionFunctionAbstract::hasReturnType" => "Checks if the function has a specified return type",
    "ReflectionFunctionAbstract::inNamespace" => "Checks if function in namespace",
    "ReflectionFunctionAbstract::isClosure" => "Checks if closure",
    "ReflectionFunctionAbstract::isDeprecated" => "Checks if deprecated",
    "ReflectionFunctionAbstract::isGenerator" => "Returns whether this function is a generator",
    "ReflectionFunctionAbstract::isInternal" => "Checks if is internal",
    "ReflectionFunctionAbstract::isUserDefined" => "Checks if user defined",
    "ReflectionFunctionAbstract::isVariadic" => "Checks if the function is variadic",
    "ReflectionFunctionAbstract::returnsReference" => "Checks if returns reference",
    "ReflectionFunctionAbstract::__clone" => "Clones function",
    "ReflectionFunctionAbstract::__toString" => "To string",
    "ReflectionGenerator::getExecutingFile" => "Gets the file name of the currently executing generator",
    "ReflectionGenerator::getExecutingGenerator" => "Gets the executing Generator object",
    "ReflectionGenerator::getExecutingLine" => "Gets the currently executing line of the generator",
    "ReflectionGenerator::getFunction" => "Gets the function name of the generator",
    "ReflectionGenerator::getThis" => "Gets the \$this value of the generator",
    "ReflectionGenerator::getTrace" => "Gets the trace of the executing generator",
    "ReflectionGenerator::__construct" => "Constructs a ReflectionGenerator object",
    "ReflectionMethod::export" => "Export a reflection method",
    "ReflectionMethod::getClosure" => "Returns a dynamically created closure for the method",
    "ReflectionMethod::getDeclaringClass" => "Gets declaring class for the reflected method",
    "ReflectionMethod::getModifiers" => "Gets the method modifiers",
    "ReflectionMethod::getPrototype" => "Gets the method prototype (if there is one)",
    "ReflectionMethod::invoke" => "Invoke",
    "ReflectionMethod::invokeArgs" => "Invoke args",
    "ReflectionMethod::isAbstract" => "Checks if method is abstract",
    "ReflectionMethod::isConstructor" => "Checks if method is a constructor",
    "ReflectionMethod::isDestructor" => "Checks if method is a destructor",
    "ReflectionMethod::isFinal" => "Checks if method is final",
    "ReflectionMethod::isPrivate" => "Checks if method is private",
    "ReflectionMethod::isProtected" => "Checks if method is protected",
    "ReflectionMethod::isPublic" => "Checks if method is public",
    "ReflectionMethod::isStatic" => "Checks if method is static",
    "ReflectionMethod::setAccessible" => "Set method accessibility",
    "ReflectionMethod::__construct" => "Constructs a ReflectionMethod",
    "ReflectionMethod::__toString" => "Returns the string representation of the Reflection method object",
    "ReflectionNamedType::getName" => "Get the text of the type hint",
    "ReflectionObject::export" => "Export",
    "ReflectionObject::__construct" => "Constructs a ReflectionObject",
    "ReflectionParameter::allowsNull" => "Checks if null is allowed",
    "ReflectionParameter::canBePassedByValue" => "Returns whether this parameter can be passed by value",
    "ReflectionParameter::export" => "Exports",
    "ReflectionParameter::getClass" => "Get the type hinted class",
    "ReflectionParameter::getDeclaringClass" => "Gets declaring class",
    "ReflectionParameter::getDeclaringFunction" => "Gets declaring function",
    "ReflectionParameter::getDefaultValue" => "Gets default parameter value",
    "ReflectionParameter::getDefaultValueConstantName" => "Returns the default value's constant name if default value is constant or null",
    "ReflectionParameter::getName" => "Gets parameter name",
    "ReflectionParameter::getPosition" => "Gets parameter position",
    "ReflectionParameter::getType" => "Gets a parameter's type",
    "ReflectionParameter::hasType" => "Checks if parameter has a type",
    "ReflectionParameter::isArray" => "Checks if parameter expects an array",
    "ReflectionParameter::isCallable" => "Returns whether parameter MUST be callable",
    "ReflectionParameter::isDefaultValueAvailable" => "Checks if a default value is available",
    "ReflectionParameter::isDefaultValueConstant" => "Returns whether the default value of this parameter is a constant",
    "ReflectionParameter::isOptional" => "Checks if optional",
    "ReflectionParameter::isPassedByReference" => "Checks if passed by reference",
    "ReflectionParameter::isVariadic" => "Checks if the parameter is variadic",
    "ReflectionParameter::__clone" => "Clone",
    "ReflectionParameter::__construct" => "Construct",
    "ReflectionParameter::__toString" => "To string",
    "ReflectionProperty::export" => "Export",
    "ReflectionProperty::getDeclaringClass" => "Gets declaring class",
    "ReflectionProperty::getDocComment" => "Gets the property doc comment",
    "ReflectionProperty::getModifiers" => "Gets the property modifiers",
    "ReflectionProperty::getName" => "Gets property name",
    "ReflectionProperty::getValue" => "Gets value",
    "ReflectionProperty::isDefault" => "Checks if property is a default property",
    "ReflectionProperty::isPrivate" => "Checks if property is private",
    "ReflectionProperty::isProtected" => "Checks if property is protected",
    "ReflectionProperty::isPublic" => "Checks if property is public",
    "ReflectionProperty::isStatic" => "Checks if property is static",
    "ReflectionProperty::setAccessible" => "Set property accessibility",
    "ReflectionProperty::setValue" => "Set property value",
    "ReflectionProperty::__clone" => "Clone",
    "ReflectionProperty::__construct" => "Construct a ReflectionProperty object",
    "ReflectionProperty::__toString" => "To string",
    "ReflectionType::allowsNull" => "Checks if null is allowed",
    "ReflectionType::isBuiltin" => "Checks if it is a built-in type",
    "ReflectionType::__toString" => "To string",
    "ReflectionZendExtension::export" => "Export",
    "ReflectionZendExtension::getAuthor" => "Gets author",
    "ReflectionZendExtension::getCopyright" => "Gets copyright",
    "ReflectionZendExtension::getName" => "Gets name",
    "ReflectionZendExtension::getURL" => "Gets URL",
    "ReflectionZendExtension::getVersion" => "Gets version",
    "ReflectionZendExtension::__clone" => "Clone handler",
    "ReflectionZendExtension::__construct" => "Constructor",
    "ReflectionZendExtension::__toString" => "To string handler",
    "Reflector::export" => "Exports",
    "Reflector::__toString" => "To string",
    "RegexIterator::accept" => "Get accept status",
    "RegexIterator::getFlags" => "Get flags",
    "RegexIterator::getMode" => "Returns operation mode",
    "RegexIterator::getPregFlags" => "Returns the regular expression flags",
    "RegexIterator::getRegex" => "Returns current regular expression",
    "RegexIterator::setFlags" => "Sets the flags",
    "RegexIterator::setMode" => "Sets the operation mode",
    "RegexIterator::setPregFlags" => "Sets the regular expression flags",
    "RegexIterator::__construct" => "Create a new RegexIterator",
    "rename" => "Renames a file or directory",
    "reset" => "Set the internal pointer of an array to its first element",
    "ResourceBundle::count" => "Get number of elements in the bundle",
    "ResourceBundle::create" => "Create a resource bundle",
    "ResourceBundle::get" => "Get data from the bundle",
    "ResourceBundle::getErrorCode" => "Get bundle's last error code",
    "ResourceBundle::getErrorMessage" => "Get bundle's last error message",
    "ResourceBundle::getLocales" => "Get supported locales",
    "rewind" => "Rewind the position of a file pointer",
    "rewinddir" => "Rewind directory handle",
    "rmdir" => "Removes directory",
    "round" => "Rounds a float",
    "RRDCreator::addArchive" => "archive of data values for each data source",
    "RRDCreator::addDataSource" => "Adds data source definition for RRD database",
    "RRDCreator::save" => "Saves the RRD database to a file",
    "RRDCreator::__construct" => "Creates new RRDCreator instance",
    "RRDGraph::save" => "Saves the result of query into image",
    "RRDGraph::setOptions" => "Sets the options for rrd graph export",
    "RRDGraph::__construct" => "Creates new RRDGraph instance",
    "RRDUpdater::update" => "Update the RRD database file",
    "RRDUpdater::__construct" => "Creates new RRDUpdater instance",
    "rsort" => "Sort an array in reverse order",
    "rtrim" => "Strip whitespace (or other characters) from the end of a string",
    "Runkit_Sandbox" => "PHP Virtual Machine",
    "SAMConnection::commit" => "Commits (completes) the current unit of work",
    "SAMConnection::connect" => "Establishes a connection to a Messaging Server",
    "SAMConnection::disconnect" => "Disconnects from a Messaging Server",
    "SAMConnection::errno" => "Contains the unique numeric error code of the last executed SAM operation",
    "SAMConnection::error" => "Contains the text description of the last failed SAM operation",
    "SAMConnection::isConnected" => "Queries whether a connection is established to a Messaging Server",
    "SAMConnection::peek" => "Read a message from a queue without removing it from the queue",
    "SAMConnection::peekAll" => "Read one or more messages from a queue without removing it from the queue",
    "SAMConnection::receive" => "Receive a message from a queue or subscription",
    "SAMConnection::remove" => "Remove a message from a queue",
    "SAMConnection::rollback" => "Cancels (rolls back) an in-flight unit of work",
    "SAMConnection::send" => "Send a message to a queue or publish an item to a topic",
    "SAMConnection::setDebug" => "Turn on or off additional debugging output",
    "SAMConnection::subscribe" => "Create a subscription to a specified topic",
    "SAMConnection::unsubscribe" => "Cancel a subscription to a specified topic",
    "SAMConnection::__construct" => "Creates a new connection to a Messaging Server",
    "SAMMessage::body" => "The body of the message",
    "SAMMessage::header" => "The header properties of the message",
    "SAMMessage::__construct" => "Creates a new Message object",
    "SCA::createDataObject" => "Create an SDO",
    "SCA::getService" => "Obtain a proxy for a service",
    "scandir" => "List files and directories inside the specified path",
    "SeekableIterator::seek" => "Seeks to a position",
    "Serializable::serialize" => "String representation of object",
    "Serializable::unserialize" => "Constructs the object",
    "serialize" => "Generates a storable representation of a value",
    "SessionHandler::close" => "Close the session",
    "SessionHandler::destroy" => "Destroy a session",
    "SessionHandler::gc" => "Cleanup old sessions",
    "SessionHandler::open" => "Initialize session",
    "SessionHandler::read" => "Read session data",
    "SessionHandler::write" => "Write session data",
    "SessionHandlerInterface::close" => "Close the session",
    "SessionHandlerInterface::destroy" => "Destroy a session",
    "SessionHandlerInterface::gc" => "Cleanup old sessions",
    "SessionHandlerInterface::open" => "Initialize session",
    "SessionHandlerInterface::read" => "Read session data",
    "SessionHandlerInterface::write" => "Write session data",
    "SessionUpdateTimestampHandlerInterface::updateTimestamp" => "Update timestamp",
    "SessionUpdateTimestampHandlerInterface::validateId" => "Validate ID",
    "setcookie" => "Send a cookie",
    "setlocale" => "Set locale information",
    "setproctitle" => "Set the process title",
    "setrawcookie" => "Send a cookie without urlencoding the cookie value",
    "setthreadtitle" => "Set the thread title",
    "settype" => "Set the type of a variable",
    "shuffle" => "Shuffle an array",
    "SimpleXMLElement::addAttribute" => "Adds an attribute to the SimpleXML element",
    "SimpleXMLElement::addChild" => "Adds a child element to the XML node",
    "SimpleXMLElement::asXML" => "Return a well-formed XML string based on SimpleXML element",
    "SimpleXMLElement::attributes" => "Identifies an element's attributes",
    "SimpleXMLElement::children" => "Finds children of given node",
    "SimpleXMLElement::count" => "Counts the children of an element",
    "SimpleXMLElement::getDocNamespaces" => "Returns namespaces declared in document",
    "SimpleXMLElement::getName" => "Gets the name of the XML element",
    "SimpleXMLElement::getNamespaces" => "Returns namespaces used in document",
    "SimpleXMLElement::registerXPathNamespace" => "Creates a prefix/ns context for the next XPath query",
    "SimpleXMLElement::saveXML" => "Alias of SimpleXMLElement::asXML",
    "SimpleXMLElement::xpath" => "Runs XPath query on XML data",
    "SimpleXMLElement::__construct" => "Creates a new SimpleXMLElement object",
    "SimpleXMLElement::__toString" => "Returns the string content",
    "SimpleXMLIterator::current" => "Returns the current element",
    "SimpleXMLIterator::getChildren" => "Returns the sub-elements of the current element",
    "SimpleXMLIterator::hasChildren" => "Checks whether the current element has sub elements",
    "SimpleXMLIterator::key" => "Return current key",
    "SimpleXMLIterator::next" => "Move to next element",
    "SimpleXMLIterator::rewind" => "Rewind to the first element",
    "SimpleXMLIterator::valid" => "Check whether the current element is valid",
    "sin" => "Sine",
    "sinh" => "Hyperbolic sine",
    "sizeof" => "Alias of count",
    "sleep" => "Delay execution",
    "SNMP::close" => "Close SNMP session",
    "SNMP::get" => "Fetch an SNMP object",
    "SNMP::getErrno" => "Get last error code",
    "SNMP::getError" => "Get last error message",
    "SNMP::set" => "Set the value of an SNMP object",
    "SNMP::setSecurity" => "Configures security-related SNMPv3 session parameters",
    "SNMP::walk" => "Fetch SNMP object subtree",
    "SNMP::__construct" => "Creates SNMP instance representing session to remote SNMP agent",
    "snmpget" => "Fetch an SNMP object",
    "snmpgetnext" => "Fetch the SNMP object which follows the given object id",
    "snmprealwalk" => "Return all objects including their respective object ID within the specified one",
    "snmpset" => "Set the value of an SNMP object",
    "snmpwalk" => "Fetch all the SNMP objects from an agent",
    "snmpwalkoid" => "Query for a tree of information about a network entity",
    "SoapClient::SoapClient" => "SoapClient constructor",
    "SoapClient::__call" => "Calls a SOAP function (deprecated)",
    "SoapClient::__construct" => "SoapClient constructor",
    "SoapClient::__doRequest" => "Performs a SOAP request",
    "SoapClient::__getCookies" => "Get list of cookies",
    "SoapClient::__getFunctions" => "Returns list of available SOAP functions",
    "SoapClient::__getLastRequest" => "Returns last SOAP request",
    "SoapClient::__getLastRequestHeaders" => "Returns the SOAP headers from the last request",
    "SoapClient::__getLastResponse" => "Returns last SOAP response",
    "SoapClient::__getLastResponseHeaders" => "Returns the SOAP headers from the last response",
    "SoapClient::__getTypes" => "Returns a list of SOAP types",
    "SoapClient::__setCookie" => "The __setCookie purpose",
    "SoapClient::__setLocation" => "Sets the location of the Web service to use",
    "SoapClient::__setSoapHeaders" => "Sets SOAP headers for subsequent calls",
    "SoapClient::__soapCall" => "Calls a SOAP function",
    "SoapFault::SoapFault" => "SoapFault constructor",
    "SoapFault::__construct" => "SoapFault constructor",
    "SoapFault::__toString" => "Obtain a string representation of a SoapFault",
    "SoapHeader::SoapHeader" => "SoapHeader constructor",
    "SoapHeader::__construct" => "SoapHeader constructor",
    "SoapParam::SoapParam" => "SoapParam constructor",
    "SoapParam::__construct" => "SoapParam constructor",
    "SoapServer::addFunction" => "Adds one or more functions to handle SOAP requests",
    "SoapServer::addSoapHeader" => "Add a SOAP header to the response",
    "SoapServer::fault" => "Issue SoapServer fault indicating an error",
    "SoapServer::getFunctions" => "Returns list of defined functions",
    "SoapServer::handle" => "Handles a SOAP request",
    "SoapServer::setClass" => "Sets the class which handles SOAP requests",
    "SoapServer::setObject" => "Sets the object which will be used to handle SOAP requests",
    "SoapServer::setPersistence" => "Sets SoapServer persistence mode",
    "SoapServer::SoapServer" => "SoapServer constructor",
    "SoapServer::__construct" => "SoapServer constructor",
    "SoapVar::SoapVar" => "SoapVar constructor",
    "SoapVar::__construct" => "SoapVar constructor",
    "Socket" => "Socket context option listing",
    "SolrClient::addDocument" => "Adds a document to the index",
    "SolrClient::addDocuments" => "Adds a collection of SolrInputDocument instances to the index",
    "SolrClient::commit" => "Finalizes all add/deletes made to the index",
    "SolrClient::deleteById" => "Delete by Id",
    "SolrClient::deleteByIds" => "Deletes by Ids",
    "SolrClient::deleteByQueries" => "Removes all documents matching any of the queries",
    "SolrClient::deleteByQuery" => "Deletes all documents matching the given query",
    "SolrClient::getById" => "Get Document By Id. Utilizes Solr Realtime Get (RTG)",
    "SolrClient::getByIds" => "Get Documents by their Ids. Utilizes Solr Realtime Get (RTG)",
    "SolrClient::getDebug" => "Returns the debug data for the last connection attempt",
    "SolrClient::getOptions" => "Returns the client options set internally",
    "SolrClient::optimize" => "Defragments the index",
    "SolrClient::ping" => "Checks if Solr server is still up",
    "SolrClient::query" => "Sends a query to the server",
    "SolrClient::request" => "Sends a raw update request",
    "SolrClient::rollback" => "Rollbacks all add/deletes made to the index since the last commit",
    "SolrClient::setResponseWriter" => "Sets the response writer used to prepare the response from Solr",
    "SolrClient::setServlet" => "Changes the specified servlet type to a new value",
    "SolrClient::system" => "Retrieve Solr Server information",
    "SolrClient::threads" => "Checks the threads status",
    "SolrClient::__construct" => "Constructor for the SolrClient object",
    "SolrClient::__destruct" => "Destructor for SolrClient",
    "SolrClientException::getInternalInfo" => "Returns internal information where the Exception was thrown",
    "SolrCollapseFunction::getField" => "Returns the field that is being collapsed on",
    "SolrCollapseFunction::getHint" => "Returns collapse hint",
    "SolrCollapseFunction::getMax" => "Returns max parameter",
    "SolrCollapseFunction::getMin" => "Returns min parameter",
    "SolrCollapseFunction::getNullPolicy" => "Returns null policy",
    "SolrCollapseFunction::getSize" => "Returns size parameter",
    "SolrCollapseFunction::setField" => "Sets the field to collapse on",
    "SolrCollapseFunction::setHint" => "Sets collapse hint",
    "SolrCollapseFunction::setMax" => "Selects the group heads by the max value of a numeric field or function query",
    "SolrCollapseFunction::setMin" => "Sets the initial size of the collapse data structures when collapsing on a numeric field only",
    "SolrCollapseFunction::setNullPolicy" => "Sets the NULL Policy",
    "SolrCollapseFunction::setSize" => "Sets the initial size of the collapse data structures when collapsing on a numeric field only",
    "SolrCollapseFunction::__construct" => "Constructor",
    "SolrCollapseFunction::__toString" => "Returns a string representing the constructed collapse function",
    "SolrDisMaxQuery::addBigramPhraseField" => "Adds a Phrase Bigram Field (pf2 parameter)",
    "SolrDisMaxQuery::addBoostQuery" => "Adds a boost query field with value and optional boost (bq parameter)",
    "SolrDisMaxQuery::addPhraseField" => "Adds a Phrase Field (pf parameter)",
    "SolrDisMaxQuery::addQueryField" => "Add a query field with optional boost (qf parameter)",
    "SolrDisMaxQuery::addTrigramPhraseField" => "Adds a Trigram Phrase Field (pf3 parameter)",
    "SolrDisMaxQuery::addUserField" => "Adds a field to User Fields Parameter (uf)",
    "SolrDisMaxQuery::removeBigramPhraseField" => "Removes phrase bigram field (pf2 parameter)",
    "SolrDisMaxQuery::removeBoostQuery" => "Removes a boost query partial by field name (bq)",
    "SolrDisMaxQuery::removePhraseField" => "Removes a Phrase Field (pf parameter)",
    "SolrDisMaxQuery::removeQueryField" => "Removes a Query Field (qf parameter)",
    "SolrDisMaxQuery::removeTrigramPhraseField" => "Removes a Trigram Phrase Field (pf3 parameter)",
    "SolrDisMaxQuery::removeUserField" => "Removes a field from The User Fields Parameter (uf)",
    "SolrDisMaxQuery::setBigramPhraseFields" => "Sets Bigram Phrase Fields and their boosts (and slops) using pf2 parameter",
    "SolrDisMaxQuery::setBigramPhraseSlop" => "Sets Bigram Phrase Slop (ps2 parameter)",
    "SolrDisMaxQuery::setBoostFunction" => "Sets a Boost Function (bf parameter)",
    "SolrDisMaxQuery::setBoostQuery" => "Directly Sets Boost Query Parameter (bq)",
    "SolrDisMaxQuery::setMinimumMatch" => "Set Minimum &quot;Should&quot; Match (mm)",
    "SolrDisMaxQuery::setPhraseFields" => "Sets  Phrase Fields and their boosts (and slops) using pf2 parameter",
    "SolrDisMaxQuery::setPhraseSlop" => "Sets the default slop on phrase queries (ps parameter)",
    "SolrDisMaxQuery::setQueryAlt" => "Set Query Alternate (q.alt parameter)",
    "SolrDisMaxQuery::setQueryPhraseSlop" => "Specifies the amount of slop permitted on phrase queries explicitly included in the user's query string (qf parameter)",
    "SolrDisMaxQuery::setTieBreaker" => "Sets Tie Breaker parameter (tie parameter)",
    "SolrDisMaxQuery::setTrigramPhraseFields" => "Directly Sets Trigram Phrase Fields (pf3 parameter)",
    "SolrDisMaxQuery::setTrigramPhraseSlop" => "Sets Trigram Phrase Slop (ps3 parameter)",
    "SolrDisMaxQuery::setUserFields" => "Sets User Fields parameter (uf)",
    "SolrDisMaxQuery::useDisMaxQueryParser" => "Switch QueryParser to be DisMax Query Parser",
    "SolrDisMaxQuery::useEDisMaxQueryParser" => "Switch QueryParser to be EDisMax",
    "SolrDisMaxQuery::__construct" => "Class Constructor",
    "SolrDocument::addField" => "Adds a field to the document",
    "SolrDocument::clear" => "Drops all the fields in the document",
    "SolrDocument::current" => "Retrieves the current field",
    "SolrDocument::deleteField" => "Removes a field from the document",
    "SolrDocument::fieldExists" => "Checks if a field exists in the document",
    "SolrDocument::getChildDocuments" => "Returns an array of child documents (SolrDocument)",
    "SolrDocument::getChildDocumentsCount" => "Returns the number of child documents",
    "SolrDocument::getField" => "Retrieves a field by name",
    "SolrDocument::getFieldCount" => "Returns the number of fields in this document",
    "SolrDocument::getFieldNames" => "Returns an array of fields names in the document",
    "SolrDocument::getInputDocument" => "Returns a SolrInputDocument equivalent of the object",
    "SolrDocument::hasChildDocuments" => "Checks whether the document has any child documents",
    "SolrDocument::key" => "Retrieves the current key",
    "SolrDocument::merge" => "Merges source to the current SolrDocument",
    "SolrDocument::next" => "Moves the internal pointer to the next field",
    "SolrDocument::offsetExists" => "Checks if a particular field exists",
    "SolrDocument::offsetGet" => "Retrieves a field",
    "SolrDocument::offsetSet" => "Adds a field to the document",
    "SolrDocument::offsetUnset" => "Removes a field",
    "SolrDocument::reset" => "This is an alias to SolrDocument::clear()",
    "SolrDocument::rewind" => "Resets the internal pointer to the beginning",
    "SolrDocument::serialize" => "Used for custom serialization",
    "SolrDocument::sort" => "Sorts the fields in the document",
    "SolrDocument::toArray" => "Returns an array representation of the document",
    "SolrDocument::unserialize" => "Custom serialization of SolrDocument objects",
    "SolrDocument::valid" => "Checks if the current position internally is still valid",
    "SolrDocument::__clone" => "Creates a copy of a SolrDocument object",
    "SolrDocument::__construct" => "Constructor",
    "SolrDocument::__destruct" => "Destructor",
    "SolrDocument::__get" => "Access the field as a property",
    "SolrDocument::__isset" => "Checks if a field exists",
    "SolrDocument::__set" => "Adds another field to the document",
    "SolrDocument::__unset" => "Removes a field from the document",
    "SolrDocumentField::__construct" => "Constructor",
    "SolrDocumentField::__destruct" => "Destructor",
    "SolrException::getInternalInfo" => "Returns internal information where the Exception was thrown",
    "SolrGenericResponse::__construct" => "Constructor",
    "SolrGenericResponse::__destruct" => "Destructor",
    "SolrIllegalArgumentException::getInternalInfo" => "Returns internal information where the Exception was thrown",
    "SolrIllegalOperationException::getInternalInfo" => "Returns internal information where the Exception was thrown",
    "SolrInputDocument::addChildDocument" => "Adds a child document for block indexing",
    "SolrInputDocument::addChildDocuments" => "Adds an array of child documents",
    "SolrInputDocument::addField" => "Adds a field to the document",
    "SolrInputDocument::clear" => "Resets the input document",
    "SolrInputDocument::deleteField" => "Removes a field from the document",
    "SolrInputDocument::fieldExists" => "Checks if a field exists",
    "SolrInputDocument::getBoost" => "Retrieves the current boost value for the document",
    "SolrInputDocument::getChildDocuments" => "Returns an array of child documents (SolrInputDocument)",
    "SolrInputDocument::getChildDocumentsCount" => "Returns the number of child documents",
    "SolrInputDocument::getField" => "Retrieves a field by name",
    "SolrInputDocument::getFieldBoost" => "Retrieves the boost value for a particular field",
    "SolrInputDocument::getFieldCount" => "Returns the number of fields in the document",
    "SolrInputDocument::getFieldNames" => "Returns an array containing all the fields in the document",
    "SolrInputDocument::hasChildDocuments" => "Returns true if the document has any child documents",
    "SolrInputDocument::merge" => "Merges one input document into another",
    "SolrInputDocument::reset" => "This is an alias of SolrInputDocument::clear",
    "SolrInputDocument::setBoost" => "Sets the boost value for this document",
    "SolrInputDocument::setFieldBoost" => "Sets the index-time boost value for a field",
    "SolrInputDocument::sort" => "Sorts the fields within the document",
    "SolrInputDocument::toArray" => "Returns an array representation of the input document",
    "SolrInputDocument::__clone" => "Creates a copy of a SolrDocument",
    "SolrInputDocument::__construct" => "Constructor",
    "SolrInputDocument::__destruct" => "Destructor",
    "SolrModifiableParams::__construct" => "Constructor",
    "SolrModifiableParams::__destruct" => "Destructor",
    "SolrObject::getPropertyNames" => "Returns an array of all the names of the properties",
    "SolrObject::offsetExists" => "Checks if the property exists",
    "SolrObject::offsetGet" => "Used to retrieve a property",
    "SolrObject::offsetSet" => "Sets the value for a property",
    "SolrObject::offsetUnset" => "Unsets the value for the property",
    "SolrObject::__construct" => "Creates Solr object",
    "SolrObject::__destruct" => "Destructor",
    "SolrParams::add" => "This is an alias for SolrParams::addParam",
    "SolrParams::addParam" => "Adds a parameter to the object",
    "SolrParams::get" => "This is an alias for SolrParams::getParam",
    "SolrParams::getParam" => "Returns a parameter value",
    "SolrParams::getParams" => "Returns an array of non URL-encoded parameters",
    "SolrParams::getPreparedParams" => "Returns an array of URL-encoded parameters",
    "SolrParams::serialize" => "Used for custom serialization",
    "SolrParams::set" => "An alias of SolrParams::setParam",
    "SolrParams::setParam" => "Sets the parameter to the specified value",
    "SolrParams::toString" => "Returns all the name-value pair parameters in the object",
    "SolrParams::unserialize" => "Used for custom serialization",
    "SolrPingResponse::getResponse" => "Returns the response from the server",
    "SolrPingResponse::__construct" => "Constructor",
    "SolrPingResponse::__destruct" => "Destructor",
    "SolrQuery::addExpandFilterQuery" => "Overrides main filter query, determines which documents to include in the main group",
    "SolrQuery::addExpandSortField" => "Orders the documents within the expanded groups (expand.sort parameter)",
    "SolrQuery::addFacetDateField" => "Maps to facet.date",
    "SolrQuery::addFacetDateOther" => "Adds another facet.date.other parameter",
    "SolrQuery::addFacetField" => "Adds another field to the facet",
    "SolrQuery::addFacetQuery" => "Adds a facet query",
    "SolrQuery::addField" => "Specifies which fields to return in the result",
    "SolrQuery::addFilterQuery" => "Specifies a filter query",
    "SolrQuery::addGroupField" => "Add a field to be used to group results",
    "SolrQuery::addGroupFunction" => "Allows grouping results based on the unique values of a function query (group.func parameter)",
    "SolrQuery::addGroupQuery" => "Allows grouping of documents that match the given query",
    "SolrQuery::addGroupSortField" => "Add a group sort field (group.sort parameter)",
    "SolrQuery::addHighlightField" => "Maps to hl.fl",
    "SolrQuery::addMltField" => "Sets a field to use for similarity",
    "SolrQuery::addMltQueryField" => "Maps to mlt.qf",
    "SolrQuery::addSortField" => "Used to control how the results should be sorted",
    "SolrQuery::addStatsFacet" => "Requests a return of sub results for values within the given facet",
    "SolrQuery::addStatsField" => "Maps to stats.field parameter",
    "SolrQuery::collapse" => "Collapses the result set to a single document per group",
    "SolrQuery::getExpand" => "Returns true if group expanding is enabled",
    "SolrQuery::getExpandFilterQueries" => "Returns the expand filter queries",
    "SolrQuery::getExpandQuery" => "Returns the expand query expand.q parameter",
    "SolrQuery::getExpandRows" => "Returns The number of rows to display in each group (expand.rows)",
    "SolrQuery::getExpandSortFields" => "Returns an array of fields",
    "SolrQuery::getFacet" => "Returns the value of the facet parameter",
    "SolrQuery::getFacetDateEnd" => "Returns the value for the facet.date.end parameter",
    "SolrQuery::getFacetDateFields" => "Returns all the facet.date fields",
    "SolrQuery::getFacetDateGap" => "Returns the value of the facet.date.gap parameter",
    "SolrQuery::getFacetDateHardEnd" => "Returns the value of the facet.date.hardend parameter",
    "SolrQuery::getFacetDateOther" => "Returns the value for the facet.date.other parameter",
    "SolrQuery::getFacetDateStart" => "Returns the  lower bound for the first date range for all date faceting on this field",
    "SolrQuery::getFacetFields" => "Returns all the facet fields",
    "SolrQuery::getFacetLimit" => "Returns the maximum number of constraint counts that should be returned for the facet fields",
    "SolrQuery::getFacetMethod" => "Returns the value of the facet.method parameter",
    "SolrQuery::getFacetMinCount" => "Returns the minimum counts for facet fields should be included in the response",
    "SolrQuery::getFacetMissing" => "Returns the current state of the facet.missing parameter",
    "SolrQuery::getFacetOffset" => "Returns an offset into the list of constraints to be used for pagination",
    "SolrQuery::getFacetPrefix" => "Returns the facet prefix",
    "SolrQuery::getFacetQueries" => "Returns all the facet queries",
    "SolrQuery::getFacetSort" => "Returns the facet sort type",
    "SolrQuery::getFields" => "Returns the list of fields that will be returned in the response",
    "SolrQuery::getFilterQueries" => "Returns an array of filter queries",
    "SolrQuery::getGroup" => "Returns true if grouping is enabled",
    "SolrQuery::getGroupCachePercent" => "Returns group cache percent value",
    "SolrQuery::getGroupFacet" => "Returns the group.facet parameter value",
    "SolrQuery::getGroupFields" => "Returns group fields (group.field parameter values)",
    "SolrQuery::getGroupFormat" => "Returns the group.format value",
    "SolrQuery::getGroupFunctions" => "Returns group functions (group.func parameter values)",
    "SolrQuery::getGroupLimit" => "Returns the group.limit value",
    "SolrQuery::getGroupMain" => "Returns the group.main value",
    "SolrQuery::getGroupNGroups" => "Returns the group.ngroups value",
    "SolrQuery::getGroupOffset" => "Returns the group.offset value",
    "SolrQuery::getGroupQueries" => "Returns all the group.query parameter values",
    "SolrQuery::getGroupSortFields" => "Returns the group.sort value",
    "SolrQuery::getGroupTruncate" => "Returns the group.truncate value",
    "SolrQuery::getHighlight" => "Returns the state of the hl parameter",
    "SolrQuery::getHighlightAlternateField" => "Returns the highlight field to use as backup or default",
    "SolrQuery::getHighlightFields" => "Returns all the fields that Solr should generate highlighted snippets for",
    "SolrQuery::getHighlightFormatter" => "Returns the formatter for the highlighted output",
    "SolrQuery::getHighlightFragmenter" => "Returns the text snippet generator for highlighted text",
    "SolrQuery::getHighlightFragsize" => "Returns the number of characters of fragments to consider for highlighting",
    "SolrQuery::getHighlightHighlightMultiTerm" => "Returns whether or not to enable highlighting for range/wildcard/fuzzy/prefix queries",
    "SolrQuery::getHighlightMaxAlternateFieldLength" => "Returns the maximum number of characters of the field to return",
    "SolrQuery::getHighlightMaxAnalyzedChars" => "Returns the maximum number of characters into a document to look for suitable snippets",
    "SolrQuery::getHighlightMergeContiguous" => "Returns whether or not the collapse contiguous fragments into a single fragment",
    "SolrQuery::getHighlightRegexMaxAnalyzedChars" => "Returns the maximum number of characters from a field when using the regex fragmenter",
    "SolrQuery::getHighlightRegexPattern" => "Returns the regular expression for fragmenting",
    "SolrQuery::getHighlightRegexSlop" => "Returns the deviation factor from the ideal fragment size",
    "SolrQuery::getHighlightRequireFieldMatch" => "Returns if a field will only be highlighted if the query matched in this particular field",
    "SolrQuery::getHighlightSimplePost" => "Returns the text which appears after a highlighted term",
    "SolrQuery::getHighlightSimplePre" => "Returns the text which appears before a highlighted term",
    "SolrQuery::getHighlightSnippets" => "Returns the maximum number of highlighted snippets to generate per field",
    "SolrQuery::getHighlightUsePhraseHighlighter" => "Returns the state of the hl.usePhraseHighlighter parameter",
    "SolrQuery::getMlt" => "Returns whether or not MoreLikeThis results should be enabled",
    "SolrQuery::getMltBoost" => "Returns whether or not the query will be boosted by the interesting term relevance",
    "SolrQuery::getMltCount" => "Returns the number of similar documents to return for each result",
    "SolrQuery::getMltFields" => "Returns all the fields to use for similarity",
    "SolrQuery::getMltMaxNumQueryTerms" => "Returns the maximum number of query terms that will be included in any generated query",
    "SolrQuery::getMltMaxNumTokens" => "Returns the maximum number of tokens to parse in each document field that is not stored with TermVector support",
    "SolrQuery::getMltMaxWordLength" => "Returns the maximum word length above which words will be ignored",
    "SolrQuery::getMltMinDocFrequency" => "Returns the treshold frequency at which words will be ignored which do not occur in at least this many docs",
    "SolrQuery::getMltMinTermFrequency" => "Returns the frequency below which terms will be ignored in the source document",
    "SolrQuery::getMltMinWordLength" => "Returns the minimum word length below which words will be ignored",
    "SolrQuery::getMltQueryFields" => "Returns the query fields and their boosts",
    "SolrQuery::getQuery" => "Returns the main query",
    "SolrQuery::getRows" => "Returns the maximum number of documents",
    "SolrQuery::getSortFields" => "Returns all the sort fields",
    "SolrQuery::getStart" => "Returns the offset in the complete result set",
    "SolrQuery::getStats" => "Returns whether or not stats is enabled",
    "SolrQuery::getStatsFacets" => "Returns all the stats facets that were set",
    "SolrQuery::getStatsFields" => "Returns all the statistics fields",
    "SolrQuery::getTerms" => "Returns whether or not the TermsComponent is enabled",
    "SolrQuery::getTermsField" => "Returns the field from which the terms are retrieved",
    "SolrQuery::getTermsIncludeLowerBound" => "Returns whether or not to include the lower bound in the result set",
    "SolrQuery::getTermsIncludeUpperBound" => "Returns whether or not to include the upper bound term in the result set",
    "SolrQuery::getTermsLimit" => "Returns the maximum number of terms Solr should return",
    "SolrQuery::getTermsLowerBound" => "Returns the term to start at",
    "SolrQuery::getTermsMaxCount" => "Returns the maximum document frequency",
    "SolrQuery::getTermsMinCount" => "Returns the minimum document frequency to return in order to be included",
    "SolrQuery::getTermsPrefix" => "Returns the term prefix",
    "SolrQuery::getTermsReturnRaw" => "Whether or not to return raw characters",
    "SolrQuery::getTermsSort" => "Returns an integer indicating how terms are sorted",
    "SolrQuery::getTermsUpperBound" => "Returns the term to stop at",
    "SolrQuery::getTimeAllowed" => "Returns the time in milliseconds allowed for the query to finish",
    "SolrQuery::removeExpandFilterQuery" => "Removes an expand filter query",
    "SolrQuery::removeExpandSortField" => "Removes an expand sort field from the expand.sort parameter",
    "SolrQuery::removeFacetDateField" => "Removes one of the facet date fields",
    "SolrQuery::removeFacetDateOther" => "Removes one of the facet.date.other parameters",
    "SolrQuery::removeFacetField" => "Removes one of the facet.date parameters",
    "SolrQuery::removeFacetQuery" => "Removes one of the facet.query parameters",
    "SolrQuery::removeField" => "Removes a field from the list of fields",
    "SolrQuery::removeFilterQuery" => "Removes a filter query",
    "SolrQuery::removeHighlightField" => "Removes one of the fields used for highlighting",
    "SolrQuery::removeMltField" => "Removes one of the moreLikeThis fields",
    "SolrQuery::removeMltQueryField" => "Removes one of the moreLikeThis query fields",
    "SolrQuery::removeSortField" => "Removes one of the sort fields",
    "SolrQuery::removeStatsFacet" => "Removes one of the stats.facet parameters",
    "SolrQuery::removeStatsField" => "Removes one of the stats.field parameters",
    "SolrQuery::setEchoHandler" => "Toggles the echoHandler parameter",
    "SolrQuery::setEchoParams" => "Determines what kind of parameters to include in the response",
    "SolrQuery::setExpand" => "Enables/Disables the Expand Component",
    "SolrQuery::setExpandQuery" => "Sets the expand.q parameter",
    "SolrQuery::setExpandRows" => "Sets the number of rows to display in each group (expand.rows). Server Default 5",
    "SolrQuery::setExplainOther" => "Sets the explainOther common query parameter",
    "SolrQuery::setFacet" => "Maps to the facet parameter. Enables or disables facetting",
    "SolrQuery::setFacetDateEnd" => "Maps to facet.date.end",
    "SolrQuery::setFacetDateGap" => "Maps to facet.date.gap",
    "SolrQuery::setFacetDateHardEnd" => "Maps to facet.date.hardend",
    "SolrQuery::setFacetDateStart" => "Maps to facet.date.start",
    "SolrQuery::setFacetEnumCacheMinDefaultFrequency" => "Sets the minimum document frequency used for determining term count",
    "SolrQuery::setFacetLimit" => "Maps to facet.limit",
    "SolrQuery::setFacetMethod" => "Specifies the type of algorithm to use when faceting a field",
    "SolrQuery::setFacetMinCount" => "Maps to facet.mincount",
    "SolrQuery::setFacetMissing" => "Maps to facet.missing",
    "SolrQuery::setFacetOffset" => "Sets the offset into the list of constraints to allow for pagination",
    "SolrQuery::setFacetPrefix" => "Specifies a string prefix with which to limits the terms on which to facet",
    "SolrQuery::setFacetSort" => "Determines the ordering of the facet field constraints",
    "SolrQuery::setGroup" => "Enable/Disable result grouping (group parameter)",
    "SolrQuery::setGroupCachePercent" => "Enables caching for result grouping",
    "SolrQuery::setGroupFacet" => "Sets group.facet parameter",
    "SolrQuery::setGroupFormat" => "Sets the group format, result structure (group.format parameter)",
    "SolrQuery::setGroupLimit" => "Specifies the number of results to return for each group. The server default value is 1",
    "SolrQuery::setGroupMain" => "If true, the result of the first field grouping command is used as the main result list in the response, using group.format=simple",
    "SolrQuery::setGroupNGroups" => "If true, Solr includes the number of groups that have matched the query in the results",
    "SolrQuery::setGroupOffset" => "Sets the group.offset parameter",
    "SolrQuery::setGroupTruncate" => "If true, facet counts are based on the most relevant document of each group matching the query",
    "SolrQuery::setHighlight" => "Enables or disables highlighting",
    "SolrQuery::setHighlightAlternateField" => "Specifies the backup field to use",
    "SolrQuery::setHighlightFormatter" => "Specify a formatter for the highlight output",
    "SolrQuery::setHighlightFragmenter" => "Sets a text snippet generator for highlighted text",
    "SolrQuery::setHighlightFragsize" => "The size of fragments to consider for highlighting",
    "SolrQuery::setHighlightHighlightMultiTerm" => "Use SpanScorer to highlight phrase terms",
    "SolrQuery::setHighlightMaxAlternateFieldLength" => "Sets the maximum number of characters of the field to return",
    "SolrQuery::setHighlightMaxAnalyzedChars" => "Specifies the number of characters into a document to look for suitable snippets",
    "SolrQuery::setHighlightMergeContiguous" => "Whether or not to collapse contiguous fragments into a single fragment",
    "SolrQuery::setHighlightRegexMaxAnalyzedChars" => "Specify the maximum number of characters to analyze",
    "SolrQuery::setHighlightRegexPattern" => "Specify the regular expression for fragmenting",
    "SolrQuery::setHighlightRegexSlop" => "Sets the factor by which the regex fragmenter can stray from the ideal fragment size",
    "SolrQuery::setHighlightRequireFieldMatch" => "Require field matching during highlighting",
    "SolrQuery::setHighlightSimplePost" => "Sets the text which appears after a highlighted term",
    "SolrQuery::setHighlightSimplePre" => "Sets the text which appears before a highlighted term",
    "SolrQuery::setHighlightSnippets" => "Sets the maximum number of highlighted snippets to generate per field",
    "SolrQuery::setHighlightUsePhraseHighlighter" => "Whether to highlight phrase terms only when they appear within the query phrase",
    "SolrQuery::setMlt" => "Enables or disables moreLikeThis",
    "SolrQuery::setMltBoost" => "Set if the query will be boosted by the interesting term relevance",
    "SolrQuery::setMltCount" => "Set the number of similar documents to return for each result",
    "SolrQuery::setMltMaxNumQueryTerms" => "Sets the maximum number of query terms included",
    "SolrQuery::setMltMaxNumTokens" => "Specifies the maximum number of tokens to parse",
    "SolrQuery::setMltMaxWordLength" => "Sets the maximum word length",
    "SolrQuery::setMltMinDocFrequency" => "Sets the mltMinDoc frequency",
    "SolrQuery::setMltMinTermFrequency" => "Sets the frequency below which terms will be ignored in the source docs",
    "SolrQuery::setMltMinWordLength" => "Sets the minimum word length",
    "SolrQuery::setOmitHeader" => "Exclude the header from the returned results",
    "SolrQuery::setQuery" => "Sets the search query",
    "SolrQuery::setRows" => "Specifies the maximum number of rows to return in the result",
    "SolrQuery::setShowDebugInfo" => "Flag to show debug information",
    "SolrQuery::setStart" => "Specifies the number of rows to skip",
    "SolrQuery::setStats" => "Enables or disables the Stats component",
    "SolrQuery::setTerms" => "Enables or disables the TermsComponent",
    "SolrQuery::setTermsField" => "Sets the name of the field to get the Terms from",
    "SolrQuery::setTermsIncludeLowerBound" => "Include the lower bound term in the result set",
    "SolrQuery::setTermsIncludeUpperBound" => "Include the upper bound term in the result set",
    "SolrQuery::setTermsLimit" => "Sets the maximum number of terms to return",
    "SolrQuery::setTermsLowerBound" => "Specifies the Term to start from",
    "SolrQuery::setTermsMaxCount" => "Sets the maximum document frequency",
    "SolrQuery::setTermsMinCount" => "Sets the minimum document frequency",
    "SolrQuery::setTermsPrefix" => "Restrict matches to terms that start with the prefix",
    "SolrQuery::setTermsReturnRaw" => "Return the raw characters of the indexed term",
    "SolrQuery::setTermsSort" => "Specifies how to sort the returned terms",
    "SolrQuery::setTermsUpperBound" => "Sets the term to stop at",
    "SolrQuery::setTimeAllowed" => "The time allowed for search to finish",
    "SolrQuery::__construct" => "Constructor",
    "SolrQuery::__destruct" => "Destructor",
    "SolrQueryResponse::__construct" => "Constructor",
    "SolrQueryResponse::__destruct" => "Destructor",
    "SolrResponse::getDigestedResponse" => "Returns the XML response as serialized PHP data",
    "SolrResponse::getHttpStatus" => "Returns the HTTP status of the response",
    "SolrResponse::getHttpStatusMessage" => "Returns more details on the HTTP status",
    "SolrResponse::getRawRequest" => "Returns the raw request sent to the Solr server",
    "SolrResponse::getRawRequestHeaders" => "Returns the raw request headers sent to the Solr server",
    "SolrResponse::getRawResponse" => "Returns the raw response from the server",
    "SolrResponse::getRawResponseHeaders" => "Returns the raw response headers from the server",
    "SolrResponse::getRequestUrl" => "Returns the full URL the request was sent to",
    "SolrResponse::getResponse" => "Returns a SolrObject representing the XML response from the server",
    "SolrResponse::setParseMode" => "Sets the parse mode",
    "SolrResponse::success" => "Was the request a success",
    "SolrServerException::getInternalInfo" => "Returns internal information where the Exception was thrown",
    "SolrUpdateResponse::__construct" => "Constructor",
    "SolrUpdateResponse::__destruct" => "Destructor",
    "SolrUtils::digestXmlResponse" => "Parses an response XML string into a SolrObject",
    "SolrUtils::escapeQueryChars" => "Escapes a lucene query string",
    "SolrUtils::getSolrVersion" => "Returns the current version of the Solr extension",
    "SolrUtils::queryPhrase" => "Prepares a phrase from an unescaped lucene string",
    "sort" => "Sort an array",
    "soundex" => "Calculate the soundex key of a string",
    "SphinxClient::addQuery" => "Add query to multi-query batch",
    "SphinxClient::buildExcerpts" => "Build text snippets",
    "SphinxClient::buildKeywords" => "Extract keywords from query",
    "SphinxClient::close" => "Closes previously opened persistent connection",
    "SphinxClient::escapeString" => "Escape special characters",
    "SphinxClient::getLastError" => "Get the last error message",
    "SphinxClient::getLastWarning" => "Get the last warning",
    "SphinxClient::open" => "Opens persistent connection to the server",
    "SphinxClient::query" => "Execute search query",
    "SphinxClient::resetFilters" => "Clear all filters",
    "SphinxClient::resetGroupBy" => "Clear all group-by settings",
    "SphinxClient::runQueries" => "Run a batch of search queries",
    "SphinxClient::setArrayResult" => "Change the format of result set array",
    "SphinxClient::setConnectTimeout" => "Set connection timeout",
    "SphinxClient::setFieldWeights" => "Set field weights",
    "SphinxClient::setFilter" => "Add new integer values set filter",
    "SphinxClient::setFilterFloatRange" => "Add new float range filter",
    "SphinxClient::setFilterRange" => "Add new integer range filter",
    "SphinxClient::setGeoAnchor" => "Set anchor point for a geosphere distance calculations",
    "SphinxClient::setGroupBy" => "Set grouping attribute",
    "SphinxClient::setGroupDistinct" => "Set attribute name for per-group distinct values count calculations",
    "SphinxClient::setIDRange" => "Set a range of accepted document IDs",
    "SphinxClient::setIndexWeights" => "Set per-index weights",
    "SphinxClient::setLimits" => "Set offset and limit of the result set",
    "SphinxClient::setMatchMode" => "Set full-text query matching mode",
    "SphinxClient::setMaxQueryTime" => "Set maximum query time",
    "SphinxClient::setRankingMode" => "Set ranking mode",
    "SphinxClient::setRetries" => "Set retry count and delay",
    "SphinxClient::setSelect" => "Set select clause",
    "SphinxClient::setServer" => "Set searchd host and port",
    "SphinxClient::setSortMode" => "Set matches sorting mode",
    "SphinxClient::status" => "Queries searchd status",
    "SphinxClient::updateAttributes" => "Update document attributes",
    "SphinxClient::__construct" => "Create a new SphinxClient object",
    "SplDoublyLinkedList::add" => "Add/insert a new value at the specified index",
    "SplDoublyLinkedList::bottom" => "Peeks at the node from the beginning of the doubly linked list",
    "SplDoublyLinkedList::count" => "Counts the number of elements in the doubly linked list",
    "SplDoublyLinkedList::current" => "Return current array entry",
    "SplDoublyLinkedList::getIteratorMode" => "Returns the mode of iteration",
    "SplDoublyLinkedList::isEmpty" => "Checks whether the doubly linked list is empty",
    "SplDoublyLinkedList::key" => "Return current node index",
    "SplDoublyLinkedList::next" => "Move to next entry",
    "SplDoublyLinkedList::offsetExists" => "Returns whether the requested \$index exists",
    "SplDoublyLinkedList::offsetGet" => "Returns the value at the specified \$index",
    "SplDoublyLinkedList::offsetSet" => "Sets the value at the specified \$index to \$newval",
    "SplDoublyLinkedList::offsetUnset" => "Unsets the value at the specified \$index",
    "SplDoublyLinkedList::pop" => "Pops a node from the end of the doubly linked list",
    "SplDoublyLinkedList::prev" => "Move to previous entry",
    "SplDoublyLinkedList::push" => "Pushes an element at the end of the doubly linked list",
    "SplDoublyLinkedList::rewind" => "Rewind iterator back to the start",
    "SplDoublyLinkedList::serialize" => "Serializes the storage",
    "SplDoublyLinkedList::setIteratorMode" => "Sets the mode of iteration",
    "SplDoublyLinkedList::shift" => "Shifts a node from the beginning of the doubly linked list",
    "SplDoublyLinkedList::top" => "Peeks at the node from the end of the doubly linked list",
    "SplDoublyLinkedList::unserialize" => "Unserializes the storage",
    "SplDoublyLinkedList::unshift" => "Prepends the doubly linked list with an element",
    "SplDoublyLinkedList::valid" => "Check whether the doubly linked list contains more nodes",
    "SplDoublyLinkedList::__construct" => "Constructs a new doubly linked list",
    "SplEnum::getConstList" => "Returns all consts (possible values) as an array",
    "SplFileInfo::getATime" => "Gets last access time of the file",
    "SplFileInfo::getBasename" => "Gets the base name of the file",
    "SplFileInfo::getCTime" => "Gets the inode change time",
    "SplFileInfo::getExtension" => "Gets the file extension",
    "SplFileInfo::getFileInfo" => "Gets an SplFileInfo object for the file",
    "SplFileInfo::getFilename" => "Gets the filename",
    "SplFileInfo::getGroup" => "Gets the file group",
    "SplFileInfo::getInode" => "Gets the inode for the file",
    "SplFileInfo::getLinkTarget" => "Gets the target of a link",
    "SplFileInfo::getMTime" => "Gets the last modified time",
    "SplFileInfo::getOwner" => "Gets the owner of the file",
    "SplFileInfo::getPath" => "Gets the path without filename",
    "SplFileInfo::getPathInfo" => "Gets an SplFileInfo object for the path",
    "SplFileInfo::getPathname" => "Gets the path to the file",
    "SplFileInfo::getPerms" => "Gets file permissions",
    "SplFileInfo::getRealPath" => "Gets absolute path to file",
    "SplFileInfo::getSize" => "Gets file size",
    "SplFileInfo::getType" => "Gets file type",
    "SplFileInfo::isDir" => "Tells if the file is a directory",
    "SplFileInfo::isExecutable" => "Tells if the file is executable",
    "SplFileInfo::isFile" => "Tells if the object references a regular file",
    "SplFileInfo::isLink" => "Tells if the file is a link",
    "SplFileInfo::isReadable" => "Tells if file is readable",
    "SplFileInfo::isWritable" => "Tells if the entry is writable",
    "SplFileInfo::openFile" => "Gets an SplFileObject object for the file",
    "SplFileInfo::setFileClass" => "Sets the class used with SplFileInfo::openFile",
    "SplFileInfo::setInfoClass" => "Sets the class used with SplFileInfo::getFileInfo and SplFileInfo::getPathInfo",
    "SplFileInfo::__construct" => "Construct a new SplFileInfo object",
    "SplFileInfo::__toString" => "Returns the path to the file as a string",
    "SplFileObject::current" => "Retrieve current line of file",
    "SplFileObject::eof" => "Reached end of file",
    "SplFileObject::fflush" => "Flushes the output to the file",
    "SplFileObject::fgetc" => "Gets character from file",
    "SplFileObject::fgetcsv" => "Gets line from file and parse as CSV fields",
    "SplFileObject::fgets" => "Gets line from file",
    "SplFileObject::fgetss" => "Gets line from file and strip HTML tags",
    "SplFileObject::flock" => "Portable file locking",
    "SplFileObject::fpassthru" => "Output all remaining data on a file pointer",
    "SplFileObject::fputcsv" => "Write a field array as a CSV line",
    "SplFileObject::fread" => "Read from file",
    "SplFileObject::fscanf" => "Parses input from file according to a format",
    "SplFileObject::fseek" => "Seek to a position",
    "SplFileObject::fstat" => "Gets information about the file",
    "SplFileObject::ftell" => "Return current file position",
    "SplFileObject::ftruncate" => "Truncates the file to a given length",
    "SplFileObject::fwrite" => "Write to file",
    "SplFileObject::getChildren" => "No purpose",
    "SplFileObject::getCsvControl" => "Get the delimiter, enclosure and escape character for CSV",
    "SplFileObject::getCurrentLine" => "Alias of SplFileObject::fgets",
    "SplFileObject::getFlags" => "Gets flags for the SplFileObject",
    "SplFileObject::getMaxLineLen" => "Get maximum line length",
    "SplFileObject::hasChildren" => "SplFileObject does not have children",
    "SplFileObject::key" => "Get line number",
    "SplFileObject::next" => "Read next line",
    "SplFileObject::rewind" => "Rewind the file to the first line",
    "SplFileObject::seek" => "Seek to specified line",
    "SplFileObject::setCsvControl" => "Set the delimiter, enclosure and escape character for CSV",
    "SplFileObject::setFlags" => "Sets flags for the SplFileObject",
    "SplFileObject::setMaxLineLen" => "Set maximum line length",
    "SplFileObject::valid" => "Not at EOF",
    "SplFileObject::__construct" => "Construct a new file object",
    "SplFileObject::__toString" => "Alias of SplFileObject::current",
    "SplFixedArray::count" => "Returns the size of the array",
    "SplFixedArray::current" => "Return current array entry",
    "SplFixedArray::fromArray" => "Import a PHP array in a SplFixedArray instance",
    "SplFixedArray::getSize" => "Gets the size of the array",
    "SplFixedArray::key" => "Return current array index",
    "SplFixedArray::next" => "Move to next entry",
    "SplFixedArray::offsetExists" => "Returns whether the requested index exists",
    "SplFixedArray::offsetGet" => "Returns the value at the specified index",
    "SplFixedArray::offsetSet" => "Sets a new value at a specified index",
    "SplFixedArray::offsetUnset" => "Unsets the value at the specified \$index",
    "SplFixedArray::rewind" => "Rewind iterator back to the start",
    "SplFixedArray::setSize" => "Change the size of an array",
    "SplFixedArray::toArray" => "Returns a PHP array from the fixed array",
    "SplFixedArray::valid" => "Check whether the array contains more elements",
    "SplFixedArray::__construct" => "Constructs a new fixed array",
    "SplFixedArray::__wakeup" => "Reinitialises the array after being unserialised",
    "SplHeap::compare" => "Compare elements in order to place them correctly in the heap while sifting up",
    "SplHeap::count" => "Counts the number of elements in the heap",
    "SplHeap::current" => "Return current node pointed by the iterator",
    "SplHeap::extract" => "Extracts a node from top of the heap and sift up",
    "SplHeap::insert" => "Inserts an element in the heap by sifting it up",
    "SplHeap::isCorrupted" => "Tells if the heap is in a corrupted state",
    "SplHeap::isEmpty" => "Checks whether the heap is empty",
    "SplHeap::key" => "Return current node index",
    "SplHeap::next" => "Move to the next node",
    "SplHeap::recoverFromCorruption" => "Recover from the corrupted state and allow further actions on the heap",
    "SplHeap::rewind" => "Rewind iterator back to the start (no-op)",
    "SplHeap::top" => "Peeks at the node from the top of the heap",
    "SplHeap::valid" => "Check whether the heap contains more nodes",
    "SplHeap::__construct" => "Constructs a new empty heap",
    "split" => "Split string into array by regular expression",
    "spliti" => "Split string into array by regular expression case insensitive",
    "SplMaxHeap::compare" => "Compare elements in order to place them correctly in the heap while sifting up",
    "SplMinHeap::compare" => "Compare elements in order to place them correctly in the heap while sifting up",
    "SplObjectStorage::addAll" => "Adds all objects from another storage",
    "SplObjectStorage::attach" => "Adds an object in the storage",
    "SplObjectStorage::contains" => "Checks if the storage contains a specific object",
    "SplObjectStorage::count" => "Returns the number of objects in the storage",
    "SplObjectStorage::current" => "Returns the current storage entry",
    "SplObjectStorage::detach" => "Removes an object from the storage",
    "SplObjectStorage::getHash" => "Calculate a unique identifier for the contained objects",
    "SplObjectStorage::getInfo" => "Returns the data associated with the current iterator entry",
    "SplObjectStorage::key" => "Returns the index at which the iterator currently is",
    "SplObjectStorage::next" => "Move to the next entry",
    "SplObjectStorage::offsetExists" => "Checks whether an object exists in the storage",
    "SplObjectStorage::offsetGet" => "Returns the data associated with an object",
    "SplObjectStorage::offsetSet" => "Associates data to an object in the storage",
    "SplObjectStorage::offsetUnset" => "Removes an object from the storage",
    "SplObjectStorage::removeAll" => "Removes objects contained in another storage from the current storage",
    "SplObjectStorage::removeAllExcept" => "Removes all objects except for those contained in another storage from the current storage",
    "SplObjectStorage::rewind" => "Rewind the iterator to the first storage element",
    "SplObjectStorage::serialize" => "Serializes the storage",
    "SplObjectStorage::setInfo" => "Sets the data associated with the current iterator entry",
    "SplObjectStorage::unserialize" => "Unserializes a storage from its string representation",
    "SplObjectStorage::valid" => "Returns if the current iterator entry is valid",
    "SplObserver::update" => "Receive update from subject",
    "SplPriorityQueue::compare" => "Compare priorities in order to place elements correctly in the heap while sifting up",
    "SplPriorityQueue::count" => "Counts the number of elements in the queue",
    "SplPriorityQueue::current" => "Return current node pointed by the iterator",
    "SplPriorityQueue::extract" => "Extracts a node from top of the heap and shift up",
    "SplPriorityQueue::getExtractFlags" => "Get the flags of extraction",
    "SplPriorityQueue::insert" => "Inserts an element in the queue by sifting it up",
    "SplPriorityQueue::isCorrupted" => "Tells if the priority queue is in a corrupted state",
    "SplPriorityQueue::isEmpty" => "Checks whether the queue is empty",
    "SplPriorityQueue::key" => "Return current node index",
    "SplPriorityQueue::next" => "Move to the next node",
    "SplPriorityQueue::recoverFromCorruption" => "Recover from the corrupted state and allow further actions on the queue",
    "SplPriorityQueue::rewind" => "Rewind iterator back to the start (no-op)",
    "SplPriorityQueue::setExtractFlags" => "Sets the mode of extraction",
    "SplPriorityQueue::top" => "Peeks at the node from the top of the queue",
    "SplPriorityQueue::valid" => "Check whether the queue contains more nodes",
    "SplPriorityQueue::__construct" => "Constructs a new empty queue",
    "SplQueue::dequeue" => "Dequeues a node from the queue",
    "SplQueue::enqueue" => "Adds an element to the queue",
    "SplQueue::setIteratorMode" => "Sets the mode of iteration",
    "SplQueue::__construct" => "Constructs a new queue implemented using a doubly linked list",
    "SplStack::setIteratorMode" => "Sets the mode of iteration",
    "SplStack::__construct" => "Constructs a new stack implemented using a doubly linked list",
    "SplSubject::attach" => "Attach an SplObserver",
    "SplSubject::detach" => "Detach an observer",
    "SplSubject::notify" => "Notify an observer",
    "SplTempFileObject::__construct" => "Construct a new temporary file object",
    "SplType::__construct" => "Creates a new value of some type",
    "Spoofchecker::areConfusable" => "Checks if given strings can be confused",
    "Spoofchecker::isSuspicious" => "Checks if a given text contains any suspicious characters",
    "Spoofchecker::setAllowedLocales" => "Locales to use when running checks",
    "Spoofchecker::setChecks" => "Set the checks to run",
    "Spoofchecker::__construct" => "Constructor",
    "sprintf" => "Return a formatted string",
    "sqrt" => "Square root",
    "srand" => "Seed the random number generator",
    "sscanf" => "Parses input from a string according to a format",
    "SSL" => "SSL context option listing",
    "stat" => "Gives information about a file",
    "Stomp::abort" => "Rolls back a transaction in progress",
    "Stomp::ack" => "Acknowledges consumption of a message",
    "Stomp::begin" => "Starts a transaction",
    "Stomp::commit" => "Commits a transaction in progress",
    "Stomp::error" => "Gets the last stomp error",
    "Stomp::getReadTimeout" => "Gets read timeout",
    "Stomp::getSessionId" => "Gets the current stomp session ID",
    "Stomp::hasFrame" => "Indicates whether or not there is a frame ready to read",
    "Stomp::readFrame" => "Reads the next frame",
    "Stomp::send" => "Sends a message",
    "Stomp::setReadTimeout" => "Sets read timeout",
    "Stomp::subscribe" => "Registers to listen to a given destination",
    "Stomp::unsubscribe" => "Removes an existing subscription",
    "Stomp::__construct" => "Opens a connection",
    "Stomp::__destruct" => "Closes stomp connection",
    "StompException::getDetails" => "Get exception details",
    "StompFrame::__construct" => "Constructor",
    "strcasecmp" => "Binary safe case-insensitive string comparison",
    "strchr" => "Alias of strstr",
    "strcmp" => "Binary safe string comparison",
    "strcoll" => "Locale based string comparison",
    "strcspn" => "Find length of initial segment not matching mask",
    "streamWrapper::mkdir" => "Create a directory",
    "streamWrapper::rename" => "Renames a file or directory",
    "streamWrapper::rmdir" => "Removes a directory",
    "streamWrapper::unlink" => "Delete a file",
    "streamWrapper::__construct" => "Constructs a new stream wrapper",
    "streamWrapper::__destruct" => "Destructs an existing stream wrapper",
    "strftime" => "Format a local time/date according to locale settings",
    "stripcslashes" => "Un-quote string quoted with addcslashes",
    "stripos" => "Find the position of the first occurrence of a case-insensitive substring in a string",
    "stripslashes" => "Un-quotes a quoted string",
    "stristr" => "Case-insensitive strstr",
    "strlen" => "Get string length",
    "strnatcasecmp" => "Case insensitive string comparisons using a &quot;natural order&quot; algorithm",
    "strnatcmp" => "String comparisons using a &quot;natural order&quot; algorithm",
    "strncasecmp" => "Binary safe case-insensitive string comparison of the first n characters",
    "strncmp" => "Binary safe string comparison of the first n characters",
    "strpbrk" => "Search a string for any of a set of characters",
    "strpos" => "Find the position of the first occurrence of a substring in a string",
    "strptime" => "Parse a time/date generated with strftime",
    "strrchr" => "Find the last occurrence of a character in a string",
    "strrev" => "Reverse a string",
    "strripos" => "Find the position of the last occurrence of a case-insensitive substring in a string",
    "strrpos" => "Find the position of the last occurrence of a substring in a string",
    "strstr" => "Find the first occurrence of a string",
    "strtok" => "Tokenize string",
    "strtolower" => "Make a string lowercase",
    "strtotime" => "Parse about any English textual datetime description into a Unix timestamp",
    "strtoupper" => "Make a string uppercase",
    "strtr" => "Translate characters or replace substrings",
    "strval" => "Get string value of a variable",
    "substr" => "Return part of a string",
    "SVM::crossvalidate" => "Test training params on subsets of the training data",
    "SVM::getOptions" => "Return the current training parameters",
    "SVM::setOptions" => "Set training parameters",
    "SVM::train" => "Create a SVMModel based on training data",
    "SVM::__construct" => "Construct a new SVM object",
    "SVMModel::checkProbabilityModel" => "Returns true if the model has probability information",
    "SVMModel::getLabels" => "Get the labels the model was trained on",
    "SVMModel::getNrClass" => "Returns the number of classes the model was trained with",
    "SVMModel::getSvmType" => "Get the SVM type the model was trained with",
    "SVMModel::getSvrProbability" => "Get the sigma value for regression types",
    "SVMModel::load" => "Load a saved SVM Model",
    "SVMModel::predict" => "Predict a value for previously unseen data",
    "SVMModel::save" => "Save a model to a file",
    "SVMModel::__construct" => "Construct a new SVMModel",
    "SWFAction::__construct" => "Creates a new SWFAction",
    "SWFBitmap::getHeight" => "Returns the bitmap's height",
    "SWFBitmap::getWidth" => "Returns the bitmap's width",
    "SWFBitmap::__construct" => "Loads Bitmap object",
    "SWFButton::addAction" => "Adds an action",
    "SWFButton::addASound" => "Associates a sound with a button transition",
    "SWFButton::addShape" => "Adds a shape to a button",
    "SWFButton::setAction" => "Sets the action",
    "SWFButton::setDown" => "Alias for addShape(shape, SWFBUTTON_DOWN)",
    "SWFButton::setHit" => "Alias for addShape(shape, SWFBUTTON_HIT)",
    "SWFButton::setMenu" => "Enable track as menu button behaviour",
    "SWFButton::setOver" => "Alias for addShape(shape, SWFBUTTON_OVER)",
    "SWFButton::setUp" => "Alias for addShape(shape, SWFBUTTON_UP)",
    "SWFButton::__construct" => "Creates a new Button",
    "SWFDisplayItem::addAction" => "Adds this SWFAction to the given SWFSprite instance",
    "SWFDisplayItem::addColor" => "Adds the given color to this item's color transform",
    "SWFDisplayItem::endMask" => "Another way of defining a MASK layer",
    "SWFDisplayItem::getRot" => "Description",
    "SWFDisplayItem::getX" => "Description",
    "SWFDisplayItem::getXScale" => "Description",
    "SWFDisplayItem::getXSkew" => "Description",
    "SWFDisplayItem::getY" => "Description",
    "SWFDisplayItem::getYScale" => "Description",
    "SWFDisplayItem::getYSkew" => "Description",
    "SWFDisplayItem::move" => "Moves object in relative coordinates",
    "SWFDisplayItem::moveTo" => "Moves object in global coordinates",
    "SWFDisplayItem::multColor" => "Multiplies the item's color transform",
    "SWFDisplayItem::remove" => "Removes the object from the movie",
    "SWFDisplayItem::rotate" => "Rotates in relative coordinates",
    "SWFDisplayItem::rotateTo" => "Rotates the object in global coordinates",
    "SWFDisplayItem::scale" => "Scales the object in relative coordinates",
    "SWFDisplayItem::scaleTo" => "Scales the object in global coordinates",
    "SWFDisplayItem::setDepth" => "Sets z-order",
    "SWFDisplayItem::setMaskLevel" => "Defines a MASK layer at level",
    "SWFDisplayItem::setMatrix" => "Sets the item's transform matrix",
    "SWFDisplayItem::setName" => "Sets the object's name",
    "SWFDisplayItem::setRatio" => "Sets the object's ratio",
    "SWFDisplayItem::skewX" => "Sets the X-skew",
    "SWFDisplayItem::skewXTo" => "Sets the X-skew",
    "SWFDisplayItem::skewY" => "Sets the Y-skew",
    "SWFDisplayItem::skewYTo" => "Sets the Y-skew",
    "SWFFill::moveTo" => "Moves fill origin",
    "SWFFill::rotateTo" => "Sets fill's rotation",
    "SWFFill::scaleTo" => "Sets fill's scale",
    "SWFFill::skewXTo" => "Sets fill x-skew",
    "SWFFill::skewYTo" => "Sets fill y-skew",
    "SWFFont::getAscent" => "Returns the ascent of the font, or 0 if not available",
    "SWFFont::getDescent" => "Returns the descent of the font, or 0 if not available",
    "SWFFont::getLeading" => "Returns the leading of the font, or 0 if not available",
    "SWFFont::getShape" => "Returns the glyph shape of a char as a text string",
    "SWFFont::getWidth" => "Returns the string's width",
    "SWFFont::__construct" => "Loads a font definition",
    "SWFFontChar::addChars" => "Adds characters to a font for exporting font",
    "SWFGradient::addEntry" => "Adds an entry to the gradient list",
    "SWFGradient::__construct" => "Creates a gradient object",
    "SWFMorph::__construct" => "Creates a new SWFMorph object",
    "SWFMovie::add" => "Adds any type of data to a movie",
    "SWFMovie::addExport" => "Description",
    "SWFMovie::addFont" => "Description",
    "SWFMovie::importChar" => "Description",
    "SWFMovie::importFont" => "Description",
    "SWFMovie::labelFrame" => "Labels a frame",
    "SWFMovie::nextFrame" => "Moves to the next frame of the animation",
    "SWFMovie::output" => "Dumps your lovingly prepared movie out",
    "SWFMovie::remove" => "Removes the object instance from the display list",
    "SWFMovie::save" => "Saves the SWF movie in a file",
    "SWFMovie::saveToFile" => "Description",
    "SWFMovie::setbackground" => "Sets the background color",
    "SWFMovie::setDimension" => "Sets the movie's width and height",
    "SWFMovie::setFrames" => "Sets the total number of frames in the animation",
    "SWFMovie::setRate" => "Sets the animation's frame rate",
    "SWFMovie::startSound" => "Description",
    "SWFMovie::stopSound" => "Description",
    "SWFMovie::writeExports" => "Description",
    "SWFMovie::__construct" => "Creates a new movie object, representing an SWF version 4 movie",
    "SWFPrebuiltClip::__construct" => "Returns a SWFPrebuiltClip object",
    "SWFShape::addFill" => "Adds a solid fill to the shape",
    "SWFShape::drawArc" => "Draws an arc of radius r centered at the current location, from angle startAngle to angle endAngle measured clockwise from 12 o'clock",
    "SWFShape::drawCircle" => "Draws a circle of radius r centered at the current location, in a counter-clockwise fashion",
    "SWFShape::drawCubic" => "Draws a cubic bezier curve using the current position and the three given points as control points",
    "SWFShape::drawCubicTo" => "Draws a cubic bezier curve using the current position and the three given points as control points",
    "SWFShape::drawCurve" => "Draws a curve (relative)",
    "SWFShape::drawCurveTo" => "Draws a curve",
    "SWFShape::drawGlyph" => "Draws the first character in the given string into the shape using the glyph definition from the given font",
    "SWFShape::drawLine" => "Draws a line (relative)",
    "SWFShape::drawLineTo" => "Draws a line",
    "SWFShape::movePen" => "Moves the shape's pen (relative)",
    "SWFShape::movePenTo" => "Moves the shape's pen",
    "SWFShape::setLeftFill" => "Sets left rasterizing color",
    "SWFShape::setLine" => "Sets the shape's line style",
    "SWFShape::setRightFill" => "Sets right rasterizing color",
    "SWFShape::__construct" => "Creates a new shape object",
    "SWFSound::__construct" => "Returns a new SWFSound object from given file",
    "SWFSoundInstance::loopCount" => "Description",
    "SWFSoundInstance::loopInPoint" => "Description",
    "SWFSoundInstance::loopOutPoint" => "Description",
    "SWFSoundInstance::noMultiple" => "Description",
    "SWFSprite::add" => "Adds an object to a sprite",
    "SWFSprite::labelFrame" => "Labels frame",
    "SWFSprite::nextFrame" => "Moves to the next frame of the animation",
    "SWFSprite::remove" => "Removes an object to a sprite",
    "SWFSprite::setFrames" => "Sets the total number of frames in the animation",
    "SWFSprite::startSound" => "Description",
    "SWFSprite::stopSound" => "Description",
    "SWFSprite::__construct" => "Creates a movie clip (a sprite)",
    "SWFText::addString" => "Draws a string",
    "SWFText::getAscent" => "Returns the ascent of the current font at its current size, or 0 if not available",
    "SWFText::getDescent" => "Returns the descent of the current font at its current size, or 0 if not available",
    "SWFText::getLeading" => "Returns the leading of the current font at its current size, or 0 if not available",
    "SWFText::getWidth" => "Computes string's width",
    "SWFText::moveTo" => "Moves the pen",
    "SWFText::setColor" => "Sets the current text color",
    "SWFText::setFont" => "Sets the current font",
    "SWFText::setHeight" => "Sets the current font height",
    "SWFText::setSpacing" => "Sets the current font spacing",
    "SWFText::__construct" => "Creates a new SWFText object",
    "SWFTextField::addChars" => "Adds characters to a font that will be available within a textfield",
    "SWFTextField::addString" => "Concatenates the given string to the text field",
    "SWFTextField::align" => "Sets the text field alignment",
    "SWFTextField::setBounds" => "Sets the text field width and height",
    "SWFTextField::setColor" => "Sets the color of the text field",
    "SWFTextField::setFont" => "Sets the text field font",
    "SWFTextField::setHeight" => "Sets the font height of this text field font",
    "SWFTextField::setIndentation" => "Sets the indentation of the first line",
    "SWFTextField::setLeftMargin" => "Sets the left margin width of the text field",
    "SWFTextField::setLineSpacing" => "Sets the line spacing of the text field",
    "SWFTextField::setMargins" => "Sets the margins width of the text field",
    "SWFTextField::setName" => "Sets the variable name",
    "SWFTextField::setPadding" => "Sets the padding of this textfield",
    "SWFTextField::setRightMargin" => "Sets the right margin width of the text field",
    "SWFTextField::__construct" => "Creates a text field object",
    "SWFVideoStream::getNumFrames" => "Returns the number of frames in the video",
    "SWFVideoStream::setDimension" => "Sets video dimension",
    "SWFVideoStream::__construct" => "Returns a SWFVideoStream object",
    "Swish::getMetaList" => "Get the list of meta entries for the index",
    "Swish::getPropertyList" => "Get the list of properties for the index",
    "Swish::prepare" => "Prepare a search query",
    "Swish::query" => "Execute a query and return results object",
    "Swish::__construct" => "Construct a Swish object",
    "SwishResult::getMetaList" => "Get a list of meta entries",
    "SwishResult::stem" => "Stems the given word",
    "SwishResults::getParsedWords" => "Get an array of parsed words",
    "SwishResults::getRemovedStopwords" => "Get an array of stopwords removed from the query",
    "SwishResults::nextResult" => "Get the next search result",
    "SwishResults::seekResult" => "Set current seek pointer to the given position",
    "SwishSearch::execute" => "Execute the search and get the results",
    "SwishSearch::resetLimit" => "Reset the search limits",
    "SwishSearch::setLimit" => "Set the search limits",
    "SwishSearch::setPhraseDelimiter" => "Set the phrase delimiter",
    "SwishSearch::setSort" => "Set the sort order",
    "SwishSearch::setStructure" => "Set the structure flag in the search object",
    "symlink" => "Creates a symbolic link",
    "SyncEvent::fire" => "Fires/sets the event",
    "SyncEvent::reset" => "Resets a manual event",
    "SyncEvent::wait" => "Waits for the event to be fired/set",
    "SyncEvent::__construct" => "Constructs a new SyncEvent object",
    "SyncMutex::lock" => "Waits for an exclusive lock",
    "SyncMutex::unlock" => "Unlocks the mutex",
    "SyncMutex::__construct" => "Constructs a new SyncMutex object",
    "SyncReaderWriter::readlock" => "Waits for a read lock",
    "SyncReaderWriter::readunlock" => "Releases a read lock",
    "SyncReaderWriter::writelock" => "Waits for an exclusive write lock",
    "SyncReaderWriter::writeunlock" => "Releases a write lock",
    "SyncReaderWriter::__construct" => "Constructs a new SyncReaderWriter object",
    "SyncSemaphore::lock" => "Decreases the count of the semaphore or waits",
    "SyncSemaphore::unlock" => "Increases the count of the semaphore",
    "SyncSemaphore::__construct" => "Constructs a new SyncSemaphore object",
    "SyncSharedMemory::first" => "Check to see if the object is the first instance system-wide of named shared memory",
    "SyncSharedMemory::read" => "Copy data from named shared memory",
    "SyncSharedMemory::size" => "Returns the size of the named shared memory",
    "SyncSharedMemory::write" => "Copy data to named shared memory",
    "SyncSharedMemory::__construct" => "Constructs a new SyncSharedMemory object",
    "syslog" => "Generate a system log message",
    "system" => "Execute an external program and display the output",
    "taint" => "Taint a string",
    "tan" => "Tangent",
    "tanh" => "Hyperbolic tangent",
    "tempnam" => "Create file with unique file name",
    "textdomain" => "Sets the default domain",
    "Thread::detach" => "Execution",
    "Thread::getCreatorId" => "Identification",
    "Thread::getCurrentThread" => "Identification",
    "Thread::getCurrentThreadId" => "Identification",
    "Thread::getThreadId" => "Identification",
    "Thread::globally" => "Execution",
    "Thread::isJoined" => "State Detection",
    "Thread::isStarted" => "State Detection",
    "Thread::join" => "Synchronization",
    "Thread::kill" => "Execution",
    "Thread::start" => "Execution",
    "Threaded::chunk" => "Manipulation",
    "Threaded::count" => "Manipulation",
    "Threaded::extend" => "Runtime Manipulation",
    "Threaded::from" => "Creation",
    "Threaded::getTerminationInfo" => "Error Detection",
    "Threaded::isRunning" => "State Detection",
    "Threaded::isTerminated" => "State Detection",
    "Threaded::isWaiting" => "State Detection",
    "Threaded::lock" => "Synchronization",
    "Threaded::merge" => "Manipulation",
    "Threaded::notify" => "Synchronization",
    "Threaded::notifyOne" => "Synchronization",
    "Threaded::pop" => "Manipulation",
    "Threaded::run" => "Execution",
    "Threaded::shift" => "Manipulation",
    "Threaded::synchronized" => "Synchronization",
    "Threaded::unlock" => "Synchronization",
    "Threaded::wait" => "Synchronization",
    "Throwable::getCode" => "Gets the exception code",
    "Throwable::getFile" => "Gets the file in which the exception was created",
    "Throwable::getLine" => "Gets the line on which the object was instantiated",
    "Throwable::getMessage" => "Gets the message",
    "Throwable::getPrevious" => "Returns the previous Throwable",
    "Throwable::getTrace" => "Gets the stack trace",
    "Throwable::getTraceAsString" => "Gets the stack trace as a string",
    "Throwable::__toString" => "Gets a string representation of the thrown object",
    "tidy::" => "Return warnings and errors which occurred parsing the specified document",
    "tidy::body" => "Returns a tidyNode object starting from the &lt;body&gt; tag of the tidy parse tree",
    "tidy::cleanRepair" => "Execute configured cleanup and repair operations on parsed markup",
    "tidy::diagnose" => "Run configured diagnostics on parsed and repaired markup",
    "tidy::getConfig" => "Get current Tidy configuration",
    "tidy::getHtmlVer" => "Get the Detected HTML version for the specified document",
    "tidy::getOpt" => "Returns the value of the specified configuration option for the tidy document",
    "tidy::getOptDoc" => "Returns the documentation for the given option name",
    "tidy::getRelease" => "Get release date (version) for Tidy library",
    "tidy::getStatus" => "Get status of specified document",
    "tidy::head" => "Returns a tidyNode object starting from the &lt;head&gt; tag of the tidy parse tree",
    "tidy::html" => "Returns a tidyNode object starting from the &lt;html&gt; tag of the tidy parse tree",
    "tidy::isXhtml" => "Indicates if the document is a XHTML document",
    "tidy::isXml" => "Indicates if the document is a generic (non HTML/XHTML) XML document",
    "tidy::parseFile" => "Parse markup in file or URI",
    "tidy::parseString" => "Parse a document stored in a string",
    "tidy::repairFile" => "Repair a file and return it as a string",
    "tidy::repairString" => "Repair a string using an optionally provided configuration file",
    "tidy::root" => "Returns a tidyNode object representing the root of the tidy parse tree",
    "tidy::__construct" => "Constructs a new tidy object",
    "tidyNode::getParent" => "Returns the parent node of the current node",
    "tidyNode::hasChildren" => "Checks if a node has children",
    "tidyNode::hasSiblings" => "Checks if a node has siblings",
    "tidyNode::isAsp" => "Checks if this node is ASP",
    "tidyNode::isComment" => "Checks if a node represents a comment",
    "tidyNode::isHtml" => "Checks if a node is part of a HTML document",
    "tidyNode::isJste" => "Checks if this node is JSTE",
    "tidyNode::isPhp" => "Checks if a node is PHP",
    "tidyNode::isText" => "Checks if a node represents text (no markup)",
    "time" => "Return current Unix timestamp",
    "tmpfile" => "Creates a temporary file",
    "TokyoTyrant::add" => "Adds to a numeric key",
    "TokyoTyrant::connect" => "Connect to a database",
    "TokyoTyrant::connectUri" => "Connects to a database",
    "TokyoTyrant::copy" => "Copies the database",
    "TokyoTyrant::ext" => "Execute a remote script",
    "TokyoTyrant::fwmKeys" => "Returns the forward matching keys",
    "TokyoTyrant::get" => "The get purpose",
    "TokyoTyrant::getIterator" => "Get an iterator",
    "TokyoTyrant::num" => "Number of records in the database",
    "TokyoTyrant::out" => "Removes records",
    "TokyoTyrant::put" => "Puts values",
    "TokyoTyrant::putCat" => "Concatenates to a record",
    "TokyoTyrant::putKeep" => "Puts a record",
    "TokyoTyrant::putNr" => "Puts value",
    "TokyoTyrant::putShl" => "Concatenates to a record",
    "TokyoTyrant::restore" => "Restore the database",
    "TokyoTyrant::setMaster" => "Set the replication master",
    "TokyoTyrant::size" => "Returns the size of the value",
    "TokyoTyrant::stat" => "Get statistics",
    "TokyoTyrant::sync" => "Synchronize the database",
    "TokyoTyrant::tune" => "Tunes connection values",
    "TokyoTyrant::vanish" => "Empties the database",
    "TokyoTyrant::__construct" => "Construct a new TokyoTyrant object",
    "TokyoTyrantIterator::current" => "Get the current value",
    "TokyoTyrantIterator::key" => "Returns the current key",
    "TokyoTyrantIterator::next" => "Move to next key",
    "TokyoTyrantIterator::rewind" => "Rewinds the iterator",
    "TokyoTyrantIterator::valid" => "Rewinds the iterator",
    "TokyoTyrantIterator::__construct" => "Construct an iterator",
    "TokyoTyrantQuery::addCond" => "Adds a condition to the query",
    "TokyoTyrantQuery::count" => "Counts records",
    "TokyoTyrantQuery::current" => "Returns the current element",
    "TokyoTyrantQuery::hint" => "Get the hint string of the query",
    "TokyoTyrantQuery::key" => "Returns the current key",
    "TokyoTyrantQuery::metaSearch" => "Retrieve records with multiple queries",
    "TokyoTyrantQuery::next" => "Moves the iterator to next entry",
    "TokyoTyrantQuery::out" => "Removes records based on query",
    "TokyoTyrantQuery::rewind" => "Rewinds the iterator",
    "TokyoTyrantQuery::search" => "Searches records",
    "TokyoTyrantQuery::setLimit" => "Limit results",
    "TokyoTyrantQuery::setOrder" => "Orders results",
    "TokyoTyrantQuery::valid" => "Checks the validity of current item",
    "TokyoTyrantQuery::__construct" => "Construct a new query",
    "TokyoTyrantTable::add" => "Adds a record",
    "TokyoTyrantTable::genUid" => "Generate unique id",
    "TokyoTyrantTable::get" => "Get a row",
    "TokyoTyrantTable::getIterator" => "Get an iterator",
    "TokyoTyrantTable::getQuery" => "Get a query object",
    "TokyoTyrantTable::out" => "Remove records",
    "TokyoTyrantTable::put" => "Store a row",
    "TokyoTyrantTable::putCat" => "Concatenates to a row",
    "TokyoTyrantTable::putKeep" => "Put a new record",
    "TokyoTyrantTable::putNr" => "Puts value",
    "TokyoTyrantTable::putShl" => "Concatenates to a record",
    "TokyoTyrantTable::setIndex" => "Sets index",
    "touch" => "Sets access and modification time of file",
    "Transliterator::create" => "Create a transliterator",
    "Transliterator::createFromRules" => "Create transliterator from rules",
    "Transliterator::createInverse" => "Create an inverse transliterator",
    "Transliterator::getErrorCode" => "Get last error code",
    "Transliterator::getErrorMessage" => "Get last error message",
    "Transliterator::listIDs" => "Get transliterator IDs",
    "Transliterator::transliterate" => "Transliterate a string",
    "Transliterator::__construct" => "Private constructor to deny instantiation",
    "trim" => "Strip whitespace (or other characters) from the beginning and end of a string",
    "uasort" => "Sort an array with a user-defined comparison function and maintain index association",
    "ucfirst" => "Make a string's first character uppercase",
    "UConverter::convert" => "Convert string from one charset to another",
    "UConverter::fromUCallback" => "Default &quot;from&quot; callback function",
    "UConverter::getAliases" => "Get the aliases of the given name",
    "UConverter::getAvailable" => "Get the available canonical converter names",
    "UConverter::getDestinationEncoding" => "Get the destination encoding",
    "UConverter::getDestinationType" => "Get the destination converter type",
    "UConverter::getErrorCode" => "Get last error code on the object",
    "UConverter::getErrorMessage" => "Get last error message on the object",
    "UConverter::getSourceEncoding" => "Get the source encoding",
    "UConverter::getSourceType" => "Get the source convertor type",
    "UConverter::getStandards" => "Get standards associated to converter names",
    "UConverter::getSubstChars" => "Get substitution chars",
    "UConverter::reasonText" => "Get string representation of the callback reason",
    "UConverter::setDestinationEncoding" => "Set the destination encoding",
    "UConverter::setSourceEncoding" => "Set the source encoding",
    "UConverter::setSubstChars" => "Set the substitution chars",
    "UConverter::toUCallback" => "Default &quot;to&quot; callback function",
    "UConverter::transcode" => "Convert string from one charset to another",
    "UConverter::__construct" => "Create UConverter object",
    "ucwords" => "Uppercase the first character of each word in a string",
    "uksort" => "Sort an array by keys using a user-defined comparison function",
    "umask" => "Changes the current umask",
    "uniqid" => "Generate a unique ID",
    "unixtojd" => "Convert Unix timestamp to Julian Day",
    "unlink" => "Deletes a file",
    "unpack" => "Unpack data from binary string",
    "unserialize" => "Creates a PHP value from a stored representation",
    "unset" => "Unset a given variable",
    "untaint" => "Untaint strings",
    "urldecode" => "Decodes URL-encoded string",
    "urlencode" => "URL-encodes string",
    "usleep" => "Delay execution in microseconds",
    "usort" => "Sort an array by values using a user-defined comparison function",
    "VarnishAdmin::auth" => "Authenticate on a varnish instance",
    "VarnishAdmin::ban" => "Ban URLs using a VCL expression",
    "VarnishAdmin::banUrl" => "Ban an URL using a VCL expression",
    "VarnishAdmin::clearPanic" => "Clear varnish instance panic messages",
    "VarnishAdmin::connect" => "Connect to a varnish instance administration interface",
    "VarnishAdmin::disconnect" => "Disconnect from a varnish instance administration interface",
    "VarnishAdmin::getPanic" => "Get the last panic message on a varnish instance",
    "VarnishAdmin::getParams" => "Fetch current varnish instance configuration parameters",
    "VarnishAdmin::isRunning" => "Check if the varnish slave process is currently running",
    "VarnishAdmin::setCompat" => "Set the class compat configuration param",
    "VarnishAdmin::setHost" => "Set the class host configuration param",
    "VarnishAdmin::setIdent" => "Set the class ident configuration param",
    "VarnishAdmin::setParam" => "Set configuration param on the current varnish instance",
    "VarnishAdmin::setPort" => "Set the class port configuration param",
    "VarnishAdmin::setSecret" => "Set the class secret configuration param",
    "VarnishAdmin::setTimeout" => "Set the class timeout configuration param",
    "VarnishAdmin::start" => "Start varnish worker process",
    "VarnishAdmin::stop" => "Stop varnish worker process",
    "VarnishAdmin::__construct" => "VarnishAdmin constructor",
    "VarnishLog::getLine" => "Get next log line",
    "VarnishLog::getTagName" => "Get the log tag string representation by its index",
    "VarnishLog::__construct" => "Varnishlog constructor",
    "VarnishStat::getSnapshot" => "Get the current varnish instance statistics snapshot",
    "VarnishStat::__construct" => "VarnishStat constructor",
    "vfprintf" => "Write a formatted string to a stream",
    "virtual" => "Perform an Apache sub-request",
    "vprintf" => "Output a formatted string",
    "vsprintf" => "Return a formatted string",
    "WeakMap::count" => "Counts the number of live entries in the map",
    "WeakMap::current" => "Returns the current value under iteration",
    "WeakMap::key" => "Returns the current key under iteration",
    "WeakMap::next" => "Advances to the next map element",
    "WeakMap::offsetExists" => "Checks whether a certain object is in the map",
    "WeakMap::offsetGet" => "Returns the value pointed to by a certain object",
    "WeakMap::offsetSet" => "Updates the map with a new key-value pair",
    "WeakMap::offsetUnset" => "Removes an entry from the map",
    "WeakMap::rewind" => "Rewinds the iterator to the beginning of the map",
    "WeakMap::valid" => "Returns whether the iterator is still on a valid map element",
    "WeakMap::__construct" => "Constructs a new map",
    "Weakref::acquire" => "Acquires a strong reference on that object",
    "Weakref::get" => "Returns the object pointed to by the weak reference",
    "Weakref::release" => "Releases a previously acquired reference",
    "Weakref::valid" => "Checks whether the object referenced still exists",
    "Weakref::__construct" => "Constructs a new weak reference",
    "wordwrap" => "Wraps a string to a given number of characters",
    "Worker::collect" => "Collect references to completed tasks",
    "Worker::getStacked" => "Gets the remaining stack size",
    "Worker::isShutdown" => "State Detection",
    "Worker::isWorking" => "State Detection",
    "Worker::shutdown" => "Shutdown the worker",
    "Worker::stack" => "Stacking work",
    "Worker::unstack" => "Unstacking work",
    "XMLReader::close" => "Close the XMLReader input",
    "XMLReader::expand" => "Returns a copy of the current node as a DOM object",
    "XMLReader::getAttribute" => "Get the value of a named attribute",
    "XMLReader::getAttributeNo" => "Get the value of an attribute by index",
    "XMLReader::getAttributeNs" => "Get the value of an attribute by localname and URI",
    "XMLReader::getParserProperty" => "Indicates if specified property has been set",
    "XMLReader::isValid" => "Indicates if the parsed document is valid",
    "XMLReader::lookupNamespace" => "Lookup namespace for a prefix",
    "XMLReader::moveToAttribute" => "Move cursor to a named attribute",
    "XMLReader::moveToAttributeNo" => "Move cursor to an attribute by index",
    "XMLReader::moveToAttributeNs" => "Move cursor to a named attribute",
    "XMLReader::moveToElement" => "Position cursor on the parent Element of current Attribute",
    "XMLReader::moveToFirstAttribute" => "Position cursor on the first Attribute",
    "XMLReader::moveToNextAttribute" => "Position cursor on the next Attribute",
    "XMLReader::next" => "Move cursor to next node skipping all subtrees",
    "XMLReader::open" => "Set the URI containing the XML to parse",
    "XMLReader::read" => "Move to next node in document",
    "XMLReader::readInnerXml" => "Retrieve XML from current node",
    "XMLReader::readOuterXml" => "Retrieve XML from current node, including itself",
    "XMLReader::readString" => "Reads the contents of the current node as a string",
    "XMLReader::setParserProperty" => "Set parser options",
    "XMLReader::setRelaxNGSchema" => "Set the filename or URI for a RelaxNG Schema",
    "XMLReader::setRelaxNGSchemaSource" => "Set the data containing a RelaxNG Schema",
    "XMLReader::setSchema" => "Validate document against XSD",
    "XMLReader::XML" => "Set the data containing the XML to parse",
    "XSLTProcessor::getParameter" => "Get value of a parameter",
    "XSLTProcessor::getSecurityPrefs" => "Get security preferences",
    "XSLTProcessor::hasExsltSupport" => "Determine if PHP has EXSLT support",
    "XSLTProcessor::importStylesheet" => "Import stylesheet",
    "XSLTProcessor::registerPHPFunctions" => "Enables the ability to use PHP functions as XSLT functions",
    "XSLTProcessor::removeParameter" => "Remove parameter",
    "XSLTProcessor::setParameter" => "Set value for a parameter",
    "XSLTProcessor::setProfiling" => "Sets profiling output file",
    "XSLTProcessor::setSecurityPrefs" => "Set security preferences",
    "XSLTProcessor::transformToDoc" => "Transform to a DOMDocument",
    "XSLTProcessor::transformToUri" => "Transform to URI",
    "XSLTProcessor::transformToXml" => "Transform to XML",
    "XSLTProcessor::__construct" => "Creates a new XSLTProcessor object",
    "Yaconf::get" => "Retrieve a item",
    "Yaconf::has" => "Determine if a item exists",
    "ZipArchive::addEmptyDir" => "Add a new directory",
    "ZipArchive::addFile" => "Adds a file to a ZIP archive from the given path",
    "ZipArchive::addFromString" => "Add a file to a ZIP archive using its contents",
    "ZipArchive::addGlob" => "Add files from a directory by glob pattern",
    "ZipArchive::addPattern" => "Add files from a directory by PCRE pattern",
    "ZipArchive::close" => "Close the active archive (opened or newly created)",
    "ZipArchive::count" => "Counts the number of files in the achive",
    "ZipArchive::deleteIndex" => "Delete an entry in the archive using its index",
    "ZipArchive::deleteName" => "Delete an entry in the archive using its name",
    "ZipArchive::extractTo" => "Extract the archive contents",
    "ZipArchive::getArchiveComment" => "Returns the Zip archive comment",
    "ZipArchive::getCommentIndex" => "Returns the comment of an entry using the entry index",
    "ZipArchive::getCommentName" => "Returns the comment of an entry using the entry name",
    "ZipArchive::getExternalAttributesIndex" => "Retrieve the external attributes of an entry defined by its index",
    "ZipArchive::getExternalAttributesName" => "Retrieve the external attributes of an entry defined by its name",
    "ZipArchive::getFromIndex" => "Returns the entry contents using its index",
    "ZipArchive::getFromName" => "Returns the entry contents using its name",
    "ZipArchive::getNameIndex" => "Returns the name of an entry using its index",
    "ZipArchive::getStatusString" => "Returns the status error message, system and/or zip messages",
    "ZipArchive::getStream" => "Get a file handler to the entry defined by its name (read only)",
    "ZipArchive::locateName" => "Returns the index of the entry in the archive",
    "ZipArchive::open" => "Open a ZIP file archive",
    "ZipArchive::renameIndex" => "Renames an entry defined by its index",
    "ZipArchive::renameName" => "Renames an entry defined by its name",
    "ZipArchive::setArchiveComment" => "Set the comment of a ZIP archive",
    "ZipArchive::setCommentIndex" => "Set the comment of an entry defined by its index",
    "ZipArchive::setCommentName" => "Set the comment of an entry defined by its name",
    "ZipArchive::setCompressionIndex" => "Set the compression method of an entry defined by its index",
    "ZipArchive::setCompressionName" => "Set the compression method of an entry defined by its name",
    "ZipArchive::setEncryptionIndex" => "Set the encryption method of an entry defined by its index",
    "ZipArchive::setEncryptionName" => "Set the encryption method of an entry defined by its name",
    "ZipArchive::setExternalAttributesIndex" => "Set the external attributes of an entry defined by its index",
    "ZipArchive::setExternalAttributesName" => "Set the external attributes of an entry defined by its name",
    "ZipArchive::setPassword" => "Set the password for the active archive",
    "ZipArchive::statIndex" => "Get the details of an entry defined by its index",
    "ZipArchive::statName" => "Get the details of an entry defined by its name",
    "ZipArchive::unchangeAll" => "Undo all changes done in the archive",
    "ZipArchive::unchangeArchive" => "Revert all global changes done in the archive",
    "ZipArchive::unchangeIndex" => "Revert all changes done to an entry at the given index",
    "ZipArchive::unchangeName" => "Revert all changes done to an entry with the given name",
    "Zip" => "Zip context option listing",
    "zlib:" => "Compression Streams",
    "ZMQ::__construct" => "ZMQ constructor",
    "ZMQContext::getOpt" => "Get context option",
    "ZMQContext::getSocket" => "Create a new socket",
    "ZMQContext::isPersistent" => "Whether the context is persistent",
    "ZMQContext::setOpt" => "Set a socket option",
    "ZMQContext::__construct" => "Construct a new ZMQContext object",
    "ZMQDevice::getIdleTimeout" => "Get the idle timeout",
    "ZMQDevice::getTimerTimeout" => "Get the timer timeout",
    "ZMQDevice::run" => "Run the new device",
    "ZMQDevice::setIdleCallback" => "Set the idle callback function",
    "ZMQDevice::setIdleTimeout" => "Set the idle timeout",
    "ZMQDevice::setTimerCallback" => "Set the timer callback function",
    "ZMQDevice::setTimerTimeout" => "Set the timer timeout",
    "ZMQDevice::__construct" => "Construct a new device",
    "ZMQPoll::add" => "Add item to the poll set",
    "ZMQPoll::clear" => "Clear the poll set",
    "ZMQPoll::count" => "Count items in the poll set",
    "ZMQPoll::getLastErrors" => "Get poll errors",
    "ZMQPoll::poll" => "Poll the items",
    "ZMQPoll::remove" => "Remove item from poll set",
    "ZMQSocket::bind" => "Bind the socket",
    "ZMQSocket::connect" => "Connect the socket",
    "ZMQSocket::disconnect" => "Disconnect a socket",
    "ZMQSocket::getEndpoints" => "Get list of endpoints",
    "ZMQSocket::getPersistentId" => "Get the persistent id",
    "ZMQSocket::getSocketType" => "Get the socket type",
    "ZMQSocket::getSockOpt" => "Get socket option",
    "ZMQSocket::isPersistent" => "Whether the socket is persistent",
    "ZMQSocket::recv" => "Receives a message",
    "ZMQSocket::recvMulti" => "Receives a multipart message",
    "ZMQSocket::send" => "Sends a message",
    "ZMQSocket::sendmulti" => "Sends a multipart message",
    "ZMQSocket::setSockOpt" => "Set a socket option",
    "ZMQSocket::unbind" => "Unbind the socket",
    "ZMQSocket::__construct" => "Construct a new ZMQSocket",
    "Zookeeper::addAuth" => "Specify application credentials",
    "Zookeeper::connect" => "Create a handle to used communicate with zookeeper",
    "Zookeeper::create" => "Create a node synchronously",
    "Zookeeper::delete" => "Delete a node in zookeeper synchronously",
    "Zookeeper::exists" => "Checks the existence of a node in zookeeper synchronously",
    "Zookeeper::get" => "Gets the data associated with a node synchronously",
    "Zookeeper::getAcl" => "Gets the acl associated with a node synchronously",
    "Zookeeper::getChildren" => "Lists the children of a node synchronously",
    "Zookeeper::getClientId" => "Return the client session id, only valid if the connections is currently connected (ie. last watcher state is ZOO_CONNECTED_STATE)",
    "Zookeeper::getRecvTimeout" => "Return the timeout for this session, only valid if the connections is currently connected (ie. last watcher state is ZOO_CONNECTED_STATE). This value may change after a server re-connect",
    "Zookeeper::getState" => "Get the state of the zookeeper connection",
    "Zookeeper::isRecoverable" => "Checks if the current zookeeper connection state can be recovered",
    "Zookeeper::set" => "Sets the data associated with a node",
    "Zookeeper::setAcl" => "Sets the acl associated with a node synchronously",
    "Zookeeper::setDebugLevel" => "Sets the debugging level for the library",
    "Zookeeper::setDeterministicConnOrder" => "Enable/disable quorum endpoint order randomization",
    "Zookeeper::setLogStream" => "Sets the stream to be used by the library for logging",
    "Zookeeper::setWatcher" => "Set a watcher function",
    "Zookeeper::__construct" => "Create a handle to used communicate with zookeeper",
    "__autoload" => "Attempt to load undefined class",
];
